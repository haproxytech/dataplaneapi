// Code generated by go-swagger; DO NOT EDIT.

package http_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/haproxytech/models"
)

// CreateHTTPRequestRuleReader is a Reader for the CreateHTTPRequestRule structure.
type CreateHTTPRequestRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateHTTPRequestRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateHTTPRequestRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewCreateHTTPRequestRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateHTTPRequestRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateHTTPRequestRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateHTTPRequestRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateHTTPRequestRuleCreated creates a CreateHTTPRequestRuleCreated with default headers values
func NewCreateHTTPRequestRuleCreated() *CreateHTTPRequestRuleCreated {
	return &CreateHTTPRequestRuleCreated{}
}

/*CreateHTTPRequestRuleCreated handles this case with default header values.

HTTP Request Rule created
*/
type CreateHTTPRequestRuleCreated struct {
	Payload *models.HTTPRequestRule
}

func (o *CreateHTTPRequestRuleCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_request_rules][%d] createHttpRequestRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateHTTPRequestRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPRequestRuleAccepted creates a CreateHTTPRequestRuleAccepted with default headers values
func NewCreateHTTPRequestRuleAccepted() *CreateHTTPRequestRuleAccepted {
	return &CreateHTTPRequestRuleAccepted{}
}

/*CreateHTTPRequestRuleAccepted handles this case with default header values.

Configuration change accepted and reload requested
*/
type CreateHTTPRequestRuleAccepted struct {
	/*ID of the requested reload
	 */
	ReloadID string

	Payload *models.HTTPRequestRule
}

func (o *CreateHTTPRequestRuleAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_request_rules][%d] createHttpRequestRuleAccepted  %+v", 202, o.Payload)
}

func (o *CreateHTTPRequestRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Reload-ID
	o.ReloadID = response.GetHeader("Reload-ID")

	o.Payload = new(models.HTTPRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPRequestRuleBadRequest creates a CreateHTTPRequestRuleBadRequest with default headers values
func NewCreateHTTPRequestRuleBadRequest() *CreateHTTPRequestRuleBadRequest {
	return &CreateHTTPRequestRuleBadRequest{}
}

/*CreateHTTPRequestRuleBadRequest handles this case with default header values.

Bad request
*/
type CreateHTTPRequestRuleBadRequest struct {
	Payload *models.Error
}

func (o *CreateHTTPRequestRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_request_rules][%d] createHttpRequestRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateHTTPRequestRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPRequestRuleConflict creates a CreateHTTPRequestRuleConflict with default headers values
func NewCreateHTTPRequestRuleConflict() *CreateHTTPRequestRuleConflict {
	return &CreateHTTPRequestRuleConflict{}
}

/*CreateHTTPRequestRuleConflict handles this case with default header values.

The specified resource already exists
*/
type CreateHTTPRequestRuleConflict struct {
	Payload *models.Error
}

func (o *CreateHTTPRequestRuleConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_request_rules][%d] createHttpRequestRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateHTTPRequestRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPRequestRuleDefault creates a CreateHTTPRequestRuleDefault with default headers values
func NewCreateHTTPRequestRuleDefault(code int) *CreateHTTPRequestRuleDefault {
	return &CreateHTTPRequestRuleDefault{
		_statusCode: code,
	}
}

/*CreateHTTPRequestRuleDefault handles this case with default header values.

General Error
*/
type CreateHTTPRequestRuleDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create HTTP request rule default response
func (o *CreateHTTPRequestRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateHTTPRequestRuleDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_request_rules][%d] createHTTPRequestRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateHTTPRequestRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
