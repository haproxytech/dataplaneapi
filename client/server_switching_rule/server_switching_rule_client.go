// Code generated by go-swagger; DO NOT EDIT.

package server_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new server switching rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server switching rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateServerSwitchingRule adds a new server switching rule

Adds a new Server Switching Rule of the specified type in the specified backend.
*/
func (a *Client) CreateServerSwitchingRule(params *CreateServerSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServerSwitchingRuleCreated, *CreateServerSwitchingRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServerSwitchingRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServerSwitchingRule",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/server_switching_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServerSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateServerSwitchingRuleCreated:
		return value, nil, nil
	case *CreateServerSwitchingRuleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteServerSwitchingRule deletes a server switching rule

Deletes a Server Switching Rule configuration by it's ID from the specified backend.
*/
func (a *Client) DeleteServerSwitchingRule(params *DeleteServerSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServerSwitchingRuleAccepted, *DeleteServerSwitchingRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServerSwitchingRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServerSwitchingRule",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/server_switching_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServerSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteServerSwitchingRuleAccepted:
		return value, nil, nil
	case *DeleteServerSwitchingRuleNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetServerSwitchingRule returns one server switching rule

Returns one Server Switching Rule configuration by it's ID in the specified backend.
*/
func (a *Client) GetServerSwitchingRule(params *GetServerSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetServerSwitchingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerSwitchingRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerSwitchingRule",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/server_switching_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerSwitchingRuleOK), nil

}

/*
GetServerSwitchingRules returns an array of all server switching rules

Returns all Backend Switching Rules that are configured in specified backend.
*/
func (a *Client) GetServerSwitchingRules(params *GetServerSwitchingRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServerSwitchingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerSwitchingRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerSwitchingRules",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/server_switching_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerSwitchingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerSwitchingRulesOK), nil

}

/*
ReplaceServerSwitchingRule replaces a server switching rule

Replaces a Server Switching Rule configuration by it's ID in the specified backend.
*/
func (a *Client) ReplaceServerSwitchingRule(params *ReplaceServerSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceServerSwitchingRuleOK, *ReplaceServerSwitchingRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceServerSwitchingRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceServerSwitchingRule",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/server_switching_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceServerSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceServerSwitchingRuleOK:
		return value, nil, nil
	case *ReplaceServerSwitchingRuleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
