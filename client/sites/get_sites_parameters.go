// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesParams creates a new GetSitesParams object
// with the default values initialized.
func NewGetSitesParams() *GetSitesParams {
	var ()
	return &GetSitesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesParamsWithTimeout creates a new GetSitesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesParamsWithTimeout(timeout time.Duration) *GetSitesParams {
	var ()
	return &GetSitesParams{

		timeout: timeout,
	}
}

// NewGetSitesParamsWithContext creates a new GetSitesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesParamsWithContext(ctx context.Context) *GetSitesParams {
	var ()
	return &GetSitesParams{

		Context: ctx,
	}
}

// NewGetSitesParamsWithHTTPClient creates a new GetSitesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesParamsWithHTTPClient(client *http.Client) *GetSitesParams {
	var ()
	return &GetSitesParams{
		HTTPClient: client,
	}
}

/*GetSitesParams contains all the parameters to send to the API endpoint
for the get sites operation typically these are written to a http.Request
*/
type GetSitesParams struct {

	/*TransactionID
	  ID of the transaction where we want to add the operation. Cannot be used when version is specified.

	*/
	TransactionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites params
func (o *GetSitesParams) WithTimeout(timeout time.Duration) *GetSitesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites params
func (o *GetSitesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites params
func (o *GetSitesParams) WithContext(ctx context.Context) *GetSitesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites params
func (o *GetSitesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites params
func (o *GetSitesParams) WithHTTPClient(client *http.Client) *GetSitesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites params
func (o *GetSitesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTransactionID adds the transactionID to the get sites params
func (o *GetSitesParams) WithTransactionID(transactionID *string) *GetSitesParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the get sites params
func (o *GetSitesParams) SetTransactionID(transactionID *string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TransactionID != nil {

		// query param transaction_id
		var qrTransactionID string
		if o.TransactionID != nil {
			qrTransactionID = *o.TransactionID
		}
		qTransactionID := qrTransactionID
		if qTransactionID != "" {
			if err := r.SetQueryParam("transaction_id", qTransactionID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
