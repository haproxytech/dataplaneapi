// Code generated by go-swagger; DO NOT EDIT.

package filter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/haproxytech/models"
)

// GetFilterReader is a Reader for the GetFilter structure.
type GetFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetFilterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFilterOK creates a GetFilterOK with default headers values
func NewGetFilterOK() *GetFilterOK {
	return &GetFilterOK{}
}

/*GetFilterOK handles this case with default header values.

Successful operation
*/
type GetFilterOK struct {
	Payload *GetFilterOKBody
}

func (o *GetFilterOK) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/filters/{id}][%d] getFilterOK  %+v", 200, o.Payload)
}

func (o *GetFilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFilterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilterNotFound creates a GetFilterNotFound with default headers values
func NewGetFilterNotFound() *GetFilterNotFound {
	return &GetFilterNotFound{}
}

/*GetFilterNotFound handles this case with default header values.

The specified resource was not found
*/
type GetFilterNotFound struct {
	Payload *models.Error
}

func (o *GetFilterNotFound) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/filters/{id}][%d] getFilterNotFound  %+v", 404, o.Payload)
}

func (o *GetFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilterDefault creates a GetFilterDefault with default headers values
func NewGetFilterDefault(code int) *GetFilterDefault {
	return &GetFilterDefault{
		_statusCode: code,
	}
}

/*GetFilterDefault handles this case with default header values.

General Error
*/
type GetFilterDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get filter default response
func (o *GetFilterDefault) Code() int {
	return o._statusCode
}

func (o *GetFilterDefault) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/filters/{id}][%d] getFilter default  %+v", o._statusCode, o.Payload)
}

func (o *GetFilterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetFilterOKBody get filter o k body
swagger:model GetFilterOKBody
*/
type GetFilterOKBody struct {

	// version
	Version int64 `json:"_version,omitempty"`

	// data
	Data *models.Filter `json:"data,omitempty"`
}

// Validate validates this get filter o k body
func (o *GetFilterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilterOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFilterOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFilterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilterOKBody) UnmarshalBinary(b []byte) error {
	var res GetFilterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
