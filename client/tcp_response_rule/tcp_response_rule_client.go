// Code generated by go-swagger; DO NOT EDIT.

package tcp_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tcp response rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tcp response rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateTCPResponseRule adds a new TCP response rule

Adds a new TCP Response Rule of the specified type in the specified backend.
*/
func (a *Client) CreateTCPResponseRule(params *CreateTCPResponseRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTCPResponseRuleCreated, *CreateTCPResponseRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTCPResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTCPResponseRule",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/tcp_response_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTCPResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTCPResponseRuleCreated:
		return value, nil, nil
	case *CreateTCPResponseRuleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteTCPResponseRule deletes a TCP response rule

Deletes a TCP Response Rule configuration by it's ID from the specified backend.
*/
func (a *Client) DeleteTCPResponseRule(params *DeleteTCPResponseRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTCPResponseRuleAccepted, *DeleteTCPResponseRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTCPResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTCPResponseRule",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/tcp_response_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTCPResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTCPResponseRuleAccepted:
		return value, nil, nil
	case *DeleteTCPResponseRuleNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetTCPResponseRule returns one TCP response rule

Returns one TCP Response Rule configuration by it's ID in the specified backend.
*/
func (a *Client) GetTCPResponseRule(params *GetTCPResponseRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetTCPResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTCPResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTCPResponseRule",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/tcp_response_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTCPResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTCPResponseRuleOK), nil

}

/*
GetTCPResponseRules returns an array of all TCP response rules

Returns all TCP Response Rules that are configured in specified backend.
*/
func (a *Client) GetTCPResponseRules(params *GetTCPResponseRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTCPResponseRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTCPResponseRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTCPResponseRules",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/tcp_response_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTCPResponseRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTCPResponseRulesOK), nil

}

/*
ReplaceTCPResponseRule replaces a TCP response rule

Replaces a TCP Response Rule configuration by it's ID in the specified backend.
*/
func (a *Client) ReplaceTCPResponseRule(params *ReplaceTCPResponseRuleParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTCPResponseRuleOK, *ReplaceTCPResponseRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTCPResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTCPResponseRule",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/tcp_response_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceTCPResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceTCPResponseRuleOK:
		return value, nil, nil
	case *ReplaceTCPResponseRuleAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
