// Code generated by go-swagger; DO NOT EDIT.

package frontend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/haproxytech/models"
)

// CreateFrontendReader is a Reader for the CreateFrontend structure.
type CreateFrontendReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateFrontendReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateFrontendCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewCreateFrontendAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateFrontendBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateFrontendConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateFrontendDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateFrontendCreated creates a CreateFrontendCreated with default headers values
func NewCreateFrontendCreated() *CreateFrontendCreated {
	return &CreateFrontendCreated{}
}

/*CreateFrontendCreated handles this case with default header values.

Frontend created
*/
type CreateFrontendCreated struct {
	Payload *models.Frontend
}

func (o *CreateFrontendCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/frontends][%d] createFrontendCreated  %+v", 201, o.Payload)
}

func (o *CreateFrontendCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Frontend)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFrontendAccepted creates a CreateFrontendAccepted with default headers values
func NewCreateFrontendAccepted() *CreateFrontendAccepted {
	return &CreateFrontendAccepted{}
}

/*CreateFrontendAccepted handles this case with default header values.

Configuration change accepted and reload requested
*/
type CreateFrontendAccepted struct {
	/*ID of the requested reload
	 */
	ReloadID string

	Payload *models.Frontend
}

func (o *CreateFrontendAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/frontends][%d] createFrontendAccepted  %+v", 202, o.Payload)
}

func (o *CreateFrontendAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Reload-ID
	o.ReloadID = response.GetHeader("Reload-ID")

	o.Payload = new(models.Frontend)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFrontendBadRequest creates a CreateFrontendBadRequest with default headers values
func NewCreateFrontendBadRequest() *CreateFrontendBadRequest {
	return &CreateFrontendBadRequest{}
}

/*CreateFrontendBadRequest handles this case with default header values.

Bad request
*/
type CreateFrontendBadRequest struct {
	Payload *models.Error
}

func (o *CreateFrontendBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/frontends][%d] createFrontendBadRequest  %+v", 400, o.Payload)
}

func (o *CreateFrontendBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFrontendConflict creates a CreateFrontendConflict with default headers values
func NewCreateFrontendConflict() *CreateFrontendConflict {
	return &CreateFrontendConflict{}
}

/*CreateFrontendConflict handles this case with default header values.

The specified resource already exists
*/
type CreateFrontendConflict struct {
	Payload *models.Error
}

func (o *CreateFrontendConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/frontends][%d] createFrontendConflict  %+v", 409, o.Payload)
}

func (o *CreateFrontendConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFrontendDefault creates a CreateFrontendDefault with default headers values
func NewCreateFrontendDefault(code int) *CreateFrontendDefault {
	return &CreateFrontendDefault{
		_statusCode: code,
	}
}

/*CreateFrontendDefault handles this case with default header values.

General Error
*/
type CreateFrontendDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create frontend default response
func (o *CreateFrontendDefault) Code() int {
	return o._statusCode
}

func (o *CreateFrontendDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/frontends][%d] createFrontend default  %+v", o._statusCode, o.Payload)
}

func (o *CreateFrontendDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
