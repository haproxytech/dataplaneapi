// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateTCPRequestRuleCreatedCode is the HTTP code returned for type CreateTCPRequestRuleCreated
const CreateTCPRequestRuleCreatedCode int = 201

/*
CreateTCPRequestRuleCreated TCP Request Rule created

swagger:response createTcpRequestRuleCreated
*/
type CreateTCPRequestRuleCreated struct {

	/*
	  In: Body
	*/
	Payload *models.TCPRequestRule `json:"body,omitempty"`
}

// NewCreateTCPRequestRuleCreated creates CreateTCPRequestRuleCreated with default headers values
func NewCreateTCPRequestRuleCreated() *CreateTCPRequestRuleCreated {

	return &CreateTCPRequestRuleCreated{}
}

// WithPayload adds the payload to the create Tcp request rule created response
func (o *CreateTCPRequestRuleCreated) WithPayload(payload *models.TCPRequestRule) *CreateTCPRequestRuleCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp request rule created response
func (o *CreateTCPRequestRuleCreated) SetPayload(payload *models.TCPRequestRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPRequestRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPRequestRuleAcceptedCode is the HTTP code returned for type CreateTCPRequestRuleAccepted
const CreateTCPRequestRuleAcceptedCode int = 202

/*
CreateTCPRequestRuleAccepted Configuration change accepted and reload requested

swagger:response createTcpRequestRuleAccepted
*/
type CreateTCPRequestRuleAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.TCPRequestRule `json:"body,omitempty"`
}

// NewCreateTCPRequestRuleAccepted creates CreateTCPRequestRuleAccepted with default headers values
func NewCreateTCPRequestRuleAccepted() *CreateTCPRequestRuleAccepted {

	return &CreateTCPRequestRuleAccepted{}
}

// WithReloadID adds the reloadId to the create Tcp request rule accepted response
func (o *CreateTCPRequestRuleAccepted) WithReloadID(reloadID string) *CreateTCPRequestRuleAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Tcp request rule accepted response
func (o *CreateTCPRequestRuleAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Tcp request rule accepted response
func (o *CreateTCPRequestRuleAccepted) WithPayload(payload *models.TCPRequestRule) *CreateTCPRequestRuleAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp request rule accepted response
func (o *CreateTCPRequestRuleAccepted) SetPayload(payload *models.TCPRequestRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPRequestRuleAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPRequestRuleBadRequestCode is the HTTP code returned for type CreateTCPRequestRuleBadRequest
const CreateTCPRequestRuleBadRequestCode int = 400

/*
CreateTCPRequestRuleBadRequest Bad request

swagger:response createTcpRequestRuleBadRequest
*/
type CreateTCPRequestRuleBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPRequestRuleBadRequest creates CreateTCPRequestRuleBadRequest with default headers values
func NewCreateTCPRequestRuleBadRequest() *CreateTCPRequestRuleBadRequest {

	return &CreateTCPRequestRuleBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Tcp request rule bad request response
func (o *CreateTCPRequestRuleBadRequest) WithConfigurationVersion(configurationVersion string) *CreateTCPRequestRuleBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Tcp request rule bad request response
func (o *CreateTCPRequestRuleBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Tcp request rule bad request response
func (o *CreateTCPRequestRuleBadRequest) WithPayload(payload *models.Error) *CreateTCPRequestRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp request rule bad request response
func (o *CreateTCPRequestRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPRequestRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPRequestRuleConflictCode is the HTTP code returned for type CreateTCPRequestRuleConflict
const CreateTCPRequestRuleConflictCode int = 409

/*
CreateTCPRequestRuleConflict The specified resource already exists

swagger:response createTcpRequestRuleConflict
*/
type CreateTCPRequestRuleConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPRequestRuleConflict creates CreateTCPRequestRuleConflict with default headers values
func NewCreateTCPRequestRuleConflict() *CreateTCPRequestRuleConflict {

	return &CreateTCPRequestRuleConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Tcp request rule conflict response
func (o *CreateTCPRequestRuleConflict) WithConfigurationVersion(configurationVersion string) *CreateTCPRequestRuleConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Tcp request rule conflict response
func (o *CreateTCPRequestRuleConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Tcp request rule conflict response
func (o *CreateTCPRequestRuleConflict) WithPayload(payload *models.Error) *CreateTCPRequestRuleConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp request rule conflict response
func (o *CreateTCPRequestRuleConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPRequestRuleConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateTCPRequestRuleDefault General Error

swagger:response createTcpRequestRuleDefault
*/
type CreateTCPRequestRuleDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPRequestRuleDefault creates CreateTCPRequestRuleDefault with default headers values
func NewCreateTCPRequestRuleDefault(code int) *CreateTCPRequestRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateTCPRequestRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) WithStatusCode(code int) *CreateTCPRequestRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) WithConfigurationVersion(configurationVersion string) *CreateTCPRequestRuleDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) WithPayload(payload *models.Error) *CreateTCPRequestRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPRequestRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
