// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v4/models"
)

// ReplaceHTTPCheckOKCode is the HTTP code returned for type ReplaceHTTPCheckOK
const ReplaceHTTPCheckOKCode int = 200

/*
ReplaceHTTPCheckOK HTTP check replaced

swagger:response replaceHttpCheckOK
*/
type ReplaceHTTPCheckOK struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPCheck `json:"body,omitempty"`
}

// NewReplaceHTTPCheckOK creates ReplaceHTTPCheckOK with default headers values
func NewReplaceHTTPCheckOK() *ReplaceHTTPCheckOK {

	return &ReplaceHTTPCheckOK{}
}

// WithPayload adds the payload to the replace Http check o k response
func (o *ReplaceHTTPCheckOK) WithPayload(payload *models.HTTPCheck) *ReplaceHTTPCheckOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http check o k response
func (o *ReplaceHTTPCheckOK) SetPayload(payload *models.HTTPCheck) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPCheckOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPCheckAcceptedCode is the HTTP code returned for type ReplaceHTTPCheckAccepted
const ReplaceHTTPCheckAcceptedCode int = 202

/*
ReplaceHTTPCheckAccepted Configuration change accepted and reload requested

swagger:response replaceHttpCheckAccepted
*/
type ReplaceHTTPCheckAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPCheck `json:"body,omitempty"`
}

// NewReplaceHTTPCheckAccepted creates ReplaceHTTPCheckAccepted with default headers values
func NewReplaceHTTPCheckAccepted() *ReplaceHTTPCheckAccepted {

	return &ReplaceHTTPCheckAccepted{}
}

// WithReloadID adds the reloadId to the replace Http check accepted response
func (o *ReplaceHTTPCheckAccepted) WithReloadID(reloadID string) *ReplaceHTTPCheckAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Http check accepted response
func (o *ReplaceHTTPCheckAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Http check accepted response
func (o *ReplaceHTTPCheckAccepted) WithPayload(payload *models.HTTPCheck) *ReplaceHTTPCheckAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http check accepted response
func (o *ReplaceHTTPCheckAccepted) SetPayload(payload *models.HTTPCheck) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPCheckAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPCheckBadRequestCode is the HTTP code returned for type ReplaceHTTPCheckBadRequest
const ReplaceHTTPCheckBadRequestCode int = 400

/*
ReplaceHTTPCheckBadRequest Bad request

swagger:response replaceHttpCheckBadRequest
*/
type ReplaceHTTPCheckBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPCheckBadRequest creates ReplaceHTTPCheckBadRequest with default headers values
func NewReplaceHTTPCheckBadRequest() *ReplaceHTTPCheckBadRequest {

	return &ReplaceHTTPCheckBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http check bad request response
func (o *ReplaceHTTPCheckBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPCheckBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http check bad request response
func (o *ReplaceHTTPCheckBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http check bad request response
func (o *ReplaceHTTPCheckBadRequest) WithPayload(payload *models.Error) *ReplaceHTTPCheckBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http check bad request response
func (o *ReplaceHTTPCheckBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPCheckBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPCheckNotFoundCode is the HTTP code returned for type ReplaceHTTPCheckNotFound
const ReplaceHTTPCheckNotFoundCode int = 404

/*
ReplaceHTTPCheckNotFound The specified resource was not found

swagger:response replaceHttpCheckNotFound
*/
type ReplaceHTTPCheckNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPCheckNotFound creates ReplaceHTTPCheckNotFound with default headers values
func NewReplaceHTTPCheckNotFound() *ReplaceHTTPCheckNotFound {

	return &ReplaceHTTPCheckNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http check not found response
func (o *ReplaceHTTPCheckNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPCheckNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http check not found response
func (o *ReplaceHTTPCheckNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http check not found response
func (o *ReplaceHTTPCheckNotFound) WithPayload(payload *models.Error) *ReplaceHTTPCheckNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http check not found response
func (o *ReplaceHTTPCheckNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPCheckNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceHTTPCheckDefault General Error

swagger:response replaceHttpCheckDefault
*/
type ReplaceHTTPCheckDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPCheckDefault creates ReplaceHTTPCheckDefault with default headers values
func NewReplaceHTTPCheckDefault(code int) *ReplaceHTTPCheckDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceHTTPCheckDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace HTTP check default response
func (o *ReplaceHTTPCheckDefault) WithStatusCode(code int) *ReplaceHTTPCheckDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace HTTP check default response
func (o *ReplaceHTTPCheckDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace HTTP check default response
func (o *ReplaceHTTPCheckDefault) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPCheckDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace HTTP check default response
func (o *ReplaceHTTPCheckDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace HTTP check default response
func (o *ReplaceHTTPCheckDefault) WithPayload(payload *models.Error) *ReplaceHTTPCheckDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace HTTP check default response
func (o *ReplaceHTTPCheckDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPCheckDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
