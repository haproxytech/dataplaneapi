// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateHTTPCheckCreatedCode is the HTTP code returned for type CreateHTTPCheckCreated
const CreateHTTPCheckCreatedCode int = 201

/*
CreateHTTPCheckCreated HTTP check created

swagger:response createHttpCheckCreated
*/
type CreateHTTPCheckCreated struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPCheck `json:"body,omitempty"`
}

// NewCreateHTTPCheckCreated creates CreateHTTPCheckCreated with default headers values
func NewCreateHTTPCheckCreated() *CreateHTTPCheckCreated {

	return &CreateHTTPCheckCreated{}
}

// WithPayload adds the payload to the create Http check created response
func (o *CreateHTTPCheckCreated) WithPayload(payload *models.HTTPCheck) *CreateHTTPCheckCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http check created response
func (o *CreateHTTPCheckCreated) SetPayload(payload *models.HTTPCheck) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPCheckCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPCheckAcceptedCode is the HTTP code returned for type CreateHTTPCheckAccepted
const CreateHTTPCheckAcceptedCode int = 202

/*
CreateHTTPCheckAccepted Configuration change accepted and reload requested

swagger:response createHttpCheckAccepted
*/
type CreateHTTPCheckAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPCheck `json:"body,omitempty"`
}

// NewCreateHTTPCheckAccepted creates CreateHTTPCheckAccepted with default headers values
func NewCreateHTTPCheckAccepted() *CreateHTTPCheckAccepted {

	return &CreateHTTPCheckAccepted{}
}

// WithReloadID adds the reloadId to the create Http check accepted response
func (o *CreateHTTPCheckAccepted) WithReloadID(reloadID string) *CreateHTTPCheckAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Http check accepted response
func (o *CreateHTTPCheckAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Http check accepted response
func (o *CreateHTTPCheckAccepted) WithPayload(payload *models.HTTPCheck) *CreateHTTPCheckAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http check accepted response
func (o *CreateHTTPCheckAccepted) SetPayload(payload *models.HTTPCheck) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPCheckAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPCheckBadRequestCode is the HTTP code returned for type CreateHTTPCheckBadRequest
const CreateHTTPCheckBadRequestCode int = 400

/*
CreateHTTPCheckBadRequest Bad request

swagger:response createHttpCheckBadRequest
*/
type CreateHTTPCheckBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPCheckBadRequest creates CreateHTTPCheckBadRequest with default headers values
func NewCreateHTTPCheckBadRequest() *CreateHTTPCheckBadRequest {

	return &CreateHTTPCheckBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http check bad request response
func (o *CreateHTTPCheckBadRequest) WithConfigurationVersion(configurationVersion string) *CreateHTTPCheckBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http check bad request response
func (o *CreateHTTPCheckBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http check bad request response
func (o *CreateHTTPCheckBadRequest) WithPayload(payload *models.Error) *CreateHTTPCheckBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http check bad request response
func (o *CreateHTTPCheckBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPCheckBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPCheckConflictCode is the HTTP code returned for type CreateHTTPCheckConflict
const CreateHTTPCheckConflictCode int = 409

/*
CreateHTTPCheckConflict The specified resource already exists

swagger:response createHttpCheckConflict
*/
type CreateHTTPCheckConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPCheckConflict creates CreateHTTPCheckConflict with default headers values
func NewCreateHTTPCheckConflict() *CreateHTTPCheckConflict {

	return &CreateHTTPCheckConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http check conflict response
func (o *CreateHTTPCheckConflict) WithConfigurationVersion(configurationVersion string) *CreateHTTPCheckConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http check conflict response
func (o *CreateHTTPCheckConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http check conflict response
func (o *CreateHTTPCheckConflict) WithPayload(payload *models.Error) *CreateHTTPCheckConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http check conflict response
func (o *CreateHTTPCheckConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPCheckConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateHTTPCheckDefault General Error

swagger:response createHttpCheckDefault
*/
type CreateHTTPCheckDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPCheckDefault creates CreateHTTPCheckDefault with default headers values
func NewCreateHTTPCheckDefault(code int) *CreateHTTPCheckDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateHTTPCheckDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create HTTP check default response
func (o *CreateHTTPCheckDefault) WithStatusCode(code int) *CreateHTTPCheckDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create HTTP check default response
func (o *CreateHTTPCheckDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create HTTP check default response
func (o *CreateHTTPCheckDefault) WithConfigurationVersion(configurationVersion string) *CreateHTTPCheckDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create HTTP check default response
func (o *CreateHTTPCheckDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create HTTP check default response
func (o *CreateHTTPCheckDefault) WithPayload(payload *models.Error) *CreateHTTPCheckDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create HTTP check default response
func (o *CreateHTTPCheckDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPCheckDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
