// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v4/models"
)

// ReplaceHTTPResponseRuleOKCode is the HTTP code returned for type ReplaceHTTPResponseRuleOK
const ReplaceHTTPResponseRuleOKCode int = 200

/*
ReplaceHTTPResponseRuleOK HTTP Response Rule replaced

swagger:response replaceHttpResponseRuleOK
*/
type ReplaceHTTPResponseRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPResponseRule `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleOK creates ReplaceHTTPResponseRuleOK with default headers values
func NewReplaceHTTPResponseRuleOK() *ReplaceHTTPResponseRuleOK {

	return &ReplaceHTTPResponseRuleOK{}
}

// WithPayload adds the payload to the replace Http response rule o k response
func (o *ReplaceHTTPResponseRuleOK) WithPayload(payload *models.HTTPResponseRule) *ReplaceHTTPResponseRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule o k response
func (o *ReplaceHTTPResponseRuleOK) SetPayload(payload *models.HTTPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPResponseRuleAcceptedCode is the HTTP code returned for type ReplaceHTTPResponseRuleAccepted
const ReplaceHTTPResponseRuleAcceptedCode int = 202

/*
ReplaceHTTPResponseRuleAccepted Configuration change accepted and reload requested

swagger:response replaceHttpResponseRuleAccepted
*/
type ReplaceHTTPResponseRuleAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPResponseRule `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleAccepted creates ReplaceHTTPResponseRuleAccepted with default headers values
func NewReplaceHTTPResponseRuleAccepted() *ReplaceHTTPResponseRuleAccepted {

	return &ReplaceHTTPResponseRuleAccepted{}
}

// WithReloadID adds the reloadId to the replace Http response rule accepted response
func (o *ReplaceHTTPResponseRuleAccepted) WithReloadID(reloadID string) *ReplaceHTTPResponseRuleAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Http response rule accepted response
func (o *ReplaceHTTPResponseRuleAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Http response rule accepted response
func (o *ReplaceHTTPResponseRuleAccepted) WithPayload(payload *models.HTTPResponseRule) *ReplaceHTTPResponseRuleAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule accepted response
func (o *ReplaceHTTPResponseRuleAccepted) SetPayload(payload *models.HTTPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPResponseRuleBadRequestCode is the HTTP code returned for type ReplaceHTTPResponseRuleBadRequest
const ReplaceHTTPResponseRuleBadRequestCode int = 400

/*
ReplaceHTTPResponseRuleBadRequest Bad request

swagger:response replaceHttpResponseRuleBadRequest
*/
type ReplaceHTTPResponseRuleBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleBadRequest creates ReplaceHTTPResponseRuleBadRequest with default headers values
func NewReplaceHTTPResponseRuleBadRequest() *ReplaceHTTPResponseRuleBadRequest {

	return &ReplaceHTTPResponseRuleBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http response rule bad request response
func (o *ReplaceHTTPResponseRuleBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRuleBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http response rule bad request response
func (o *ReplaceHTTPResponseRuleBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http response rule bad request response
func (o *ReplaceHTTPResponseRuleBadRequest) WithPayload(payload *models.Error) *ReplaceHTTPResponseRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule bad request response
func (o *ReplaceHTTPResponseRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPResponseRuleNotFoundCode is the HTTP code returned for type ReplaceHTTPResponseRuleNotFound
const ReplaceHTTPResponseRuleNotFoundCode int = 404

/*
ReplaceHTTPResponseRuleNotFound The specified resource was not found

swagger:response replaceHttpResponseRuleNotFound
*/
type ReplaceHTTPResponseRuleNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleNotFound creates ReplaceHTTPResponseRuleNotFound with default headers values
func NewReplaceHTTPResponseRuleNotFound() *ReplaceHTTPResponseRuleNotFound {

	return &ReplaceHTTPResponseRuleNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http response rule not found response
func (o *ReplaceHTTPResponseRuleNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRuleNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http response rule not found response
func (o *ReplaceHTTPResponseRuleNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http response rule not found response
func (o *ReplaceHTTPResponseRuleNotFound) WithPayload(payload *models.Error) *ReplaceHTTPResponseRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule not found response
func (o *ReplaceHTTPResponseRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceHTTPResponseRuleDefault General Error

swagger:response replaceHttpResponseRuleDefault
*/
type ReplaceHTTPResponseRuleDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleDefault creates ReplaceHTTPResponseRuleDefault with default headers values
func NewReplaceHTTPResponseRuleDefault(code int) *ReplaceHTTPResponseRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceHTTPResponseRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) WithStatusCode(code int) *ReplaceHTTPResponseRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRuleDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) WithPayload(payload *models.Error) *ReplaceHTTPResponseRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
