// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/haproxytech/dataplaneapi/operations/acl"
	"github.com/haproxytech/dataplaneapi/operations/acl_runtime"
	"github.com/haproxytech/dataplaneapi/operations/backend"
	"github.com/haproxytech/dataplaneapi/operations/backend_switching_rule"
	"github.com/haproxytech/dataplaneapi/operations/bind"
	"github.com/haproxytech/dataplaneapi/operations/cache"
	"github.com/haproxytech/dataplaneapi/operations/cluster"
	"github.com/haproxytech/dataplaneapi/operations/configuration"
	"github.com/haproxytech/dataplaneapi/operations/declare_capture"
	"github.com/haproxytech/dataplaneapi/operations/defaults"
	"github.com/haproxytech/dataplaneapi/operations/dgram_bind"
	"github.com/haproxytech/dataplaneapi/operations/discovery"
	"github.com/haproxytech/dataplaneapi/operations/fcgi_app"
	"github.com/haproxytech/dataplaneapi/operations/filter"
	"github.com/haproxytech/dataplaneapi/operations/frontend"
	"github.com/haproxytech/dataplaneapi/operations/global"
	"github.com/haproxytech/dataplaneapi/operations/group"
	"github.com/haproxytech/dataplaneapi/operations/health"
	"github.com/haproxytech/dataplaneapi/operations/http_after_response_rule"
	"github.com/haproxytech/dataplaneapi/operations/http_check"
	"github.com/haproxytech/dataplaneapi/operations/http_error_rule"
	"github.com/haproxytech/dataplaneapi/operations/http_errors"
	"github.com/haproxytech/dataplaneapi/operations/http_request_rule"
	"github.com/haproxytech/dataplaneapi/operations/http_response_rule"
	"github.com/haproxytech/dataplaneapi/operations/information"
	"github.com/haproxytech/dataplaneapi/operations/log_forward"
	"github.com/haproxytech/dataplaneapi/operations/log_target"
	"github.com/haproxytech/dataplaneapi/operations/mailer_entry"
	"github.com/haproxytech/dataplaneapi/operations/mailers"
	"github.com/haproxytech/dataplaneapi/operations/maps"
	"github.com/haproxytech/dataplaneapi/operations/nameserver"
	"github.com/haproxytech/dataplaneapi/operations/peer"
	"github.com/haproxytech/dataplaneapi/operations/peer_entry"
	"github.com/haproxytech/dataplaneapi/operations/process_manager"
	"github.com/haproxytech/dataplaneapi/operations/reloads"
	"github.com/haproxytech/dataplaneapi/operations/resolver"
	"github.com/haproxytech/dataplaneapi/operations/ring"
	serverops "github.com/haproxytech/dataplaneapi/operations/server"
	"github.com/haproxytech/dataplaneapi/operations/server_switching_rule"
	"github.com/haproxytech/dataplaneapi/operations/server_template"
	"github.com/haproxytech/dataplaneapi/operations/service_discovery"
	"github.com/haproxytech/dataplaneapi/operations/sites"
	"github.com/haproxytech/dataplaneapi/operations/specification"
	"github.com/haproxytech/dataplaneapi/operations/spoe"
	"github.com/haproxytech/dataplaneapi/operations/spoe_transactions"
	"github.com/haproxytech/dataplaneapi/operations/stats"
	"github.com/haproxytech/dataplaneapi/operations/stick_rule"
	"github.com/haproxytech/dataplaneapi/operations/stick_table"
	"github.com/haproxytech/dataplaneapi/operations/storage"
	"github.com/haproxytech/dataplaneapi/operations/table"
	"github.com/haproxytech/dataplaneapi/operations/tcp_check"
	"github.com/haproxytech/dataplaneapi/operations/tcp_request_rule"
	"github.com/haproxytech/dataplaneapi/operations/tcp_response_rule"
	"github.com/haproxytech/dataplaneapi/operations/transactions"
	"github.com/haproxytech/dataplaneapi/operations/user"
	"github.com/haproxytech/dataplaneapi/operations/userlist"
	"github.com/haproxytech/dataplaneapi/operations/version3"
)

// NewDataPlaneAPI creates a new DataPlane instance
func NewDataPlaneAPI(spec *loads.Document) *DataPlaneAPI {
	return &DataPlaneAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		TxtConsumer:           runtime.TextConsumer(),

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		ACLRuntimeDeleteServicesHaproxyRuntimeACLFileEntriesIDHandler: acl_runtime.DeleteServicesHaproxyRuntimeACLFileEntriesIDHandlerFunc(func(params acl_runtime.DeleteServicesHaproxyRuntimeACLFileEntriesIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.DeleteServicesHaproxyRuntimeACLFileEntriesID has not yet been implemented")
		}),
		ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesHandler: acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesHandlerFunc(func(params acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.GetServicesHaproxyRuntimeACLFileEntries has not yet been implemented")
		}),
		ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesIDHandler: acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesIDHandlerFunc(func(params acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesID has not yet been implemented")
		}),
		ACLRuntimeGetServicesHaproxyRuntimeAclsHandler: acl_runtime.GetServicesHaproxyRuntimeAclsHandlerFunc(func(params acl_runtime.GetServicesHaproxyRuntimeAclsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.GetServicesHaproxyRuntimeAcls has not yet been implemented")
		}),
		ACLRuntimeGetServicesHaproxyRuntimeAclsIDHandler: acl_runtime.GetServicesHaproxyRuntimeAclsIDHandlerFunc(func(params acl_runtime.GetServicesHaproxyRuntimeAclsIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.GetServicesHaproxyRuntimeAclsID has not yet been implemented")
		}),
		ACLRuntimePostServicesHaproxyRuntimeACLFileEntriesHandler: acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesHandlerFunc(func(params acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.PostServicesHaproxyRuntimeACLFileEntries has not yet been implemented")
		}),
		MapsAddMapEntryHandler: maps.AddMapEntryHandlerFunc(func(params maps.AddMapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.AddMapEntry has not yet been implemented")
		}),
		ACLRuntimeAddPayloadRuntimeACLHandler: acl_runtime.AddPayloadRuntimeACLHandlerFunc(func(params acl_runtime.AddPayloadRuntimeACLParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl_runtime.AddPayloadRuntimeACL has not yet been implemented")
		}),
		MapsAddPayloadRuntimeMapHandler: maps.AddPayloadRuntimeMapHandlerFunc(func(params maps.AddPayloadRuntimeMapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.AddPayloadRuntimeMap has not yet been implemented")
		}),
		ServerAddRuntimeServerHandler: serverops.AddRuntimeServerHandlerFunc(func(params serverops.AddRuntimeServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.AddRuntimeServer has not yet been implemented")
		}),
		MapsClearRuntimeMapHandler: maps.ClearRuntimeMapHandlerFunc(func(params maps.ClearRuntimeMapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.ClearRuntimeMap has not yet been implemented")
		}),
		SpoeTransactionsCommitSpoeTransactionHandler: spoe_transactions.CommitSpoeTransactionHandlerFunc(func(params spoe_transactions.CommitSpoeTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe_transactions.CommitSpoeTransaction has not yet been implemented")
		}),
		TransactionsCommitTransactionHandler: transactions.CommitTransactionHandlerFunc(func(params transactions.CommitTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation transactions.CommitTransaction has not yet been implemented")
		}),
		ServiceDiscoveryCreateAWSRegionHandler: service_discovery.CreateAWSRegionHandlerFunc(func(params service_discovery.CreateAWSRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.CreateAWSRegion has not yet been implemented")
		}),
		ACLCreateACLHandler: acl.CreateACLHandlerFunc(func(params acl.CreateACLParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl.CreateACL has not yet been implemented")
		}),
		BackendCreateBackendHandler: backend.CreateBackendHandlerFunc(func(params backend.CreateBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend.CreateBackend has not yet been implemented")
		}),
		BackendSwitchingRuleCreateBackendSwitchingRuleHandler: backend_switching_rule.CreateBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.CreateBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend_switching_rule.CreateBackendSwitchingRule has not yet been implemented")
		}),
		BindCreateBindHandler: bind.CreateBindHandlerFunc(func(params bind.CreateBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation bind.CreateBind has not yet been implemented")
		}),
		CacheCreateCacheHandler: cache.CreateCacheHandlerFunc(func(params cache.CreateCacheParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cache.CreateCache has not yet been implemented")
		}),
		ServiceDiscoveryCreateConsulHandler: service_discovery.CreateConsulHandlerFunc(func(params service_discovery.CreateConsulParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.CreateConsul has not yet been implemented")
		}),
		DeclareCaptureCreateDeclareCaptureHandler: declare_capture.CreateDeclareCaptureHandlerFunc(func(params declare_capture.CreateDeclareCaptureParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation declare_capture.CreateDeclareCapture has not yet been implemented")
		}),
		DefaultsCreateDefaultsSectionHandler: defaults.CreateDefaultsSectionHandlerFunc(func(params defaults.CreateDefaultsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.CreateDefaultsSection has not yet been implemented")
		}),
		DgramBindCreateDgramBindHandler: dgram_bind.CreateDgramBindHandlerFunc(func(params dgram_bind.CreateDgramBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation dgram_bind.CreateDgramBind has not yet been implemented")
		}),
		FCGIAppCreateFCGIAppHandler: fcgi_app.CreateFCGIAppHandlerFunc(func(params fcgi_app.CreateFCGIAppParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation fcgi_app.CreateFCGIApp has not yet been implemented")
		}),
		FilterCreateFilterHandler: filter.CreateFilterHandlerFunc(func(params filter.CreateFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation filter.CreateFilter has not yet been implemented")
		}),
		FrontendCreateFrontendHandler: frontend.CreateFrontendHandlerFunc(func(params frontend.CreateFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation frontend.CreateFrontend has not yet been implemented")
		}),
		GroupCreateGroupHandler: group.CreateGroupHandlerFunc(func(params group.CreateGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation group.CreateGroup has not yet been implemented")
		}),
		HTTPAfterResponseRuleCreateHTTPAfterResponseRuleHandler: http_after_response_rule.CreateHTTPAfterResponseRuleHandlerFunc(func(params http_after_response_rule.CreateHTTPAfterResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_after_response_rule.CreateHTTPAfterResponseRule has not yet been implemented")
		}),
		HTTPCheckCreateHTTPCheckHandler: http_check.CreateHTTPCheckHandlerFunc(func(params http_check.CreateHTTPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_check.CreateHTTPCheck has not yet been implemented")
		}),
		HTTPErrorRuleCreateHTTPErrorRuleHandler: http_error_rule.CreateHTTPErrorRuleHandlerFunc(func(params http_error_rule.CreateHTTPErrorRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_error_rule.CreateHTTPErrorRule has not yet been implemented")
		}),
		HTTPErrorsCreateHTTPErrorsSectionHandler: http_errors.CreateHTTPErrorsSectionHandlerFunc(func(params http_errors.CreateHTTPErrorsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_errors.CreateHTTPErrorsSection has not yet been implemented")
		}),
		HTTPRequestRuleCreateHTTPRequestRuleHandler: http_request_rule.CreateHTTPRequestRuleHandlerFunc(func(params http_request_rule.CreateHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_request_rule.CreateHTTPRequestRule has not yet been implemented")
		}),
		HTTPResponseRuleCreateHTTPResponseRuleHandler: http_response_rule.CreateHTTPResponseRuleHandlerFunc(func(params http_response_rule.CreateHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_response_rule.CreateHTTPResponseRule has not yet been implemented")
		}),
		LogForwardCreateLogForwardHandler: log_forward.CreateLogForwardHandlerFunc(func(params log_forward.CreateLogForwardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_forward.CreateLogForward has not yet been implemented")
		}),
		LogTargetCreateLogTargetHandler: log_target.CreateLogTargetHandlerFunc(func(params log_target.CreateLogTargetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_target.CreateLogTarget has not yet been implemented")
		}),
		MailerEntryCreateMailerEntryHandler: mailer_entry.CreateMailerEntryHandlerFunc(func(params mailer_entry.CreateMailerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailer_entry.CreateMailerEntry has not yet been implemented")
		}),
		MailersCreateMailersSectionHandler: mailers.CreateMailersSectionHandlerFunc(func(params mailers.CreateMailersSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailers.CreateMailersSection has not yet been implemented")
		}),
		NameserverCreateNameserverHandler: nameserver.CreateNameserverHandlerFunc(func(params nameserver.CreateNameserverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation nameserver.CreateNameserver has not yet been implemented")
		}),
		PeerCreatePeerHandler: peer.CreatePeerHandlerFunc(func(params peer.CreatePeerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer.CreatePeer has not yet been implemented")
		}),
		PeerEntryCreatePeerEntryHandler: peer_entry.CreatePeerEntryHandlerFunc(func(params peer_entry.CreatePeerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer_entry.CreatePeerEntry has not yet been implemented")
		}),
		ProcessManagerCreateProgramHandler: process_manager.CreateProgramHandlerFunc(func(params process_manager.CreateProgramParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation process_manager.CreateProgram has not yet been implemented")
		}),
		ResolverCreateResolverHandler: resolver.CreateResolverHandlerFunc(func(params resolver.CreateResolverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resolver.CreateResolver has not yet been implemented")
		}),
		RingCreateRingHandler: ring.CreateRingHandlerFunc(func(params ring.CreateRingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ring.CreateRing has not yet been implemented")
		}),
		ServerCreateServerHandler: serverops.CreateServerHandlerFunc(func(params serverops.CreateServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.CreateServer has not yet been implemented")
		}),
		ServerSwitchingRuleCreateServerSwitchingRuleHandler: server_switching_rule.CreateServerSwitchingRuleHandlerFunc(func(params server_switching_rule.CreateServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_switching_rule.CreateServerSwitchingRule has not yet been implemented")
		}),
		ServerTemplateCreateServerTemplateHandler: server_template.CreateServerTemplateHandlerFunc(func(params server_template.CreateServerTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_template.CreateServerTemplate has not yet been implemented")
		}),
		SitesCreateSiteHandler: sites.CreateSiteHandlerFunc(func(params sites.CreateSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sites.CreateSite has not yet been implemented")
		}),
		SpoeCreateSpoeHandler: spoe.CreateSpoeHandlerFunc(func(params spoe.CreateSpoeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.CreateSpoe has not yet been implemented")
		}),
		SpoeCreateSpoeAgentHandler: spoe.CreateSpoeAgentHandlerFunc(func(params spoe.CreateSpoeAgentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.CreateSpoeAgent has not yet been implemented")
		}),
		SpoeCreateSpoeGroupHandler: spoe.CreateSpoeGroupHandlerFunc(func(params spoe.CreateSpoeGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.CreateSpoeGroup has not yet been implemented")
		}),
		SpoeCreateSpoeMessageHandler: spoe.CreateSpoeMessageHandlerFunc(func(params spoe.CreateSpoeMessageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.CreateSpoeMessage has not yet been implemented")
		}),
		SpoeCreateSpoeScopeHandler: spoe.CreateSpoeScopeHandlerFunc(func(params spoe.CreateSpoeScopeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.CreateSpoeScope has not yet been implemented")
		}),
		StickRuleCreateStickRuleHandler: stick_rule.CreateStickRuleHandlerFunc(func(params stick_rule.CreateStickRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_rule.CreateStickRule has not yet been implemented")
		}),
		StorageCreateStorageGeneralFileHandler: storage.CreateStorageGeneralFileHandlerFunc(func(params storage.CreateStorageGeneralFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.CreateStorageGeneralFile has not yet been implemented")
		}),
		StorageCreateStorageMapFileHandler: storage.CreateStorageMapFileHandlerFunc(func(params storage.CreateStorageMapFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.CreateStorageMapFile has not yet been implemented")
		}),
		StorageCreateStorageSSLCertificateHandler: storage.CreateStorageSSLCertificateHandlerFunc(func(params storage.CreateStorageSSLCertificateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.CreateStorageSSLCertificate has not yet been implemented")
		}),
		TCPCheckCreateTCPCheckHandler: tcp_check.CreateTCPCheckHandlerFunc(func(params tcp_check.CreateTCPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_check.CreateTCPCheck has not yet been implemented")
		}),
		TCPRequestRuleCreateTCPRequestRuleHandler: tcp_request_rule.CreateTCPRequestRuleHandlerFunc(func(params tcp_request_rule.CreateTCPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_request_rule.CreateTCPRequestRule has not yet been implemented")
		}),
		TCPResponseRuleCreateTCPResponseRuleHandler: tcp_response_rule.CreateTCPResponseRuleHandlerFunc(func(params tcp_response_rule.CreateTCPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_response_rule.CreateTCPResponseRule has not yet been implemented")
		}),
		TableCreateTableHandler: table.CreateTableHandlerFunc(func(params table.CreateTableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation table.CreateTable has not yet been implemented")
		}),
		UserCreateUserHandler: user.CreateUserHandlerFunc(func(params user.CreateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateUser has not yet been implemented")
		}),
		UserlistCreateUserlistHandler: userlist.CreateUserlistHandlerFunc(func(params userlist.CreateUserlistParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation userlist.CreateUserlist has not yet been implemented")
		}),
		ServiceDiscoveryDeleteAWSRegionHandler: service_discovery.DeleteAWSRegionHandlerFunc(func(params service_discovery.DeleteAWSRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.DeleteAWSRegion has not yet been implemented")
		}),
		ACLDeleteACLHandler: acl.DeleteACLHandlerFunc(func(params acl.DeleteACLParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl.DeleteACL has not yet been implemented")
		}),
		BackendDeleteBackendHandler: backend.DeleteBackendHandlerFunc(func(params backend.DeleteBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend.DeleteBackend has not yet been implemented")
		}),
		BackendSwitchingRuleDeleteBackendSwitchingRuleHandler: backend_switching_rule.DeleteBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.DeleteBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend_switching_rule.DeleteBackendSwitchingRule has not yet been implemented")
		}),
		BindDeleteBindHandler: bind.DeleteBindHandlerFunc(func(params bind.DeleteBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation bind.DeleteBind has not yet been implemented")
		}),
		CacheDeleteCacheHandler: cache.DeleteCacheHandlerFunc(func(params cache.DeleteCacheParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cache.DeleteCache has not yet been implemented")
		}),
		ClusterDeleteClusterHandler: cluster.DeleteClusterHandlerFunc(func(params cluster.DeleteClusterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster.DeleteCluster has not yet been implemented")
		}),
		ServiceDiscoveryDeleteConsulHandler: service_discovery.DeleteConsulHandlerFunc(func(params service_discovery.DeleteConsulParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.DeleteConsul has not yet been implemented")
		}),
		DeclareCaptureDeleteDeclareCaptureHandler: declare_capture.DeleteDeclareCaptureHandlerFunc(func(params declare_capture.DeleteDeclareCaptureParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation declare_capture.DeleteDeclareCapture has not yet been implemented")
		}),
		DefaultsDeleteDefaultsSectionHandler: defaults.DeleteDefaultsSectionHandlerFunc(func(params defaults.DeleteDefaultsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.DeleteDefaultsSection has not yet been implemented")
		}),
		DgramBindDeleteDgramBindHandler: dgram_bind.DeleteDgramBindHandlerFunc(func(params dgram_bind.DeleteDgramBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation dgram_bind.DeleteDgramBind has not yet been implemented")
		}),
		FCGIAppDeleteFCGIAppHandler: fcgi_app.DeleteFCGIAppHandlerFunc(func(params fcgi_app.DeleteFCGIAppParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation fcgi_app.DeleteFCGIApp has not yet been implemented")
		}),
		FilterDeleteFilterHandler: filter.DeleteFilterHandlerFunc(func(params filter.DeleteFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation filter.DeleteFilter has not yet been implemented")
		}),
		FrontendDeleteFrontendHandler: frontend.DeleteFrontendHandlerFunc(func(params frontend.DeleteFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation frontend.DeleteFrontend has not yet been implemented")
		}),
		GroupDeleteGroupHandler: group.DeleteGroupHandlerFunc(func(params group.DeleteGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation group.DeleteGroup has not yet been implemented")
		}),
		HTTPAfterResponseRuleDeleteHTTPAfterResponseRuleHandler: http_after_response_rule.DeleteHTTPAfterResponseRuleHandlerFunc(func(params http_after_response_rule.DeleteHTTPAfterResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_after_response_rule.DeleteHTTPAfterResponseRule has not yet been implemented")
		}),
		HTTPCheckDeleteHTTPCheckHandler: http_check.DeleteHTTPCheckHandlerFunc(func(params http_check.DeleteHTTPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_check.DeleteHTTPCheck has not yet been implemented")
		}),
		HTTPErrorRuleDeleteHTTPErrorRuleHandler: http_error_rule.DeleteHTTPErrorRuleHandlerFunc(func(params http_error_rule.DeleteHTTPErrorRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_error_rule.DeleteHTTPErrorRule has not yet been implemented")
		}),
		HTTPErrorsDeleteHTTPErrorsSectionHandler: http_errors.DeleteHTTPErrorsSectionHandlerFunc(func(params http_errors.DeleteHTTPErrorsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_errors.DeleteHTTPErrorsSection has not yet been implemented")
		}),
		HTTPRequestRuleDeleteHTTPRequestRuleHandler: http_request_rule.DeleteHTTPRequestRuleHandlerFunc(func(params http_request_rule.DeleteHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_request_rule.DeleteHTTPRequestRule has not yet been implemented")
		}),
		HTTPResponseRuleDeleteHTTPResponseRuleHandler: http_response_rule.DeleteHTTPResponseRuleHandlerFunc(func(params http_response_rule.DeleteHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_response_rule.DeleteHTTPResponseRule has not yet been implemented")
		}),
		LogForwardDeleteLogForwardHandler: log_forward.DeleteLogForwardHandlerFunc(func(params log_forward.DeleteLogForwardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_forward.DeleteLogForward has not yet been implemented")
		}),
		LogTargetDeleteLogTargetHandler: log_target.DeleteLogTargetHandlerFunc(func(params log_target.DeleteLogTargetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_target.DeleteLogTarget has not yet been implemented")
		}),
		MailerEntryDeleteMailerEntryHandler: mailer_entry.DeleteMailerEntryHandlerFunc(func(params mailer_entry.DeleteMailerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailer_entry.DeleteMailerEntry has not yet been implemented")
		}),
		MailersDeleteMailersSectionHandler: mailers.DeleteMailersSectionHandlerFunc(func(params mailers.DeleteMailersSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailers.DeleteMailersSection has not yet been implemented")
		}),
		NameserverDeleteNameserverHandler: nameserver.DeleteNameserverHandlerFunc(func(params nameserver.DeleteNameserverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation nameserver.DeleteNameserver has not yet been implemented")
		}),
		PeerDeletePeerHandler: peer.DeletePeerHandlerFunc(func(params peer.DeletePeerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer.DeletePeer has not yet been implemented")
		}),
		PeerEntryDeletePeerEntryHandler: peer_entry.DeletePeerEntryHandlerFunc(func(params peer_entry.DeletePeerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer_entry.DeletePeerEntry has not yet been implemented")
		}),
		ProcessManagerDeleteProgramHandler: process_manager.DeleteProgramHandlerFunc(func(params process_manager.DeleteProgramParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation process_manager.DeleteProgram has not yet been implemented")
		}),
		ResolverDeleteResolverHandler: resolver.DeleteResolverHandlerFunc(func(params resolver.DeleteResolverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resolver.DeleteResolver has not yet been implemented")
		}),
		RingDeleteRingHandler: ring.DeleteRingHandlerFunc(func(params ring.DeleteRingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ring.DeleteRing has not yet been implemented")
		}),
		MapsDeleteRuntimeMapEntryHandler: maps.DeleteRuntimeMapEntryHandlerFunc(func(params maps.DeleteRuntimeMapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.DeleteRuntimeMapEntry has not yet been implemented")
		}),
		ServerDeleteRuntimeServerHandler: serverops.DeleteRuntimeServerHandlerFunc(func(params serverops.DeleteRuntimeServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.DeleteRuntimeServer has not yet been implemented")
		}),
		ServerDeleteServerHandler: serverops.DeleteServerHandlerFunc(func(params serverops.DeleteServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.DeleteServer has not yet been implemented")
		}),
		ServerSwitchingRuleDeleteServerSwitchingRuleHandler: server_switching_rule.DeleteServerSwitchingRuleHandlerFunc(func(params server_switching_rule.DeleteServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_switching_rule.DeleteServerSwitchingRule has not yet been implemented")
		}),
		ServerTemplateDeleteServerTemplateHandler: server_template.DeleteServerTemplateHandlerFunc(func(params server_template.DeleteServerTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_template.DeleteServerTemplate has not yet been implemented")
		}),
		SitesDeleteSiteHandler: sites.DeleteSiteHandlerFunc(func(params sites.DeleteSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sites.DeleteSite has not yet been implemented")
		}),
		SpoeDeleteSpoeAgentHandler: spoe.DeleteSpoeAgentHandlerFunc(func(params spoe.DeleteSpoeAgentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.DeleteSpoeAgent has not yet been implemented")
		}),
		SpoeDeleteSpoeFileHandler: spoe.DeleteSpoeFileHandlerFunc(func(params spoe.DeleteSpoeFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.DeleteSpoeFile has not yet been implemented")
		}),
		SpoeDeleteSpoeGroupHandler: spoe.DeleteSpoeGroupHandlerFunc(func(params spoe.DeleteSpoeGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.DeleteSpoeGroup has not yet been implemented")
		}),
		SpoeDeleteSpoeMessageHandler: spoe.DeleteSpoeMessageHandlerFunc(func(params spoe.DeleteSpoeMessageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.DeleteSpoeMessage has not yet been implemented")
		}),
		SpoeDeleteSpoeScopeHandler: spoe.DeleteSpoeScopeHandlerFunc(func(params spoe.DeleteSpoeScopeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.DeleteSpoeScope has not yet been implemented")
		}),
		SpoeTransactionsDeleteSpoeTransactionHandler: spoe_transactions.DeleteSpoeTransactionHandlerFunc(func(params spoe_transactions.DeleteSpoeTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe_transactions.DeleteSpoeTransaction has not yet been implemented")
		}),
		StickRuleDeleteStickRuleHandler: stick_rule.DeleteStickRuleHandlerFunc(func(params stick_rule.DeleteStickRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_rule.DeleteStickRule has not yet been implemented")
		}),
		StorageDeleteStorageGeneralFileHandler: storage.DeleteStorageGeneralFileHandlerFunc(func(params storage.DeleteStorageGeneralFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.DeleteStorageGeneralFile has not yet been implemented")
		}),
		StorageDeleteStorageMapHandler: storage.DeleteStorageMapHandlerFunc(func(params storage.DeleteStorageMapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.DeleteStorageMap has not yet been implemented")
		}),
		StorageDeleteStorageSSLCertificateHandler: storage.DeleteStorageSSLCertificateHandlerFunc(func(params storage.DeleteStorageSSLCertificateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.DeleteStorageSSLCertificate has not yet been implemented")
		}),
		TCPCheckDeleteTCPCheckHandler: tcp_check.DeleteTCPCheckHandlerFunc(func(params tcp_check.DeleteTCPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_check.DeleteTCPCheck has not yet been implemented")
		}),
		TCPRequestRuleDeleteTCPRequestRuleHandler: tcp_request_rule.DeleteTCPRequestRuleHandlerFunc(func(params tcp_request_rule.DeleteTCPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_request_rule.DeleteTCPRequestRule has not yet been implemented")
		}),
		TCPResponseRuleDeleteTCPResponseRuleHandler: tcp_response_rule.DeleteTCPResponseRuleHandlerFunc(func(params tcp_response_rule.DeleteTCPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_response_rule.DeleteTCPResponseRule has not yet been implemented")
		}),
		TableDeleteTableHandler: table.DeleteTableHandlerFunc(func(params table.DeleteTableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation table.DeleteTable has not yet been implemented")
		}),
		TransactionsDeleteTransactionHandler: transactions.DeleteTransactionHandlerFunc(func(params transactions.DeleteTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation transactions.DeleteTransaction has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		UserlistDeleteUserlistHandler: userlist.DeleteUserlistHandlerFunc(func(params userlist.DeleteUserlistParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation userlist.DeleteUserlist has not yet been implemented")
		}),
		ClusterEditClusterHandler: cluster.EditClusterHandlerFunc(func(params cluster.EditClusterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster.EditCluster has not yet been implemented")
		}),
		MailersEditMailersSectionHandler: mailers.EditMailersSectionHandlerFunc(func(params mailers.EditMailersSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailers.EditMailersSection has not yet been implemented")
		}),
		DiscoveryGetAPIEndpointsHandler: discovery.GetAPIEndpointsHandlerFunc(func(params discovery.GetAPIEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetAPIEndpoints has not yet been implemented")
		}),
		ServiceDiscoveryGetAWSRegionHandler: service_discovery.GetAWSRegionHandlerFunc(func(params service_discovery.GetAWSRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.GetAWSRegion has not yet been implemented")
		}),
		ServiceDiscoveryGetAWSRegionsHandler: service_discovery.GetAWSRegionsHandlerFunc(func(params service_discovery.GetAWSRegionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.GetAWSRegions has not yet been implemented")
		}),
		ACLGetACLHandler: acl.GetACLHandlerFunc(func(params acl.GetACLParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl.GetACL has not yet been implemented")
		}),
		ACLGetAclsHandler: acl.GetAclsHandlerFunc(func(params acl.GetAclsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl.GetAcls has not yet been implemented")
		}),
		MapsGetAllRuntimeMapFilesHandler: maps.GetAllRuntimeMapFilesHandlerFunc(func(params maps.GetAllRuntimeMapFilesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.GetAllRuntimeMapFiles has not yet been implemented")
		}),
		SpoeGetAllSpoeFilesHandler: spoe.GetAllSpoeFilesHandlerFunc(func(params spoe.GetAllSpoeFilesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetAllSpoeFiles has not yet been implemented")
		}),
		StorageGetAllStorageGeneralFilesHandler: storage.GetAllStorageGeneralFilesHandlerFunc(func(params storage.GetAllStorageGeneralFilesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetAllStorageGeneralFiles has not yet been implemented")
		}),
		StorageGetAllStorageMapFilesHandler: storage.GetAllStorageMapFilesHandlerFunc(func(params storage.GetAllStorageMapFilesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetAllStorageMapFiles has not yet been implemented")
		}),
		StorageGetAllStorageSSLCertificatesHandler: storage.GetAllStorageSSLCertificatesHandlerFunc(func(params storage.GetAllStorageSSLCertificatesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetAllStorageSSLCertificates has not yet been implemented")
		}),
		BackendGetBackendHandler: backend.GetBackendHandlerFunc(func(params backend.GetBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend.GetBackend has not yet been implemented")
		}),
		BackendSwitchingRuleGetBackendSwitchingRuleHandler: backend_switching_rule.GetBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.GetBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend_switching_rule.GetBackendSwitchingRule has not yet been implemented")
		}),
		BackendSwitchingRuleGetBackendSwitchingRulesHandler: backend_switching_rule.GetBackendSwitchingRulesHandlerFunc(func(params backend_switching_rule.GetBackendSwitchingRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend_switching_rule.GetBackendSwitchingRules has not yet been implemented")
		}),
		BackendGetBackendsHandler: backend.GetBackendsHandlerFunc(func(params backend.GetBackendsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend.GetBackends has not yet been implemented")
		}),
		BindGetBindHandler: bind.GetBindHandlerFunc(func(params bind.GetBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation bind.GetBind has not yet been implemented")
		}),
		BindGetBindsHandler: bind.GetBindsHandlerFunc(func(params bind.GetBindsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation bind.GetBinds has not yet been implemented")
		}),
		CacheGetCacheHandler: cache.GetCacheHandlerFunc(func(params cache.GetCacheParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cache.GetCache has not yet been implemented")
		}),
		CacheGetCachesHandler: cache.GetCachesHandlerFunc(func(params cache.GetCachesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cache.GetCaches has not yet been implemented")
		}),
		ClusterGetClusterHandler: cluster.GetClusterHandlerFunc(func(params cluster.GetClusterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster.GetCluster has not yet been implemented")
		}),
		DiscoveryGetConfigurationEndpointsHandler: discovery.GetConfigurationEndpointsHandlerFunc(func(params discovery.GetConfigurationEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetConfigurationEndpoints has not yet been implemented")
		}),
		ConfigurationGetConfigurationVersionHandler: configuration.GetConfigurationVersionHandlerFunc(func(params configuration.GetConfigurationVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation configuration.GetConfigurationVersion has not yet been implemented")
		}),
		ServiceDiscoveryGetConsulHandler: service_discovery.GetConsulHandlerFunc(func(params service_discovery.GetConsulParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.GetConsul has not yet been implemented")
		}),
		ServiceDiscoveryGetConsulsHandler: service_discovery.GetConsulsHandlerFunc(func(params service_discovery.GetConsulsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.GetConsuls has not yet been implemented")
		}),
		DeclareCaptureGetDeclareCaptureHandler: declare_capture.GetDeclareCaptureHandlerFunc(func(params declare_capture.GetDeclareCaptureParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation declare_capture.GetDeclareCapture has not yet been implemented")
		}),
		DeclareCaptureGetDeclareCapturesHandler: declare_capture.GetDeclareCapturesHandlerFunc(func(params declare_capture.GetDeclareCapturesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation declare_capture.GetDeclareCaptures has not yet been implemented")
		}),
		DefaultsGetDefaultsHandler: defaults.GetDefaultsHandlerFunc(func(params defaults.GetDefaultsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.GetDefaults has not yet been implemented")
		}),
		DefaultsGetDefaultsSectionHandler: defaults.GetDefaultsSectionHandlerFunc(func(params defaults.GetDefaultsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.GetDefaultsSection has not yet been implemented")
		}),
		DefaultsGetDefaultsSectionsHandler: defaults.GetDefaultsSectionsHandlerFunc(func(params defaults.GetDefaultsSectionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.GetDefaultsSections has not yet been implemented")
		}),
		DgramBindGetDgramBindHandler: dgram_bind.GetDgramBindHandlerFunc(func(params dgram_bind.GetDgramBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation dgram_bind.GetDgramBind has not yet been implemented")
		}),
		DgramBindGetDgramBindsHandler: dgram_bind.GetDgramBindsHandlerFunc(func(params dgram_bind.GetDgramBindsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation dgram_bind.GetDgramBinds has not yet been implemented")
		}),
		FCGIAppGetFCGIAppHandler: fcgi_app.GetFCGIAppHandlerFunc(func(params fcgi_app.GetFCGIAppParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation fcgi_app.GetFCGIApp has not yet been implemented")
		}),
		FCGIAppGetFCGIAppsHandler: fcgi_app.GetFCGIAppsHandlerFunc(func(params fcgi_app.GetFCGIAppsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation fcgi_app.GetFCGIApps has not yet been implemented")
		}),
		FilterGetFilterHandler: filter.GetFilterHandlerFunc(func(params filter.GetFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation filter.GetFilter has not yet been implemented")
		}),
		FilterGetFiltersHandler: filter.GetFiltersHandlerFunc(func(params filter.GetFiltersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation filter.GetFilters has not yet been implemented")
		}),
		FrontendGetFrontendHandler: frontend.GetFrontendHandlerFunc(func(params frontend.GetFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation frontend.GetFrontend has not yet been implemented")
		}),
		FrontendGetFrontendsHandler: frontend.GetFrontendsHandlerFunc(func(params frontend.GetFrontendsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation frontend.GetFrontends has not yet been implemented")
		}),
		GlobalGetGlobalHandler: global.GetGlobalHandlerFunc(func(params global.GetGlobalParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation global.GetGlobal has not yet been implemented")
		}),
		GroupGetGroupHandler: group.GetGroupHandlerFunc(func(params group.GetGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation group.GetGroup has not yet been implemented")
		}),
		GroupGetGroupsHandler: group.GetGroupsHandlerFunc(func(params group.GetGroupsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation group.GetGroups has not yet been implemented")
		}),
		ConfigurationGetHAProxyConfigurationHandler: configuration.GetHAProxyConfigurationHandlerFunc(func(params configuration.GetHAProxyConfigurationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation configuration.GetHAProxyConfiguration has not yet been implemented")
		}),
		HTTPAfterResponseRuleGetHTTPAfterResponseRuleHandler: http_after_response_rule.GetHTTPAfterResponseRuleHandlerFunc(func(params http_after_response_rule.GetHTTPAfterResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_after_response_rule.GetHTTPAfterResponseRule has not yet been implemented")
		}),
		HTTPAfterResponseRuleGetHTTPAfterResponseRulesHandler: http_after_response_rule.GetHTTPAfterResponseRulesHandlerFunc(func(params http_after_response_rule.GetHTTPAfterResponseRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_after_response_rule.GetHTTPAfterResponseRules has not yet been implemented")
		}),
		HTTPCheckGetHTTPCheckHandler: http_check.GetHTTPCheckHandlerFunc(func(params http_check.GetHTTPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_check.GetHTTPCheck has not yet been implemented")
		}),
		HTTPCheckGetHTTPChecksHandler: http_check.GetHTTPChecksHandlerFunc(func(params http_check.GetHTTPChecksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_check.GetHTTPChecks has not yet been implemented")
		}),
		HTTPErrorRuleGetHTTPErrorRuleHandler: http_error_rule.GetHTTPErrorRuleHandlerFunc(func(params http_error_rule.GetHTTPErrorRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_error_rule.GetHTTPErrorRule has not yet been implemented")
		}),
		HTTPErrorRuleGetHTTPErrorRulesHandler: http_error_rule.GetHTTPErrorRulesHandlerFunc(func(params http_error_rule.GetHTTPErrorRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_error_rule.GetHTTPErrorRules has not yet been implemented")
		}),
		HTTPErrorsGetHTTPErrorsSectionHandler: http_errors.GetHTTPErrorsSectionHandlerFunc(func(params http_errors.GetHTTPErrorsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_errors.GetHTTPErrorsSection has not yet been implemented")
		}),
		HTTPErrorsGetHTTPErrorsSectionsHandler: http_errors.GetHTTPErrorsSectionsHandlerFunc(func(params http_errors.GetHTTPErrorsSectionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_errors.GetHTTPErrorsSections has not yet been implemented")
		}),
		HTTPRequestRuleGetHTTPRequestRuleHandler: http_request_rule.GetHTTPRequestRuleHandlerFunc(func(params http_request_rule.GetHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_request_rule.GetHTTPRequestRule has not yet been implemented")
		}),
		HTTPRequestRuleGetHTTPRequestRulesHandler: http_request_rule.GetHTTPRequestRulesHandlerFunc(func(params http_request_rule.GetHTTPRequestRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_request_rule.GetHTTPRequestRules has not yet been implemented")
		}),
		HTTPResponseRuleGetHTTPResponseRuleHandler: http_response_rule.GetHTTPResponseRuleHandlerFunc(func(params http_response_rule.GetHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_response_rule.GetHTTPResponseRule has not yet been implemented")
		}),
		HTTPResponseRuleGetHTTPResponseRulesHandler: http_response_rule.GetHTTPResponseRulesHandlerFunc(func(params http_response_rule.GetHTTPResponseRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_response_rule.GetHTTPResponseRules has not yet been implemented")
		}),
		DiscoveryGetHaproxyEndpointsHandler: discovery.GetHaproxyEndpointsHandlerFunc(func(params discovery.GetHaproxyEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetHaproxyEndpoints has not yet been implemented")
		}),
		InformationGetHaproxyProcessInfoHandler: information.GetHaproxyProcessInfoHandlerFunc(func(params information.GetHaproxyProcessInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation information.GetHaproxyProcessInfo has not yet been implemented")
		}),
		HealthGetHealthHandler: health.GetHealthHandlerFunc(func(params health.GetHealthParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation health.GetHealth has not yet been implemented")
		}),
		InformationGetInfoHandler: information.GetInfoHandlerFunc(func(params information.GetInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation information.GetInfo has not yet been implemented")
		}),
		LogForwardGetLogForwardHandler: log_forward.GetLogForwardHandlerFunc(func(params log_forward.GetLogForwardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_forward.GetLogForward has not yet been implemented")
		}),
		LogForwardGetLogForwardsHandler: log_forward.GetLogForwardsHandlerFunc(func(params log_forward.GetLogForwardsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_forward.GetLogForwards has not yet been implemented")
		}),
		LogTargetGetLogTargetHandler: log_target.GetLogTargetHandlerFunc(func(params log_target.GetLogTargetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_target.GetLogTarget has not yet been implemented")
		}),
		LogTargetGetLogTargetsHandler: log_target.GetLogTargetsHandlerFunc(func(params log_target.GetLogTargetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_target.GetLogTargets has not yet been implemented")
		}),
		MailerEntryGetMailerEntriesHandler: mailer_entry.GetMailerEntriesHandlerFunc(func(params mailer_entry.GetMailerEntriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailer_entry.GetMailerEntries has not yet been implemented")
		}),
		MailerEntryGetMailerEntryHandler: mailer_entry.GetMailerEntryHandlerFunc(func(params mailer_entry.GetMailerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailer_entry.GetMailerEntry has not yet been implemented")
		}),
		MailersGetMailersSectionHandler: mailers.GetMailersSectionHandlerFunc(func(params mailers.GetMailersSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailers.GetMailersSection has not yet been implemented")
		}),
		MailersGetMailersSectionsHandler: mailers.GetMailersSectionsHandlerFunc(func(params mailers.GetMailersSectionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailers.GetMailersSections has not yet been implemented")
		}),
		NameserverGetNameserverHandler: nameserver.GetNameserverHandlerFunc(func(params nameserver.GetNameserverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation nameserver.GetNameserver has not yet been implemented")
		}),
		NameserverGetNameserversHandler: nameserver.GetNameserversHandlerFunc(func(params nameserver.GetNameserversParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation nameserver.GetNameservers has not yet been implemented")
		}),
		MapsGetOneRuntimeMapHandler: maps.GetOneRuntimeMapHandlerFunc(func(params maps.GetOneRuntimeMapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.GetOneRuntimeMap has not yet been implemented")
		}),
		SpoeGetOneSpoeFileHandler: spoe.GetOneSpoeFileHandlerFunc(func(params spoe.GetOneSpoeFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetOneSpoeFile has not yet been implemented")
		}),
		StorageGetOneStorageGeneralFileHandler: storage.GetOneStorageGeneralFileHandlerFunc(func(params storage.GetOneStorageGeneralFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetOneStorageGeneralFile has not yet been implemented")
		}),
		StorageGetOneStorageMapHandler: storage.GetOneStorageMapHandlerFunc(func(params storage.GetOneStorageMapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetOneStorageMap has not yet been implemented")
		}),
		StorageGetOneStorageSSLCertificateHandler: storage.GetOneStorageSSLCertificateHandlerFunc(func(params storage.GetOneStorageSSLCertificateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetOneStorageSSLCertificate has not yet been implemented")
		}),
		Version3GetOpenapiv3SpecificationHandler: version3.GetOpenapiv3SpecificationHandlerFunc(func(params version3.GetOpenapiv3SpecificationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation version3.GetOpenapiv3Specification has not yet been implemented")
		}),
		PeerEntryGetPeerEntriesHandler: peer_entry.GetPeerEntriesHandlerFunc(func(params peer_entry.GetPeerEntriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer_entry.GetPeerEntries has not yet been implemented")
		}),
		PeerEntryGetPeerEntryHandler: peer_entry.GetPeerEntryHandlerFunc(func(params peer_entry.GetPeerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer_entry.GetPeerEntry has not yet been implemented")
		}),
		PeerGetPeerSectionHandler: peer.GetPeerSectionHandlerFunc(func(params peer.GetPeerSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer.GetPeerSection has not yet been implemented")
		}),
		PeerGetPeerSectionsHandler: peer.GetPeerSectionsHandlerFunc(func(params peer.GetPeerSectionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer.GetPeerSections has not yet been implemented")
		}),
		ProcessManagerGetProgramHandler: process_manager.GetProgramHandlerFunc(func(params process_manager.GetProgramParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation process_manager.GetProgram has not yet been implemented")
		}),
		ProcessManagerGetProgramsHandler: process_manager.GetProgramsHandlerFunc(func(params process_manager.GetProgramsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation process_manager.GetPrograms has not yet been implemented")
		}),
		ReloadsGetReloadHandler: reloads.GetReloadHandlerFunc(func(params reloads.GetReloadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reloads.GetReload has not yet been implemented")
		}),
		ReloadsGetReloadsHandler: reloads.GetReloadsHandlerFunc(func(params reloads.GetReloadsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reloads.GetReloads has not yet been implemented")
		}),
		ResolverGetResolverHandler: resolver.GetResolverHandlerFunc(func(params resolver.GetResolverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resolver.GetResolver has not yet been implemented")
		}),
		ResolverGetResolversHandler: resolver.GetResolversHandlerFunc(func(params resolver.GetResolversParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resolver.GetResolvers has not yet been implemented")
		}),
		RingGetRingHandler: ring.GetRingHandlerFunc(func(params ring.GetRingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ring.GetRing has not yet been implemented")
		}),
		RingGetRingsHandler: ring.GetRingsHandlerFunc(func(params ring.GetRingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ring.GetRings has not yet been implemented")
		}),
		DiscoveryGetRuntimeEndpointsHandler: discovery.GetRuntimeEndpointsHandlerFunc(func(params discovery.GetRuntimeEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetRuntimeEndpoints has not yet been implemented")
		}),
		MapsGetRuntimeMapEntryHandler: maps.GetRuntimeMapEntryHandlerFunc(func(params maps.GetRuntimeMapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.GetRuntimeMapEntry has not yet been implemented")
		}),
		ServerGetRuntimeServerHandler: serverops.GetRuntimeServerHandlerFunc(func(params serverops.GetRuntimeServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.GetRuntimeServer has not yet been implemented")
		}),
		ServerGetRuntimeServersHandler: serverops.GetRuntimeServersHandlerFunc(func(params serverops.GetRuntimeServersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.GetRuntimeServers has not yet been implemented")
		}),
		ServerGetServerHandler: serverops.GetServerHandlerFunc(func(params serverops.GetServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.GetServer has not yet been implemented")
		}),
		ServerSwitchingRuleGetServerSwitchingRuleHandler: server_switching_rule.GetServerSwitchingRuleHandlerFunc(func(params server_switching_rule.GetServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_switching_rule.GetServerSwitchingRule has not yet been implemented")
		}),
		ServerSwitchingRuleGetServerSwitchingRulesHandler: server_switching_rule.GetServerSwitchingRulesHandlerFunc(func(params server_switching_rule.GetServerSwitchingRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_switching_rule.GetServerSwitchingRules has not yet been implemented")
		}),
		ServerTemplateGetServerTemplateHandler: server_template.GetServerTemplateHandlerFunc(func(params server_template.GetServerTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_template.GetServerTemplate has not yet been implemented")
		}),
		ServerTemplateGetServerTemplatesHandler: server_template.GetServerTemplatesHandlerFunc(func(params server_template.GetServerTemplatesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_template.GetServerTemplates has not yet been implemented")
		}),
		ServerGetServersHandler: serverops.GetServersHandlerFunc(func(params serverops.GetServersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.GetServers has not yet been implemented")
		}),
		DiscoveryGetServicesEndpointsHandler: discovery.GetServicesEndpointsHandlerFunc(func(params discovery.GetServicesEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetServicesEndpoints has not yet been implemented")
		}),
		SitesGetSiteHandler: sites.GetSiteHandlerFunc(func(params sites.GetSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sites.GetSite has not yet been implemented")
		}),
		SitesGetSitesHandler: sites.GetSitesHandlerFunc(func(params sites.GetSitesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sites.GetSites has not yet been implemented")
		}),
		SpecificationGetSpecificationHandler: specification.GetSpecificationHandlerFunc(func(params specification.GetSpecificationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation specification.GetSpecification has not yet been implemented")
		}),
		SpoeGetSpoeAgentHandler: spoe.GetSpoeAgentHandlerFunc(func(params spoe.GetSpoeAgentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeAgent has not yet been implemented")
		}),
		SpoeGetSpoeAgentsHandler: spoe.GetSpoeAgentsHandlerFunc(func(params spoe.GetSpoeAgentsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeAgents has not yet been implemented")
		}),
		SpoeGetSpoeConfigurationVersionHandler: spoe.GetSpoeConfigurationVersionHandlerFunc(func(params spoe.GetSpoeConfigurationVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeConfigurationVersion has not yet been implemented")
		}),
		DiscoveryGetSpoeEndpointsHandler: discovery.GetSpoeEndpointsHandlerFunc(func(params discovery.GetSpoeEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetSpoeEndpoints has not yet been implemented")
		}),
		SpoeGetSpoeGroupHandler: spoe.GetSpoeGroupHandlerFunc(func(params spoe.GetSpoeGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeGroup has not yet been implemented")
		}),
		SpoeGetSpoeGroupsHandler: spoe.GetSpoeGroupsHandlerFunc(func(params spoe.GetSpoeGroupsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeGroups has not yet been implemented")
		}),
		SpoeGetSpoeMessageHandler: spoe.GetSpoeMessageHandlerFunc(func(params spoe.GetSpoeMessageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeMessage has not yet been implemented")
		}),
		SpoeGetSpoeMessagesHandler: spoe.GetSpoeMessagesHandlerFunc(func(params spoe.GetSpoeMessagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeMessages has not yet been implemented")
		}),
		SpoeGetSpoeScopeHandler: spoe.GetSpoeScopeHandlerFunc(func(params spoe.GetSpoeScopeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeScope has not yet been implemented")
		}),
		SpoeGetSpoeScopesHandler: spoe.GetSpoeScopesHandlerFunc(func(params spoe.GetSpoeScopesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.GetSpoeScopes has not yet been implemented")
		}),
		SpoeTransactionsGetSpoeTransactionHandler: spoe_transactions.GetSpoeTransactionHandlerFunc(func(params spoe_transactions.GetSpoeTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe_transactions.GetSpoeTransaction has not yet been implemented")
		}),
		SpoeTransactionsGetSpoeTransactionsHandler: spoe_transactions.GetSpoeTransactionsHandlerFunc(func(params spoe_transactions.GetSpoeTransactionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe_transactions.GetSpoeTransactions has not yet been implemented")
		}),
		StatsGetStatsHandler: stats.GetStatsHandlerFunc(func(params stats.GetStatsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stats.GetStats has not yet been implemented")
		}),
		DiscoveryGetStatsEndpointsHandler: discovery.GetStatsEndpointsHandlerFunc(func(params discovery.GetStatsEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetStatsEndpoints has not yet been implemented")
		}),
		StickRuleGetStickRuleHandler: stick_rule.GetStickRuleHandlerFunc(func(params stick_rule.GetStickRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_rule.GetStickRule has not yet been implemented")
		}),
		StickRuleGetStickRulesHandler: stick_rule.GetStickRulesHandlerFunc(func(params stick_rule.GetStickRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_rule.GetStickRules has not yet been implemented")
		}),
		StickTableGetStickTableHandler: stick_table.GetStickTableHandlerFunc(func(params stick_table.GetStickTableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_table.GetStickTable has not yet been implemented")
		}),
		StickTableGetStickTableEntriesHandler: stick_table.GetStickTableEntriesHandlerFunc(func(params stick_table.GetStickTableEntriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_table.GetStickTableEntries has not yet been implemented")
		}),
		StickTableGetStickTablesHandler: stick_table.GetStickTablesHandlerFunc(func(params stick_table.GetStickTablesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_table.GetStickTables has not yet been implemented")
		}),
		DiscoveryGetStorageEndpointsHandler: discovery.GetStorageEndpointsHandlerFunc(func(params discovery.GetStorageEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetStorageEndpoints has not yet been implemented")
		}),
		TCPCheckGetTCPCheckHandler: tcp_check.GetTCPCheckHandlerFunc(func(params tcp_check.GetTCPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_check.GetTCPCheck has not yet been implemented")
		}),
		TCPCheckGetTCPChecksHandler: tcp_check.GetTCPChecksHandlerFunc(func(params tcp_check.GetTCPChecksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_check.GetTCPChecks has not yet been implemented")
		}),
		TCPRequestRuleGetTCPRequestRuleHandler: tcp_request_rule.GetTCPRequestRuleHandlerFunc(func(params tcp_request_rule.GetTCPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_request_rule.GetTCPRequestRule has not yet been implemented")
		}),
		TCPRequestRuleGetTCPRequestRulesHandler: tcp_request_rule.GetTCPRequestRulesHandlerFunc(func(params tcp_request_rule.GetTCPRequestRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_request_rule.GetTCPRequestRules has not yet been implemented")
		}),
		TCPResponseRuleGetTCPResponseRuleHandler: tcp_response_rule.GetTCPResponseRuleHandlerFunc(func(params tcp_response_rule.GetTCPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_response_rule.GetTCPResponseRule has not yet been implemented")
		}),
		TCPResponseRuleGetTCPResponseRulesHandler: tcp_response_rule.GetTCPResponseRulesHandlerFunc(func(params tcp_response_rule.GetTCPResponseRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_response_rule.GetTCPResponseRules has not yet been implemented")
		}),
		TableGetTableHandler: table.GetTableHandlerFunc(func(params table.GetTableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation table.GetTable has not yet been implemented")
		}),
		TableGetTablesHandler: table.GetTablesHandlerFunc(func(params table.GetTablesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation table.GetTables has not yet been implemented")
		}),
		TransactionsGetTransactionHandler: transactions.GetTransactionHandlerFunc(func(params transactions.GetTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation transactions.GetTransaction has not yet been implemented")
		}),
		TransactionsGetTransactionsHandler: transactions.GetTransactionsHandlerFunc(func(params transactions.GetTransactionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation transactions.GetTransactions has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		UserlistGetUserlistHandler: userlist.GetUserlistHandlerFunc(func(params userlist.GetUserlistParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation userlist.GetUserlist has not yet been implemented")
		}),
		UserlistGetUserlistsHandler: userlist.GetUserlistsHandlerFunc(func(params userlist.GetUserlistsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation userlist.GetUserlists has not yet been implemented")
		}),
		UserGetUsersHandler: user.GetUsersHandlerFunc(func(params user.GetUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUsers has not yet been implemented")
		}),
		ClusterInitiateCertificateRefreshHandler: cluster.InitiateCertificateRefreshHandlerFunc(func(params cluster.InitiateCertificateRefreshParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster.InitiateCertificateRefresh has not yet been implemented")
		}),
		ClusterPostClusterHandler: cluster.PostClusterHandlerFunc(func(params cluster.PostClusterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostCluster has not yet been implemented")
		}),
		ConfigurationPostHAProxyConfigurationHandler: configuration.PostHAProxyConfigurationHandlerFunc(func(params configuration.PostHAProxyConfigurationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation configuration.PostHAProxyConfiguration has not yet been implemented")
		}),
		ServiceDiscoveryReplaceAWSRegionHandler: service_discovery.ReplaceAWSRegionHandlerFunc(func(params service_discovery.ReplaceAWSRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.ReplaceAWSRegion has not yet been implemented")
		}),
		ACLReplaceACLHandler: acl.ReplaceACLHandlerFunc(func(params acl.ReplaceACLParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation acl.ReplaceACL has not yet been implemented")
		}),
		BackendReplaceBackendHandler: backend.ReplaceBackendHandlerFunc(func(params backend.ReplaceBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend.ReplaceBackend has not yet been implemented")
		}),
		BackendSwitchingRuleReplaceBackendSwitchingRuleHandler: backend_switching_rule.ReplaceBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.ReplaceBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation backend_switching_rule.ReplaceBackendSwitchingRule has not yet been implemented")
		}),
		BindReplaceBindHandler: bind.ReplaceBindHandlerFunc(func(params bind.ReplaceBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation bind.ReplaceBind has not yet been implemented")
		}),
		CacheReplaceCacheHandler: cache.ReplaceCacheHandlerFunc(func(params cache.ReplaceCacheParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cache.ReplaceCache has not yet been implemented")
		}),
		ServiceDiscoveryReplaceConsulHandler: service_discovery.ReplaceConsulHandlerFunc(func(params service_discovery.ReplaceConsulParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation service_discovery.ReplaceConsul has not yet been implemented")
		}),
		DeclareCaptureReplaceDeclareCaptureHandler: declare_capture.ReplaceDeclareCaptureHandlerFunc(func(params declare_capture.ReplaceDeclareCaptureParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation declare_capture.ReplaceDeclareCapture has not yet been implemented")
		}),
		DefaultsReplaceDefaultsHandler: defaults.ReplaceDefaultsHandlerFunc(func(params defaults.ReplaceDefaultsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.ReplaceDefaults has not yet been implemented")
		}),
		DefaultsReplaceDefaultsSectionHandler: defaults.ReplaceDefaultsSectionHandlerFunc(func(params defaults.ReplaceDefaultsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation defaults.ReplaceDefaultsSection has not yet been implemented")
		}),
		DgramBindReplaceDgramBindHandler: dgram_bind.ReplaceDgramBindHandlerFunc(func(params dgram_bind.ReplaceDgramBindParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation dgram_bind.ReplaceDgramBind has not yet been implemented")
		}),
		FCGIAppReplaceFCGIAppHandler: fcgi_app.ReplaceFCGIAppHandlerFunc(func(params fcgi_app.ReplaceFCGIAppParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation fcgi_app.ReplaceFCGIApp has not yet been implemented")
		}),
		FilterReplaceFilterHandler: filter.ReplaceFilterHandlerFunc(func(params filter.ReplaceFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation filter.ReplaceFilter has not yet been implemented")
		}),
		FrontendReplaceFrontendHandler: frontend.ReplaceFrontendHandlerFunc(func(params frontend.ReplaceFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation frontend.ReplaceFrontend has not yet been implemented")
		}),
		GlobalReplaceGlobalHandler: global.ReplaceGlobalHandlerFunc(func(params global.ReplaceGlobalParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation global.ReplaceGlobal has not yet been implemented")
		}),
		GroupReplaceGroupHandler: group.ReplaceGroupHandlerFunc(func(params group.ReplaceGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation group.ReplaceGroup has not yet been implemented")
		}),
		HTTPAfterResponseRuleReplaceHTTPAfterResponseRuleHandler: http_after_response_rule.ReplaceHTTPAfterResponseRuleHandlerFunc(func(params http_after_response_rule.ReplaceHTTPAfterResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_after_response_rule.ReplaceHTTPAfterResponseRule has not yet been implemented")
		}),
		HTTPCheckReplaceHTTPCheckHandler: http_check.ReplaceHTTPCheckHandlerFunc(func(params http_check.ReplaceHTTPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_check.ReplaceHTTPCheck has not yet been implemented")
		}),
		HTTPErrorRuleReplaceHTTPErrorRuleHandler: http_error_rule.ReplaceHTTPErrorRuleHandlerFunc(func(params http_error_rule.ReplaceHTTPErrorRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_error_rule.ReplaceHTTPErrorRule has not yet been implemented")
		}),
		HTTPErrorsReplaceHTTPErrorsSectionHandler: http_errors.ReplaceHTTPErrorsSectionHandlerFunc(func(params http_errors.ReplaceHTTPErrorsSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_errors.ReplaceHTTPErrorsSection has not yet been implemented")
		}),
		HTTPRequestRuleReplaceHTTPRequestRuleHandler: http_request_rule.ReplaceHTTPRequestRuleHandlerFunc(func(params http_request_rule.ReplaceHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_request_rule.ReplaceHTTPRequestRule has not yet been implemented")
		}),
		HTTPResponseRuleReplaceHTTPResponseRuleHandler: http_response_rule.ReplaceHTTPResponseRuleHandlerFunc(func(params http_response_rule.ReplaceHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation http_response_rule.ReplaceHTTPResponseRule has not yet been implemented")
		}),
		LogForwardReplaceLogForwardHandler: log_forward.ReplaceLogForwardHandlerFunc(func(params log_forward.ReplaceLogForwardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_forward.ReplaceLogForward has not yet been implemented")
		}),
		LogTargetReplaceLogTargetHandler: log_target.ReplaceLogTargetHandlerFunc(func(params log_target.ReplaceLogTargetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation log_target.ReplaceLogTarget has not yet been implemented")
		}),
		MailerEntryReplaceMailerEntryHandler: mailer_entry.ReplaceMailerEntryHandlerFunc(func(params mailer_entry.ReplaceMailerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation mailer_entry.ReplaceMailerEntry has not yet been implemented")
		}),
		NameserverReplaceNameserverHandler: nameserver.ReplaceNameserverHandlerFunc(func(params nameserver.ReplaceNameserverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation nameserver.ReplaceNameserver has not yet been implemented")
		}),
		PeerEntryReplacePeerEntryHandler: peer_entry.ReplacePeerEntryHandlerFunc(func(params peer_entry.ReplacePeerEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation peer_entry.ReplacePeerEntry has not yet been implemented")
		}),
		ProcessManagerReplaceProgramHandler: process_manager.ReplaceProgramHandlerFunc(func(params process_manager.ReplaceProgramParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation process_manager.ReplaceProgram has not yet been implemented")
		}),
		ResolverReplaceResolverHandler: resolver.ReplaceResolverHandlerFunc(func(params resolver.ReplaceResolverParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resolver.ReplaceResolver has not yet been implemented")
		}),
		RingReplaceRingHandler: ring.ReplaceRingHandlerFunc(func(params ring.ReplaceRingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ring.ReplaceRing has not yet been implemented")
		}),
		MapsReplaceRuntimeMapEntryHandler: maps.ReplaceRuntimeMapEntryHandlerFunc(func(params maps.ReplaceRuntimeMapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.ReplaceRuntimeMapEntry has not yet been implemented")
		}),
		ServerReplaceRuntimeServerHandler: serverops.ReplaceRuntimeServerHandlerFunc(func(params serverops.ReplaceRuntimeServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.ReplaceRuntimeServer has not yet been implemented")
		}),
		ServerReplaceServerHandler: serverops.ReplaceServerHandlerFunc(func(params serverops.ReplaceServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server.ReplaceServer has not yet been implemented")
		}),
		ServerSwitchingRuleReplaceServerSwitchingRuleHandler: server_switching_rule.ReplaceServerSwitchingRuleHandlerFunc(func(params server_switching_rule.ReplaceServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_switching_rule.ReplaceServerSwitchingRule has not yet been implemented")
		}),
		ServerTemplateReplaceServerTemplateHandler: server_template.ReplaceServerTemplateHandlerFunc(func(params server_template.ReplaceServerTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation server_template.ReplaceServerTemplate has not yet been implemented")
		}),
		SitesReplaceSiteHandler: sites.ReplaceSiteHandlerFunc(func(params sites.ReplaceSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sites.ReplaceSite has not yet been implemented")
		}),
		SpoeReplaceSpoeAgentHandler: spoe.ReplaceSpoeAgentHandlerFunc(func(params spoe.ReplaceSpoeAgentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.ReplaceSpoeAgent has not yet been implemented")
		}),
		SpoeReplaceSpoeGroupHandler: spoe.ReplaceSpoeGroupHandlerFunc(func(params spoe.ReplaceSpoeGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.ReplaceSpoeGroup has not yet been implemented")
		}),
		SpoeReplaceSpoeMessageHandler: spoe.ReplaceSpoeMessageHandlerFunc(func(params spoe.ReplaceSpoeMessageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe.ReplaceSpoeMessage has not yet been implemented")
		}),
		StickRuleReplaceStickRuleHandler: stick_rule.ReplaceStickRuleHandlerFunc(func(params stick_rule.ReplaceStickRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_rule.ReplaceStickRule has not yet been implemented")
		}),
		StorageReplaceStorageGeneralFileHandler: storage.ReplaceStorageGeneralFileHandlerFunc(func(params storage.ReplaceStorageGeneralFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.ReplaceStorageGeneralFile has not yet been implemented")
		}),
		StorageReplaceStorageMapFileHandler: storage.ReplaceStorageMapFileHandlerFunc(func(params storage.ReplaceStorageMapFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.ReplaceStorageMapFile has not yet been implemented")
		}),
		StorageReplaceStorageSSLCertificateHandler: storage.ReplaceStorageSSLCertificateHandlerFunc(func(params storage.ReplaceStorageSSLCertificateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation storage.ReplaceStorageSSLCertificate has not yet been implemented")
		}),
		TCPCheckReplaceTCPCheckHandler: tcp_check.ReplaceTCPCheckHandlerFunc(func(params tcp_check.ReplaceTCPCheckParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_check.ReplaceTCPCheck has not yet been implemented")
		}),
		TCPRequestRuleReplaceTCPRequestRuleHandler: tcp_request_rule.ReplaceTCPRequestRuleHandlerFunc(func(params tcp_request_rule.ReplaceTCPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_request_rule.ReplaceTCPRequestRule has not yet been implemented")
		}),
		TCPResponseRuleReplaceTCPResponseRuleHandler: tcp_response_rule.ReplaceTCPResponseRuleHandlerFunc(func(params tcp_response_rule.ReplaceTCPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation tcp_response_rule.ReplaceTCPResponseRule has not yet been implemented")
		}),
		TableReplaceTableHandler: table.ReplaceTableHandlerFunc(func(params table.ReplaceTableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation table.ReplaceTable has not yet been implemented")
		}),
		UserReplaceUserHandler: user.ReplaceUserHandlerFunc(func(params user.ReplaceUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.ReplaceUser has not yet been implemented")
		}),
		StickTableSetStickTableEntriesHandler: stick_table.SetStickTableEntriesHandlerFunc(func(params stick_table.SetStickTableEntriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation stick_table.SetStickTableEntries has not yet been implemented")
		}),
		MapsShowRuntimeMapHandler: maps.ShowRuntimeMapHandlerFunc(func(params maps.ShowRuntimeMapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation maps.ShowRuntimeMap has not yet been implemented")
		}),
		SpoeTransactionsStartSpoeTransactionHandler: spoe_transactions.StartSpoeTransactionHandlerFunc(func(params spoe_transactions.StartSpoeTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation spoe_transactions.StartSpoeTransaction has not yet been implemented")
		}),
		TransactionsStartTransactionHandler: transactions.StartTransactionHandlerFunc(func(params transactions.StartTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation transactions.StartTransaction has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (basic_auth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*
DataPlaneAPI API for editing and managing haproxy instances. Provides process information, configuration management,
haproxy stats and logs.
*/
type DataPlaneAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer
	// TxtConsumer registers a consumer for the following mime types:
	//   - text/plain
	TxtConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ACLRuntimeDeleteServicesHaproxyRuntimeACLFileEntriesIDHandler sets the operation handler for the delete services haproxy runtime ACL file entries ID operation
	ACLRuntimeDeleteServicesHaproxyRuntimeACLFileEntriesIDHandler acl_runtime.DeleteServicesHaproxyRuntimeACLFileEntriesIDHandler
	// ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesHandler sets the operation handler for the get services haproxy runtime ACL file entries operation
	ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesHandler acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesHandler
	// ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesIDHandler sets the operation handler for the get services haproxy runtime ACL file entries ID operation
	ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesIDHandler acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesIDHandler
	// ACLRuntimeGetServicesHaproxyRuntimeAclsHandler sets the operation handler for the get services haproxy runtime acls operation
	ACLRuntimeGetServicesHaproxyRuntimeAclsHandler acl_runtime.GetServicesHaproxyRuntimeAclsHandler
	// ACLRuntimeGetServicesHaproxyRuntimeAclsIDHandler sets the operation handler for the get services haproxy runtime acls ID operation
	ACLRuntimeGetServicesHaproxyRuntimeAclsIDHandler acl_runtime.GetServicesHaproxyRuntimeAclsIDHandler
	// ACLRuntimePostServicesHaproxyRuntimeACLFileEntriesHandler sets the operation handler for the post services haproxy runtime ACL file entries operation
	ACLRuntimePostServicesHaproxyRuntimeACLFileEntriesHandler acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesHandler
	// MapsAddMapEntryHandler sets the operation handler for the add map entry operation
	MapsAddMapEntryHandler maps.AddMapEntryHandler
	// ACLRuntimeAddPayloadRuntimeACLHandler sets the operation handler for the add payload runtime ACL operation
	ACLRuntimeAddPayloadRuntimeACLHandler acl_runtime.AddPayloadRuntimeACLHandler
	// MapsAddPayloadRuntimeMapHandler sets the operation handler for the add payload runtime map operation
	MapsAddPayloadRuntimeMapHandler maps.AddPayloadRuntimeMapHandler
	// ServerAddRuntimeServerHandler sets the operation handler for the add runtime server operation
	ServerAddRuntimeServerHandler serverops.AddRuntimeServerHandler
	// MapsClearRuntimeMapHandler sets the operation handler for the clear runtime map operation
	MapsClearRuntimeMapHandler maps.ClearRuntimeMapHandler
	// SpoeTransactionsCommitSpoeTransactionHandler sets the operation handler for the commit spoe transaction operation
	SpoeTransactionsCommitSpoeTransactionHandler spoe_transactions.CommitSpoeTransactionHandler
	// TransactionsCommitTransactionHandler sets the operation handler for the commit transaction operation
	TransactionsCommitTransactionHandler transactions.CommitTransactionHandler
	// ServiceDiscoveryCreateAWSRegionHandler sets the operation handler for the create a w s region operation
	ServiceDiscoveryCreateAWSRegionHandler service_discovery.CreateAWSRegionHandler
	// ACLCreateACLHandler sets the operation handler for the create Acl operation
	ACLCreateACLHandler acl.CreateACLHandler
	// BackendCreateBackendHandler sets the operation handler for the create backend operation
	BackendCreateBackendHandler backend.CreateBackendHandler
	// BackendSwitchingRuleCreateBackendSwitchingRuleHandler sets the operation handler for the create backend switching rule operation
	BackendSwitchingRuleCreateBackendSwitchingRuleHandler backend_switching_rule.CreateBackendSwitchingRuleHandler
	// BindCreateBindHandler sets the operation handler for the create bind operation
	BindCreateBindHandler bind.CreateBindHandler
	// CacheCreateCacheHandler sets the operation handler for the create cache operation
	CacheCreateCacheHandler cache.CreateCacheHandler
	// ServiceDiscoveryCreateConsulHandler sets the operation handler for the create consul operation
	ServiceDiscoveryCreateConsulHandler service_discovery.CreateConsulHandler
	// DeclareCaptureCreateDeclareCaptureHandler sets the operation handler for the create declare capture operation
	DeclareCaptureCreateDeclareCaptureHandler declare_capture.CreateDeclareCaptureHandler
	// DefaultsCreateDefaultsSectionHandler sets the operation handler for the create defaults section operation
	DefaultsCreateDefaultsSectionHandler defaults.CreateDefaultsSectionHandler
	// DgramBindCreateDgramBindHandler sets the operation handler for the create dgram bind operation
	DgramBindCreateDgramBindHandler dgram_bind.CreateDgramBindHandler
	// FCGIAppCreateFCGIAppHandler sets the operation handler for the create FCGI app operation
	FCGIAppCreateFCGIAppHandler fcgi_app.CreateFCGIAppHandler
	// FilterCreateFilterHandler sets the operation handler for the create filter operation
	FilterCreateFilterHandler filter.CreateFilterHandler
	// FrontendCreateFrontendHandler sets the operation handler for the create frontend operation
	FrontendCreateFrontendHandler frontend.CreateFrontendHandler
	// GroupCreateGroupHandler sets the operation handler for the create group operation
	GroupCreateGroupHandler group.CreateGroupHandler
	// HTTPAfterResponseRuleCreateHTTPAfterResponseRuleHandler sets the operation handler for the create HTTP after response rule operation
	HTTPAfterResponseRuleCreateHTTPAfterResponseRuleHandler http_after_response_rule.CreateHTTPAfterResponseRuleHandler
	// HTTPCheckCreateHTTPCheckHandler sets the operation handler for the create HTTP check operation
	HTTPCheckCreateHTTPCheckHandler http_check.CreateHTTPCheckHandler
	// HTTPErrorRuleCreateHTTPErrorRuleHandler sets the operation handler for the create HTTP error rule operation
	HTTPErrorRuleCreateHTTPErrorRuleHandler http_error_rule.CreateHTTPErrorRuleHandler
	// HTTPErrorsCreateHTTPErrorsSectionHandler sets the operation handler for the create HTTP errors section operation
	HTTPErrorsCreateHTTPErrorsSectionHandler http_errors.CreateHTTPErrorsSectionHandler
	// HTTPRequestRuleCreateHTTPRequestRuleHandler sets the operation handler for the create HTTP request rule operation
	HTTPRequestRuleCreateHTTPRequestRuleHandler http_request_rule.CreateHTTPRequestRuleHandler
	// HTTPResponseRuleCreateHTTPResponseRuleHandler sets the operation handler for the create HTTP response rule operation
	HTTPResponseRuleCreateHTTPResponseRuleHandler http_response_rule.CreateHTTPResponseRuleHandler
	// LogForwardCreateLogForwardHandler sets the operation handler for the create log forward operation
	LogForwardCreateLogForwardHandler log_forward.CreateLogForwardHandler
	// LogTargetCreateLogTargetHandler sets the operation handler for the create log target operation
	LogTargetCreateLogTargetHandler log_target.CreateLogTargetHandler
	// MailerEntryCreateMailerEntryHandler sets the operation handler for the create mailer entry operation
	MailerEntryCreateMailerEntryHandler mailer_entry.CreateMailerEntryHandler
	// MailersCreateMailersSectionHandler sets the operation handler for the create mailers section operation
	MailersCreateMailersSectionHandler mailers.CreateMailersSectionHandler
	// NameserverCreateNameserverHandler sets the operation handler for the create nameserver operation
	NameserverCreateNameserverHandler nameserver.CreateNameserverHandler
	// PeerCreatePeerHandler sets the operation handler for the create peer operation
	PeerCreatePeerHandler peer.CreatePeerHandler
	// PeerEntryCreatePeerEntryHandler sets the operation handler for the create peer entry operation
	PeerEntryCreatePeerEntryHandler peer_entry.CreatePeerEntryHandler
	// ProcessManagerCreateProgramHandler sets the operation handler for the create program operation
	ProcessManagerCreateProgramHandler process_manager.CreateProgramHandler
	// ResolverCreateResolverHandler sets the operation handler for the create resolver operation
	ResolverCreateResolverHandler resolver.CreateResolverHandler
	// RingCreateRingHandler sets the operation handler for the create ring operation
	RingCreateRingHandler ring.CreateRingHandler
	// ServerCreateServerHandler sets the operation handler for the create server operation
	ServerCreateServerHandler serverops.CreateServerHandler
	// ServerSwitchingRuleCreateServerSwitchingRuleHandler sets the operation handler for the create server switching rule operation
	ServerSwitchingRuleCreateServerSwitchingRuleHandler server_switching_rule.CreateServerSwitchingRuleHandler
	// ServerTemplateCreateServerTemplateHandler sets the operation handler for the create server template operation
	ServerTemplateCreateServerTemplateHandler server_template.CreateServerTemplateHandler
	// SitesCreateSiteHandler sets the operation handler for the create site operation
	SitesCreateSiteHandler sites.CreateSiteHandler
	// SpoeCreateSpoeHandler sets the operation handler for the create spoe operation
	SpoeCreateSpoeHandler spoe.CreateSpoeHandler
	// SpoeCreateSpoeAgentHandler sets the operation handler for the create spoe agent operation
	SpoeCreateSpoeAgentHandler spoe.CreateSpoeAgentHandler
	// SpoeCreateSpoeGroupHandler sets the operation handler for the create spoe group operation
	SpoeCreateSpoeGroupHandler spoe.CreateSpoeGroupHandler
	// SpoeCreateSpoeMessageHandler sets the operation handler for the create spoe message operation
	SpoeCreateSpoeMessageHandler spoe.CreateSpoeMessageHandler
	// SpoeCreateSpoeScopeHandler sets the operation handler for the create spoe scope operation
	SpoeCreateSpoeScopeHandler spoe.CreateSpoeScopeHandler
	// StickRuleCreateStickRuleHandler sets the operation handler for the create stick rule operation
	StickRuleCreateStickRuleHandler stick_rule.CreateStickRuleHandler
	// StorageCreateStorageGeneralFileHandler sets the operation handler for the create storage general file operation
	StorageCreateStorageGeneralFileHandler storage.CreateStorageGeneralFileHandler
	// StorageCreateStorageMapFileHandler sets the operation handler for the create storage map file operation
	StorageCreateStorageMapFileHandler storage.CreateStorageMapFileHandler
	// StorageCreateStorageSSLCertificateHandler sets the operation handler for the create storage s s l certificate operation
	StorageCreateStorageSSLCertificateHandler storage.CreateStorageSSLCertificateHandler
	// TCPCheckCreateTCPCheckHandler sets the operation handler for the create TCP check operation
	TCPCheckCreateTCPCheckHandler tcp_check.CreateTCPCheckHandler
	// TCPRequestRuleCreateTCPRequestRuleHandler sets the operation handler for the create TCP request rule operation
	TCPRequestRuleCreateTCPRequestRuleHandler tcp_request_rule.CreateTCPRequestRuleHandler
	// TCPResponseRuleCreateTCPResponseRuleHandler sets the operation handler for the create TCP response rule operation
	TCPResponseRuleCreateTCPResponseRuleHandler tcp_response_rule.CreateTCPResponseRuleHandler
	// TableCreateTableHandler sets the operation handler for the create table operation
	TableCreateTableHandler table.CreateTableHandler
	// UserCreateUserHandler sets the operation handler for the create user operation
	UserCreateUserHandler user.CreateUserHandler
	// UserlistCreateUserlistHandler sets the operation handler for the create userlist operation
	UserlistCreateUserlistHandler userlist.CreateUserlistHandler
	// ServiceDiscoveryDeleteAWSRegionHandler sets the operation handler for the delete a w s region operation
	ServiceDiscoveryDeleteAWSRegionHandler service_discovery.DeleteAWSRegionHandler
	// ACLDeleteACLHandler sets the operation handler for the delete Acl operation
	ACLDeleteACLHandler acl.DeleteACLHandler
	// BackendDeleteBackendHandler sets the operation handler for the delete backend operation
	BackendDeleteBackendHandler backend.DeleteBackendHandler
	// BackendSwitchingRuleDeleteBackendSwitchingRuleHandler sets the operation handler for the delete backend switching rule operation
	BackendSwitchingRuleDeleteBackendSwitchingRuleHandler backend_switching_rule.DeleteBackendSwitchingRuleHandler
	// BindDeleteBindHandler sets the operation handler for the delete bind operation
	BindDeleteBindHandler bind.DeleteBindHandler
	// CacheDeleteCacheHandler sets the operation handler for the delete cache operation
	CacheDeleteCacheHandler cache.DeleteCacheHandler
	// ClusterDeleteClusterHandler sets the operation handler for the delete cluster operation
	ClusterDeleteClusterHandler cluster.DeleteClusterHandler
	// ServiceDiscoveryDeleteConsulHandler sets the operation handler for the delete consul operation
	ServiceDiscoveryDeleteConsulHandler service_discovery.DeleteConsulHandler
	// DeclareCaptureDeleteDeclareCaptureHandler sets the operation handler for the delete declare capture operation
	DeclareCaptureDeleteDeclareCaptureHandler declare_capture.DeleteDeclareCaptureHandler
	// DefaultsDeleteDefaultsSectionHandler sets the operation handler for the delete defaults section operation
	DefaultsDeleteDefaultsSectionHandler defaults.DeleteDefaultsSectionHandler
	// DgramBindDeleteDgramBindHandler sets the operation handler for the delete dgram bind operation
	DgramBindDeleteDgramBindHandler dgram_bind.DeleteDgramBindHandler
	// FCGIAppDeleteFCGIAppHandler sets the operation handler for the delete FCGI app operation
	FCGIAppDeleteFCGIAppHandler fcgi_app.DeleteFCGIAppHandler
	// FilterDeleteFilterHandler sets the operation handler for the delete filter operation
	FilterDeleteFilterHandler filter.DeleteFilterHandler
	// FrontendDeleteFrontendHandler sets the operation handler for the delete frontend operation
	FrontendDeleteFrontendHandler frontend.DeleteFrontendHandler
	// GroupDeleteGroupHandler sets the operation handler for the delete group operation
	GroupDeleteGroupHandler group.DeleteGroupHandler
	// HTTPAfterResponseRuleDeleteHTTPAfterResponseRuleHandler sets the operation handler for the delete HTTP after response rule operation
	HTTPAfterResponseRuleDeleteHTTPAfterResponseRuleHandler http_after_response_rule.DeleteHTTPAfterResponseRuleHandler
	// HTTPCheckDeleteHTTPCheckHandler sets the operation handler for the delete HTTP check operation
	HTTPCheckDeleteHTTPCheckHandler http_check.DeleteHTTPCheckHandler
	// HTTPErrorRuleDeleteHTTPErrorRuleHandler sets the operation handler for the delete HTTP error rule operation
	HTTPErrorRuleDeleteHTTPErrorRuleHandler http_error_rule.DeleteHTTPErrorRuleHandler
	// HTTPErrorsDeleteHTTPErrorsSectionHandler sets the operation handler for the delete HTTP errors section operation
	HTTPErrorsDeleteHTTPErrorsSectionHandler http_errors.DeleteHTTPErrorsSectionHandler
	// HTTPRequestRuleDeleteHTTPRequestRuleHandler sets the operation handler for the delete HTTP request rule operation
	HTTPRequestRuleDeleteHTTPRequestRuleHandler http_request_rule.DeleteHTTPRequestRuleHandler
	// HTTPResponseRuleDeleteHTTPResponseRuleHandler sets the operation handler for the delete HTTP response rule operation
	HTTPResponseRuleDeleteHTTPResponseRuleHandler http_response_rule.DeleteHTTPResponseRuleHandler
	// LogForwardDeleteLogForwardHandler sets the operation handler for the delete log forward operation
	LogForwardDeleteLogForwardHandler log_forward.DeleteLogForwardHandler
	// LogTargetDeleteLogTargetHandler sets the operation handler for the delete log target operation
	LogTargetDeleteLogTargetHandler log_target.DeleteLogTargetHandler
	// MailerEntryDeleteMailerEntryHandler sets the operation handler for the delete mailer entry operation
	MailerEntryDeleteMailerEntryHandler mailer_entry.DeleteMailerEntryHandler
	// MailersDeleteMailersSectionHandler sets the operation handler for the delete mailers section operation
	MailersDeleteMailersSectionHandler mailers.DeleteMailersSectionHandler
	// NameserverDeleteNameserverHandler sets the operation handler for the delete nameserver operation
	NameserverDeleteNameserverHandler nameserver.DeleteNameserverHandler
	// PeerDeletePeerHandler sets the operation handler for the delete peer operation
	PeerDeletePeerHandler peer.DeletePeerHandler
	// PeerEntryDeletePeerEntryHandler sets the operation handler for the delete peer entry operation
	PeerEntryDeletePeerEntryHandler peer_entry.DeletePeerEntryHandler
	// ProcessManagerDeleteProgramHandler sets the operation handler for the delete program operation
	ProcessManagerDeleteProgramHandler process_manager.DeleteProgramHandler
	// ResolverDeleteResolverHandler sets the operation handler for the delete resolver operation
	ResolverDeleteResolverHandler resolver.DeleteResolverHandler
	// RingDeleteRingHandler sets the operation handler for the delete ring operation
	RingDeleteRingHandler ring.DeleteRingHandler
	// MapsDeleteRuntimeMapEntryHandler sets the operation handler for the delete runtime map entry operation
	MapsDeleteRuntimeMapEntryHandler maps.DeleteRuntimeMapEntryHandler
	// ServerDeleteRuntimeServerHandler sets the operation handler for the delete runtime server operation
	ServerDeleteRuntimeServerHandler serverops.DeleteRuntimeServerHandler
	// ServerDeleteServerHandler sets the operation handler for the delete server operation
	ServerDeleteServerHandler serverops.DeleteServerHandler
	// ServerSwitchingRuleDeleteServerSwitchingRuleHandler sets the operation handler for the delete server switching rule operation
	ServerSwitchingRuleDeleteServerSwitchingRuleHandler server_switching_rule.DeleteServerSwitchingRuleHandler
	// ServerTemplateDeleteServerTemplateHandler sets the operation handler for the delete server template operation
	ServerTemplateDeleteServerTemplateHandler server_template.DeleteServerTemplateHandler
	// SitesDeleteSiteHandler sets the operation handler for the delete site operation
	SitesDeleteSiteHandler sites.DeleteSiteHandler
	// SpoeDeleteSpoeAgentHandler sets the operation handler for the delete spoe agent operation
	SpoeDeleteSpoeAgentHandler spoe.DeleteSpoeAgentHandler
	// SpoeDeleteSpoeFileHandler sets the operation handler for the delete spoe file operation
	SpoeDeleteSpoeFileHandler spoe.DeleteSpoeFileHandler
	// SpoeDeleteSpoeGroupHandler sets the operation handler for the delete spoe group operation
	SpoeDeleteSpoeGroupHandler spoe.DeleteSpoeGroupHandler
	// SpoeDeleteSpoeMessageHandler sets the operation handler for the delete spoe message operation
	SpoeDeleteSpoeMessageHandler spoe.DeleteSpoeMessageHandler
	// SpoeDeleteSpoeScopeHandler sets the operation handler for the delete spoe scope operation
	SpoeDeleteSpoeScopeHandler spoe.DeleteSpoeScopeHandler
	// SpoeTransactionsDeleteSpoeTransactionHandler sets the operation handler for the delete spoe transaction operation
	SpoeTransactionsDeleteSpoeTransactionHandler spoe_transactions.DeleteSpoeTransactionHandler
	// StickRuleDeleteStickRuleHandler sets the operation handler for the delete stick rule operation
	StickRuleDeleteStickRuleHandler stick_rule.DeleteStickRuleHandler
	// StorageDeleteStorageGeneralFileHandler sets the operation handler for the delete storage general file operation
	StorageDeleteStorageGeneralFileHandler storage.DeleteStorageGeneralFileHandler
	// StorageDeleteStorageMapHandler sets the operation handler for the delete storage map operation
	StorageDeleteStorageMapHandler storage.DeleteStorageMapHandler
	// StorageDeleteStorageSSLCertificateHandler sets the operation handler for the delete storage s s l certificate operation
	StorageDeleteStorageSSLCertificateHandler storage.DeleteStorageSSLCertificateHandler
	// TCPCheckDeleteTCPCheckHandler sets the operation handler for the delete TCP check operation
	TCPCheckDeleteTCPCheckHandler tcp_check.DeleteTCPCheckHandler
	// TCPRequestRuleDeleteTCPRequestRuleHandler sets the operation handler for the delete TCP request rule operation
	TCPRequestRuleDeleteTCPRequestRuleHandler tcp_request_rule.DeleteTCPRequestRuleHandler
	// TCPResponseRuleDeleteTCPResponseRuleHandler sets the operation handler for the delete TCP response rule operation
	TCPResponseRuleDeleteTCPResponseRuleHandler tcp_response_rule.DeleteTCPResponseRuleHandler
	// TableDeleteTableHandler sets the operation handler for the delete table operation
	TableDeleteTableHandler table.DeleteTableHandler
	// TransactionsDeleteTransactionHandler sets the operation handler for the delete transaction operation
	TransactionsDeleteTransactionHandler transactions.DeleteTransactionHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// UserlistDeleteUserlistHandler sets the operation handler for the delete userlist operation
	UserlistDeleteUserlistHandler userlist.DeleteUserlistHandler
	// ClusterEditClusterHandler sets the operation handler for the edit cluster operation
	ClusterEditClusterHandler cluster.EditClusterHandler
	// MailersEditMailersSectionHandler sets the operation handler for the edit mailers section operation
	MailersEditMailersSectionHandler mailers.EditMailersSectionHandler
	// DiscoveryGetAPIEndpointsHandler sets the operation handler for the get API endpoints operation
	DiscoveryGetAPIEndpointsHandler discovery.GetAPIEndpointsHandler
	// ServiceDiscoveryGetAWSRegionHandler sets the operation handler for the get a w s region operation
	ServiceDiscoveryGetAWSRegionHandler service_discovery.GetAWSRegionHandler
	// ServiceDiscoveryGetAWSRegionsHandler sets the operation handler for the get a w s regions operation
	ServiceDiscoveryGetAWSRegionsHandler service_discovery.GetAWSRegionsHandler
	// ACLGetACLHandler sets the operation handler for the get Acl operation
	ACLGetACLHandler acl.GetACLHandler
	// ACLGetAclsHandler sets the operation handler for the get acls operation
	ACLGetAclsHandler acl.GetAclsHandler
	// MapsGetAllRuntimeMapFilesHandler sets the operation handler for the get all runtime map files operation
	MapsGetAllRuntimeMapFilesHandler maps.GetAllRuntimeMapFilesHandler
	// SpoeGetAllSpoeFilesHandler sets the operation handler for the get all spoe files operation
	SpoeGetAllSpoeFilesHandler spoe.GetAllSpoeFilesHandler
	// StorageGetAllStorageGeneralFilesHandler sets the operation handler for the get all storage general files operation
	StorageGetAllStorageGeneralFilesHandler storage.GetAllStorageGeneralFilesHandler
	// StorageGetAllStorageMapFilesHandler sets the operation handler for the get all storage map files operation
	StorageGetAllStorageMapFilesHandler storage.GetAllStorageMapFilesHandler
	// StorageGetAllStorageSSLCertificatesHandler sets the operation handler for the get all storage s s l certificates operation
	StorageGetAllStorageSSLCertificatesHandler storage.GetAllStorageSSLCertificatesHandler
	// BackendGetBackendHandler sets the operation handler for the get backend operation
	BackendGetBackendHandler backend.GetBackendHandler
	// BackendSwitchingRuleGetBackendSwitchingRuleHandler sets the operation handler for the get backend switching rule operation
	BackendSwitchingRuleGetBackendSwitchingRuleHandler backend_switching_rule.GetBackendSwitchingRuleHandler
	// BackendSwitchingRuleGetBackendSwitchingRulesHandler sets the operation handler for the get backend switching rules operation
	BackendSwitchingRuleGetBackendSwitchingRulesHandler backend_switching_rule.GetBackendSwitchingRulesHandler
	// BackendGetBackendsHandler sets the operation handler for the get backends operation
	BackendGetBackendsHandler backend.GetBackendsHandler
	// BindGetBindHandler sets the operation handler for the get bind operation
	BindGetBindHandler bind.GetBindHandler
	// BindGetBindsHandler sets the operation handler for the get binds operation
	BindGetBindsHandler bind.GetBindsHandler
	// CacheGetCacheHandler sets the operation handler for the get cache operation
	CacheGetCacheHandler cache.GetCacheHandler
	// CacheGetCachesHandler sets the operation handler for the get caches operation
	CacheGetCachesHandler cache.GetCachesHandler
	// ClusterGetClusterHandler sets the operation handler for the get cluster operation
	ClusterGetClusterHandler cluster.GetClusterHandler
	// DiscoveryGetConfigurationEndpointsHandler sets the operation handler for the get configuration endpoints operation
	DiscoveryGetConfigurationEndpointsHandler discovery.GetConfigurationEndpointsHandler
	// ConfigurationGetConfigurationVersionHandler sets the operation handler for the get configuration version operation
	ConfigurationGetConfigurationVersionHandler configuration.GetConfigurationVersionHandler
	// ServiceDiscoveryGetConsulHandler sets the operation handler for the get consul operation
	ServiceDiscoveryGetConsulHandler service_discovery.GetConsulHandler
	// ServiceDiscoveryGetConsulsHandler sets the operation handler for the get consuls operation
	ServiceDiscoveryGetConsulsHandler service_discovery.GetConsulsHandler
	// DeclareCaptureGetDeclareCaptureHandler sets the operation handler for the get declare capture operation
	DeclareCaptureGetDeclareCaptureHandler declare_capture.GetDeclareCaptureHandler
	// DeclareCaptureGetDeclareCapturesHandler sets the operation handler for the get declare captures operation
	DeclareCaptureGetDeclareCapturesHandler declare_capture.GetDeclareCapturesHandler
	// DefaultsGetDefaultsHandler sets the operation handler for the get defaults operation
	DefaultsGetDefaultsHandler defaults.GetDefaultsHandler
	// DefaultsGetDefaultsSectionHandler sets the operation handler for the get defaults section operation
	DefaultsGetDefaultsSectionHandler defaults.GetDefaultsSectionHandler
	// DefaultsGetDefaultsSectionsHandler sets the operation handler for the get defaults sections operation
	DefaultsGetDefaultsSectionsHandler defaults.GetDefaultsSectionsHandler
	// DgramBindGetDgramBindHandler sets the operation handler for the get dgram bind operation
	DgramBindGetDgramBindHandler dgram_bind.GetDgramBindHandler
	// DgramBindGetDgramBindsHandler sets the operation handler for the get dgram binds operation
	DgramBindGetDgramBindsHandler dgram_bind.GetDgramBindsHandler
	// FCGIAppGetFCGIAppHandler sets the operation handler for the get FCGI app operation
	FCGIAppGetFCGIAppHandler fcgi_app.GetFCGIAppHandler
	// FCGIAppGetFCGIAppsHandler sets the operation handler for the get FCGI apps operation
	FCGIAppGetFCGIAppsHandler fcgi_app.GetFCGIAppsHandler
	// FilterGetFilterHandler sets the operation handler for the get filter operation
	FilterGetFilterHandler filter.GetFilterHandler
	// FilterGetFiltersHandler sets the operation handler for the get filters operation
	FilterGetFiltersHandler filter.GetFiltersHandler
	// FrontendGetFrontendHandler sets the operation handler for the get frontend operation
	FrontendGetFrontendHandler frontend.GetFrontendHandler
	// FrontendGetFrontendsHandler sets the operation handler for the get frontends operation
	FrontendGetFrontendsHandler frontend.GetFrontendsHandler
	// GlobalGetGlobalHandler sets the operation handler for the get global operation
	GlobalGetGlobalHandler global.GetGlobalHandler
	// GroupGetGroupHandler sets the operation handler for the get group operation
	GroupGetGroupHandler group.GetGroupHandler
	// GroupGetGroupsHandler sets the operation handler for the get groups operation
	GroupGetGroupsHandler group.GetGroupsHandler
	// ConfigurationGetHAProxyConfigurationHandler sets the operation handler for the get h a proxy configuration operation
	ConfigurationGetHAProxyConfigurationHandler configuration.GetHAProxyConfigurationHandler
	// HTTPAfterResponseRuleGetHTTPAfterResponseRuleHandler sets the operation handler for the get HTTP after response rule operation
	HTTPAfterResponseRuleGetHTTPAfterResponseRuleHandler http_after_response_rule.GetHTTPAfterResponseRuleHandler
	// HTTPAfterResponseRuleGetHTTPAfterResponseRulesHandler sets the operation handler for the get HTTP after response rules operation
	HTTPAfterResponseRuleGetHTTPAfterResponseRulesHandler http_after_response_rule.GetHTTPAfterResponseRulesHandler
	// HTTPCheckGetHTTPCheckHandler sets the operation handler for the get HTTP check operation
	HTTPCheckGetHTTPCheckHandler http_check.GetHTTPCheckHandler
	// HTTPCheckGetHTTPChecksHandler sets the operation handler for the get HTTP checks operation
	HTTPCheckGetHTTPChecksHandler http_check.GetHTTPChecksHandler
	// HTTPErrorRuleGetHTTPErrorRuleHandler sets the operation handler for the get HTTP error rule operation
	HTTPErrorRuleGetHTTPErrorRuleHandler http_error_rule.GetHTTPErrorRuleHandler
	// HTTPErrorRuleGetHTTPErrorRulesHandler sets the operation handler for the get HTTP error rules operation
	HTTPErrorRuleGetHTTPErrorRulesHandler http_error_rule.GetHTTPErrorRulesHandler
	// HTTPErrorsGetHTTPErrorsSectionHandler sets the operation handler for the get HTTP errors section operation
	HTTPErrorsGetHTTPErrorsSectionHandler http_errors.GetHTTPErrorsSectionHandler
	// HTTPErrorsGetHTTPErrorsSectionsHandler sets the operation handler for the get HTTP errors sections operation
	HTTPErrorsGetHTTPErrorsSectionsHandler http_errors.GetHTTPErrorsSectionsHandler
	// HTTPRequestRuleGetHTTPRequestRuleHandler sets the operation handler for the get HTTP request rule operation
	HTTPRequestRuleGetHTTPRequestRuleHandler http_request_rule.GetHTTPRequestRuleHandler
	// HTTPRequestRuleGetHTTPRequestRulesHandler sets the operation handler for the get HTTP request rules operation
	HTTPRequestRuleGetHTTPRequestRulesHandler http_request_rule.GetHTTPRequestRulesHandler
	// HTTPResponseRuleGetHTTPResponseRuleHandler sets the operation handler for the get HTTP response rule operation
	HTTPResponseRuleGetHTTPResponseRuleHandler http_response_rule.GetHTTPResponseRuleHandler
	// HTTPResponseRuleGetHTTPResponseRulesHandler sets the operation handler for the get HTTP response rules operation
	HTTPResponseRuleGetHTTPResponseRulesHandler http_response_rule.GetHTTPResponseRulesHandler
	// DiscoveryGetHaproxyEndpointsHandler sets the operation handler for the get haproxy endpoints operation
	DiscoveryGetHaproxyEndpointsHandler discovery.GetHaproxyEndpointsHandler
	// InformationGetHaproxyProcessInfoHandler sets the operation handler for the get haproxy process info operation
	InformationGetHaproxyProcessInfoHandler information.GetHaproxyProcessInfoHandler
	// HealthGetHealthHandler sets the operation handler for the get health operation
	HealthGetHealthHandler health.GetHealthHandler
	// InformationGetInfoHandler sets the operation handler for the get info operation
	InformationGetInfoHandler information.GetInfoHandler
	// LogForwardGetLogForwardHandler sets the operation handler for the get log forward operation
	LogForwardGetLogForwardHandler log_forward.GetLogForwardHandler
	// LogForwardGetLogForwardsHandler sets the operation handler for the get log forwards operation
	LogForwardGetLogForwardsHandler log_forward.GetLogForwardsHandler
	// LogTargetGetLogTargetHandler sets the operation handler for the get log target operation
	LogTargetGetLogTargetHandler log_target.GetLogTargetHandler
	// LogTargetGetLogTargetsHandler sets the operation handler for the get log targets operation
	LogTargetGetLogTargetsHandler log_target.GetLogTargetsHandler
	// MailerEntryGetMailerEntriesHandler sets the operation handler for the get mailer entries operation
	MailerEntryGetMailerEntriesHandler mailer_entry.GetMailerEntriesHandler
	// MailerEntryGetMailerEntryHandler sets the operation handler for the get mailer entry operation
	MailerEntryGetMailerEntryHandler mailer_entry.GetMailerEntryHandler
	// MailersGetMailersSectionHandler sets the operation handler for the get mailers section operation
	MailersGetMailersSectionHandler mailers.GetMailersSectionHandler
	// MailersGetMailersSectionsHandler sets the operation handler for the get mailers sections operation
	MailersGetMailersSectionsHandler mailers.GetMailersSectionsHandler
	// NameserverGetNameserverHandler sets the operation handler for the get nameserver operation
	NameserverGetNameserverHandler nameserver.GetNameserverHandler
	// NameserverGetNameserversHandler sets the operation handler for the get nameservers operation
	NameserverGetNameserversHandler nameserver.GetNameserversHandler
	// MapsGetOneRuntimeMapHandler sets the operation handler for the get one runtime map operation
	MapsGetOneRuntimeMapHandler maps.GetOneRuntimeMapHandler
	// SpoeGetOneSpoeFileHandler sets the operation handler for the get one spoe file operation
	SpoeGetOneSpoeFileHandler spoe.GetOneSpoeFileHandler
	// StorageGetOneStorageGeneralFileHandler sets the operation handler for the get one storage general file operation
	StorageGetOneStorageGeneralFileHandler storage.GetOneStorageGeneralFileHandler
	// StorageGetOneStorageMapHandler sets the operation handler for the get one storage map operation
	StorageGetOneStorageMapHandler storage.GetOneStorageMapHandler
	// StorageGetOneStorageSSLCertificateHandler sets the operation handler for the get one storage s s l certificate operation
	StorageGetOneStorageSSLCertificateHandler storage.GetOneStorageSSLCertificateHandler
	// Version3GetOpenapiv3SpecificationHandler sets the operation handler for the get openapiv3 specification operation
	Version3GetOpenapiv3SpecificationHandler version3.GetOpenapiv3SpecificationHandler
	// PeerEntryGetPeerEntriesHandler sets the operation handler for the get peer entries operation
	PeerEntryGetPeerEntriesHandler peer_entry.GetPeerEntriesHandler
	// PeerEntryGetPeerEntryHandler sets the operation handler for the get peer entry operation
	PeerEntryGetPeerEntryHandler peer_entry.GetPeerEntryHandler
	// PeerGetPeerSectionHandler sets the operation handler for the get peer section operation
	PeerGetPeerSectionHandler peer.GetPeerSectionHandler
	// PeerGetPeerSectionsHandler sets the operation handler for the get peer sections operation
	PeerGetPeerSectionsHandler peer.GetPeerSectionsHandler
	// ProcessManagerGetProgramHandler sets the operation handler for the get program operation
	ProcessManagerGetProgramHandler process_manager.GetProgramHandler
	// ProcessManagerGetProgramsHandler sets the operation handler for the get programs operation
	ProcessManagerGetProgramsHandler process_manager.GetProgramsHandler
	// ReloadsGetReloadHandler sets the operation handler for the get reload operation
	ReloadsGetReloadHandler reloads.GetReloadHandler
	// ReloadsGetReloadsHandler sets the operation handler for the get reloads operation
	ReloadsGetReloadsHandler reloads.GetReloadsHandler
	// ResolverGetResolverHandler sets the operation handler for the get resolver operation
	ResolverGetResolverHandler resolver.GetResolverHandler
	// ResolverGetResolversHandler sets the operation handler for the get resolvers operation
	ResolverGetResolversHandler resolver.GetResolversHandler
	// RingGetRingHandler sets the operation handler for the get ring operation
	RingGetRingHandler ring.GetRingHandler
	// RingGetRingsHandler sets the operation handler for the get rings operation
	RingGetRingsHandler ring.GetRingsHandler
	// DiscoveryGetRuntimeEndpointsHandler sets the operation handler for the get runtime endpoints operation
	DiscoveryGetRuntimeEndpointsHandler discovery.GetRuntimeEndpointsHandler
	// MapsGetRuntimeMapEntryHandler sets the operation handler for the get runtime map entry operation
	MapsGetRuntimeMapEntryHandler maps.GetRuntimeMapEntryHandler
	// ServerGetRuntimeServerHandler sets the operation handler for the get runtime server operation
	ServerGetRuntimeServerHandler serverops.GetRuntimeServerHandler
	// ServerGetRuntimeServersHandler sets the operation handler for the get runtime servers operation
	ServerGetRuntimeServersHandler serverops.GetRuntimeServersHandler
	// ServerGetServerHandler sets the operation handler for the get server operation
	ServerGetServerHandler serverops.GetServerHandler
	// ServerSwitchingRuleGetServerSwitchingRuleHandler sets the operation handler for the get server switching rule operation
	ServerSwitchingRuleGetServerSwitchingRuleHandler server_switching_rule.GetServerSwitchingRuleHandler
	// ServerSwitchingRuleGetServerSwitchingRulesHandler sets the operation handler for the get server switching rules operation
	ServerSwitchingRuleGetServerSwitchingRulesHandler server_switching_rule.GetServerSwitchingRulesHandler
	// ServerTemplateGetServerTemplateHandler sets the operation handler for the get server template operation
	ServerTemplateGetServerTemplateHandler server_template.GetServerTemplateHandler
	// ServerTemplateGetServerTemplatesHandler sets the operation handler for the get server templates operation
	ServerTemplateGetServerTemplatesHandler server_template.GetServerTemplatesHandler
	// ServerGetServersHandler sets the operation handler for the get servers operation
	ServerGetServersHandler serverops.GetServersHandler
	// DiscoveryGetServicesEndpointsHandler sets the operation handler for the get services endpoints operation
	DiscoveryGetServicesEndpointsHandler discovery.GetServicesEndpointsHandler
	// SitesGetSiteHandler sets the operation handler for the get site operation
	SitesGetSiteHandler sites.GetSiteHandler
	// SitesGetSitesHandler sets the operation handler for the get sites operation
	SitesGetSitesHandler sites.GetSitesHandler
	// SpecificationGetSpecificationHandler sets the operation handler for the get specification operation
	SpecificationGetSpecificationHandler specification.GetSpecificationHandler
	// SpoeGetSpoeAgentHandler sets the operation handler for the get spoe agent operation
	SpoeGetSpoeAgentHandler spoe.GetSpoeAgentHandler
	// SpoeGetSpoeAgentsHandler sets the operation handler for the get spoe agents operation
	SpoeGetSpoeAgentsHandler spoe.GetSpoeAgentsHandler
	// SpoeGetSpoeConfigurationVersionHandler sets the operation handler for the get spoe configuration version operation
	SpoeGetSpoeConfigurationVersionHandler spoe.GetSpoeConfigurationVersionHandler
	// DiscoveryGetSpoeEndpointsHandler sets the operation handler for the get spoe endpoints operation
	DiscoveryGetSpoeEndpointsHandler discovery.GetSpoeEndpointsHandler
	// SpoeGetSpoeGroupHandler sets the operation handler for the get spoe group operation
	SpoeGetSpoeGroupHandler spoe.GetSpoeGroupHandler
	// SpoeGetSpoeGroupsHandler sets the operation handler for the get spoe groups operation
	SpoeGetSpoeGroupsHandler spoe.GetSpoeGroupsHandler
	// SpoeGetSpoeMessageHandler sets the operation handler for the get spoe message operation
	SpoeGetSpoeMessageHandler spoe.GetSpoeMessageHandler
	// SpoeGetSpoeMessagesHandler sets the operation handler for the get spoe messages operation
	SpoeGetSpoeMessagesHandler spoe.GetSpoeMessagesHandler
	// SpoeGetSpoeScopeHandler sets the operation handler for the get spoe scope operation
	SpoeGetSpoeScopeHandler spoe.GetSpoeScopeHandler
	// SpoeGetSpoeScopesHandler sets the operation handler for the get spoe scopes operation
	SpoeGetSpoeScopesHandler spoe.GetSpoeScopesHandler
	// SpoeTransactionsGetSpoeTransactionHandler sets the operation handler for the get spoe transaction operation
	SpoeTransactionsGetSpoeTransactionHandler spoe_transactions.GetSpoeTransactionHandler
	// SpoeTransactionsGetSpoeTransactionsHandler sets the operation handler for the get spoe transactions operation
	SpoeTransactionsGetSpoeTransactionsHandler spoe_transactions.GetSpoeTransactionsHandler
	// StatsGetStatsHandler sets the operation handler for the get stats operation
	StatsGetStatsHandler stats.GetStatsHandler
	// DiscoveryGetStatsEndpointsHandler sets the operation handler for the get stats endpoints operation
	DiscoveryGetStatsEndpointsHandler discovery.GetStatsEndpointsHandler
	// StickRuleGetStickRuleHandler sets the operation handler for the get stick rule operation
	StickRuleGetStickRuleHandler stick_rule.GetStickRuleHandler
	// StickRuleGetStickRulesHandler sets the operation handler for the get stick rules operation
	StickRuleGetStickRulesHandler stick_rule.GetStickRulesHandler
	// StickTableGetStickTableHandler sets the operation handler for the get stick table operation
	StickTableGetStickTableHandler stick_table.GetStickTableHandler
	// StickTableGetStickTableEntriesHandler sets the operation handler for the get stick table entries operation
	StickTableGetStickTableEntriesHandler stick_table.GetStickTableEntriesHandler
	// StickTableGetStickTablesHandler sets the operation handler for the get stick tables operation
	StickTableGetStickTablesHandler stick_table.GetStickTablesHandler
	// DiscoveryGetStorageEndpointsHandler sets the operation handler for the get storage endpoints operation
	DiscoveryGetStorageEndpointsHandler discovery.GetStorageEndpointsHandler
	// TCPCheckGetTCPCheckHandler sets the operation handler for the get TCP check operation
	TCPCheckGetTCPCheckHandler tcp_check.GetTCPCheckHandler
	// TCPCheckGetTCPChecksHandler sets the operation handler for the get TCP checks operation
	TCPCheckGetTCPChecksHandler tcp_check.GetTCPChecksHandler
	// TCPRequestRuleGetTCPRequestRuleHandler sets the operation handler for the get TCP request rule operation
	TCPRequestRuleGetTCPRequestRuleHandler tcp_request_rule.GetTCPRequestRuleHandler
	// TCPRequestRuleGetTCPRequestRulesHandler sets the operation handler for the get TCP request rules operation
	TCPRequestRuleGetTCPRequestRulesHandler tcp_request_rule.GetTCPRequestRulesHandler
	// TCPResponseRuleGetTCPResponseRuleHandler sets the operation handler for the get TCP response rule operation
	TCPResponseRuleGetTCPResponseRuleHandler tcp_response_rule.GetTCPResponseRuleHandler
	// TCPResponseRuleGetTCPResponseRulesHandler sets the operation handler for the get TCP response rules operation
	TCPResponseRuleGetTCPResponseRulesHandler tcp_response_rule.GetTCPResponseRulesHandler
	// TableGetTableHandler sets the operation handler for the get table operation
	TableGetTableHandler table.GetTableHandler
	// TableGetTablesHandler sets the operation handler for the get tables operation
	TableGetTablesHandler table.GetTablesHandler
	// TransactionsGetTransactionHandler sets the operation handler for the get transaction operation
	TransactionsGetTransactionHandler transactions.GetTransactionHandler
	// TransactionsGetTransactionsHandler sets the operation handler for the get transactions operation
	TransactionsGetTransactionsHandler transactions.GetTransactionsHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserlistGetUserlistHandler sets the operation handler for the get userlist operation
	UserlistGetUserlistHandler userlist.GetUserlistHandler
	// UserlistGetUserlistsHandler sets the operation handler for the get userlists operation
	UserlistGetUserlistsHandler userlist.GetUserlistsHandler
	// UserGetUsersHandler sets the operation handler for the get users operation
	UserGetUsersHandler user.GetUsersHandler
	// ClusterInitiateCertificateRefreshHandler sets the operation handler for the initiate certificate refresh operation
	ClusterInitiateCertificateRefreshHandler cluster.InitiateCertificateRefreshHandler
	// ClusterPostClusterHandler sets the operation handler for the post cluster operation
	ClusterPostClusterHandler cluster.PostClusterHandler
	// ConfigurationPostHAProxyConfigurationHandler sets the operation handler for the post h a proxy configuration operation
	ConfigurationPostHAProxyConfigurationHandler configuration.PostHAProxyConfigurationHandler
	// ServiceDiscoveryReplaceAWSRegionHandler sets the operation handler for the replace a w s region operation
	ServiceDiscoveryReplaceAWSRegionHandler service_discovery.ReplaceAWSRegionHandler
	// ACLReplaceACLHandler sets the operation handler for the replace Acl operation
	ACLReplaceACLHandler acl.ReplaceACLHandler
	// BackendReplaceBackendHandler sets the operation handler for the replace backend operation
	BackendReplaceBackendHandler backend.ReplaceBackendHandler
	// BackendSwitchingRuleReplaceBackendSwitchingRuleHandler sets the operation handler for the replace backend switching rule operation
	BackendSwitchingRuleReplaceBackendSwitchingRuleHandler backend_switching_rule.ReplaceBackendSwitchingRuleHandler
	// BindReplaceBindHandler sets the operation handler for the replace bind operation
	BindReplaceBindHandler bind.ReplaceBindHandler
	// CacheReplaceCacheHandler sets the operation handler for the replace cache operation
	CacheReplaceCacheHandler cache.ReplaceCacheHandler
	// ServiceDiscoveryReplaceConsulHandler sets the operation handler for the replace consul operation
	ServiceDiscoveryReplaceConsulHandler service_discovery.ReplaceConsulHandler
	// DeclareCaptureReplaceDeclareCaptureHandler sets the operation handler for the replace declare capture operation
	DeclareCaptureReplaceDeclareCaptureHandler declare_capture.ReplaceDeclareCaptureHandler
	// DefaultsReplaceDefaultsHandler sets the operation handler for the replace defaults operation
	DefaultsReplaceDefaultsHandler defaults.ReplaceDefaultsHandler
	// DefaultsReplaceDefaultsSectionHandler sets the operation handler for the replace defaults section operation
	DefaultsReplaceDefaultsSectionHandler defaults.ReplaceDefaultsSectionHandler
	// DgramBindReplaceDgramBindHandler sets the operation handler for the replace dgram bind operation
	DgramBindReplaceDgramBindHandler dgram_bind.ReplaceDgramBindHandler
	// FCGIAppReplaceFCGIAppHandler sets the operation handler for the replace FCGI app operation
	FCGIAppReplaceFCGIAppHandler fcgi_app.ReplaceFCGIAppHandler
	// FilterReplaceFilterHandler sets the operation handler for the replace filter operation
	FilterReplaceFilterHandler filter.ReplaceFilterHandler
	// FrontendReplaceFrontendHandler sets the operation handler for the replace frontend operation
	FrontendReplaceFrontendHandler frontend.ReplaceFrontendHandler
	// GlobalReplaceGlobalHandler sets the operation handler for the replace global operation
	GlobalReplaceGlobalHandler global.ReplaceGlobalHandler
	// GroupReplaceGroupHandler sets the operation handler for the replace group operation
	GroupReplaceGroupHandler group.ReplaceGroupHandler
	// HTTPAfterResponseRuleReplaceHTTPAfterResponseRuleHandler sets the operation handler for the replace HTTP after response rule operation
	HTTPAfterResponseRuleReplaceHTTPAfterResponseRuleHandler http_after_response_rule.ReplaceHTTPAfterResponseRuleHandler
	// HTTPCheckReplaceHTTPCheckHandler sets the operation handler for the replace HTTP check operation
	HTTPCheckReplaceHTTPCheckHandler http_check.ReplaceHTTPCheckHandler
	// HTTPErrorRuleReplaceHTTPErrorRuleHandler sets the operation handler for the replace HTTP error rule operation
	HTTPErrorRuleReplaceHTTPErrorRuleHandler http_error_rule.ReplaceHTTPErrorRuleHandler
	// HTTPErrorsReplaceHTTPErrorsSectionHandler sets the operation handler for the replace HTTP errors section operation
	HTTPErrorsReplaceHTTPErrorsSectionHandler http_errors.ReplaceHTTPErrorsSectionHandler
	// HTTPRequestRuleReplaceHTTPRequestRuleHandler sets the operation handler for the replace HTTP request rule operation
	HTTPRequestRuleReplaceHTTPRequestRuleHandler http_request_rule.ReplaceHTTPRequestRuleHandler
	// HTTPResponseRuleReplaceHTTPResponseRuleHandler sets the operation handler for the replace HTTP response rule operation
	HTTPResponseRuleReplaceHTTPResponseRuleHandler http_response_rule.ReplaceHTTPResponseRuleHandler
	// LogForwardReplaceLogForwardHandler sets the operation handler for the replace log forward operation
	LogForwardReplaceLogForwardHandler log_forward.ReplaceLogForwardHandler
	// LogTargetReplaceLogTargetHandler sets the operation handler for the replace log target operation
	LogTargetReplaceLogTargetHandler log_target.ReplaceLogTargetHandler
	// MailerEntryReplaceMailerEntryHandler sets the operation handler for the replace mailer entry operation
	MailerEntryReplaceMailerEntryHandler mailer_entry.ReplaceMailerEntryHandler
	// NameserverReplaceNameserverHandler sets the operation handler for the replace nameserver operation
	NameserverReplaceNameserverHandler nameserver.ReplaceNameserverHandler
	// PeerEntryReplacePeerEntryHandler sets the operation handler for the replace peer entry operation
	PeerEntryReplacePeerEntryHandler peer_entry.ReplacePeerEntryHandler
	// ProcessManagerReplaceProgramHandler sets the operation handler for the replace program operation
	ProcessManagerReplaceProgramHandler process_manager.ReplaceProgramHandler
	// ResolverReplaceResolverHandler sets the operation handler for the replace resolver operation
	ResolverReplaceResolverHandler resolver.ReplaceResolverHandler
	// RingReplaceRingHandler sets the operation handler for the replace ring operation
	RingReplaceRingHandler ring.ReplaceRingHandler
	// MapsReplaceRuntimeMapEntryHandler sets the operation handler for the replace runtime map entry operation
	MapsReplaceRuntimeMapEntryHandler maps.ReplaceRuntimeMapEntryHandler
	// ServerReplaceRuntimeServerHandler sets the operation handler for the replace runtime server operation
	ServerReplaceRuntimeServerHandler serverops.ReplaceRuntimeServerHandler
	// ServerReplaceServerHandler sets the operation handler for the replace server operation
	ServerReplaceServerHandler serverops.ReplaceServerHandler
	// ServerSwitchingRuleReplaceServerSwitchingRuleHandler sets the operation handler for the replace server switching rule operation
	ServerSwitchingRuleReplaceServerSwitchingRuleHandler server_switching_rule.ReplaceServerSwitchingRuleHandler
	// ServerTemplateReplaceServerTemplateHandler sets the operation handler for the replace server template operation
	ServerTemplateReplaceServerTemplateHandler server_template.ReplaceServerTemplateHandler
	// SitesReplaceSiteHandler sets the operation handler for the replace site operation
	SitesReplaceSiteHandler sites.ReplaceSiteHandler
	// SpoeReplaceSpoeAgentHandler sets the operation handler for the replace spoe agent operation
	SpoeReplaceSpoeAgentHandler spoe.ReplaceSpoeAgentHandler
	// SpoeReplaceSpoeGroupHandler sets the operation handler for the replace spoe group operation
	SpoeReplaceSpoeGroupHandler spoe.ReplaceSpoeGroupHandler
	// SpoeReplaceSpoeMessageHandler sets the operation handler for the replace spoe message operation
	SpoeReplaceSpoeMessageHandler spoe.ReplaceSpoeMessageHandler
	// StickRuleReplaceStickRuleHandler sets the operation handler for the replace stick rule operation
	StickRuleReplaceStickRuleHandler stick_rule.ReplaceStickRuleHandler
	// StorageReplaceStorageGeneralFileHandler sets the operation handler for the replace storage general file operation
	StorageReplaceStorageGeneralFileHandler storage.ReplaceStorageGeneralFileHandler
	// StorageReplaceStorageMapFileHandler sets the operation handler for the replace storage map file operation
	StorageReplaceStorageMapFileHandler storage.ReplaceStorageMapFileHandler
	// StorageReplaceStorageSSLCertificateHandler sets the operation handler for the replace storage s s l certificate operation
	StorageReplaceStorageSSLCertificateHandler storage.ReplaceStorageSSLCertificateHandler
	// TCPCheckReplaceTCPCheckHandler sets the operation handler for the replace TCP check operation
	TCPCheckReplaceTCPCheckHandler tcp_check.ReplaceTCPCheckHandler
	// TCPRequestRuleReplaceTCPRequestRuleHandler sets the operation handler for the replace TCP request rule operation
	TCPRequestRuleReplaceTCPRequestRuleHandler tcp_request_rule.ReplaceTCPRequestRuleHandler
	// TCPResponseRuleReplaceTCPResponseRuleHandler sets the operation handler for the replace TCP response rule operation
	TCPResponseRuleReplaceTCPResponseRuleHandler tcp_response_rule.ReplaceTCPResponseRuleHandler
	// TableReplaceTableHandler sets the operation handler for the replace table operation
	TableReplaceTableHandler table.ReplaceTableHandler
	// UserReplaceUserHandler sets the operation handler for the replace user operation
	UserReplaceUserHandler user.ReplaceUserHandler
	// StickTableSetStickTableEntriesHandler sets the operation handler for the set stick table entries operation
	StickTableSetStickTableEntriesHandler stick_table.SetStickTableEntriesHandler
	// MapsShowRuntimeMapHandler sets the operation handler for the show runtime map operation
	MapsShowRuntimeMapHandler maps.ShowRuntimeMapHandler
	// SpoeTransactionsStartSpoeTransactionHandler sets the operation handler for the start spoe transaction operation
	SpoeTransactionsStartSpoeTransactionHandler spoe_transactions.StartSpoeTransactionHandler
	// TransactionsStartTransactionHandler sets the operation handler for the start transaction operation
	TransactionsStartTransactionHandler transactions.StartTransactionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DataPlaneAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DataPlaneAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DataPlaneAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DataPlaneAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DataPlaneAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DataPlaneAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DataPlaneAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DataPlaneAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DataPlaneAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DataPlaneAPI
func (o *DataPlaneAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}
	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.ACLRuntimeDeleteServicesHaproxyRuntimeACLFileEntriesIDHandler == nil {
		unregistered = append(unregistered, "acl_runtime.DeleteServicesHaproxyRuntimeACLFileEntriesIDHandler")
	}
	if o.ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesHandler == nil {
		unregistered = append(unregistered, "acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesHandler")
	}
	if o.ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesIDHandler == nil {
		unregistered = append(unregistered, "acl_runtime.GetServicesHaproxyRuntimeACLFileEntriesIDHandler")
	}
	if o.ACLRuntimeGetServicesHaproxyRuntimeAclsHandler == nil {
		unregistered = append(unregistered, "acl_runtime.GetServicesHaproxyRuntimeAclsHandler")
	}
	if o.ACLRuntimeGetServicesHaproxyRuntimeAclsIDHandler == nil {
		unregistered = append(unregistered, "acl_runtime.GetServicesHaproxyRuntimeAclsIDHandler")
	}
	if o.ACLRuntimePostServicesHaproxyRuntimeACLFileEntriesHandler == nil {
		unregistered = append(unregistered, "acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesHandler")
	}
	if o.MapsAddMapEntryHandler == nil {
		unregistered = append(unregistered, "maps.AddMapEntryHandler")
	}
	if o.ACLRuntimeAddPayloadRuntimeACLHandler == nil {
		unregistered = append(unregistered, "acl_runtime.AddPayloadRuntimeACLHandler")
	}
	if o.MapsAddPayloadRuntimeMapHandler == nil {
		unregistered = append(unregistered, "maps.AddPayloadRuntimeMapHandler")
	}
	if o.ServerAddRuntimeServerHandler == nil {
		unregistered = append(unregistered, "server.AddRuntimeServerHandler")
	}
	if o.MapsClearRuntimeMapHandler == nil {
		unregistered = append(unregistered, "maps.ClearRuntimeMapHandler")
	}
	if o.SpoeTransactionsCommitSpoeTransactionHandler == nil {
		unregistered = append(unregistered, "spoe_transactions.CommitSpoeTransactionHandler")
	}
	if o.TransactionsCommitTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.CommitTransactionHandler")
	}
	if o.ServiceDiscoveryCreateAWSRegionHandler == nil {
		unregistered = append(unregistered, "service_discovery.CreateAWSRegionHandler")
	}
	if o.ACLCreateACLHandler == nil {
		unregistered = append(unregistered, "acl.CreateACLHandler")
	}
	if o.BackendCreateBackendHandler == nil {
		unregistered = append(unregistered, "backend.CreateBackendHandler")
	}
	if o.BackendSwitchingRuleCreateBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.CreateBackendSwitchingRuleHandler")
	}
	if o.BindCreateBindHandler == nil {
		unregistered = append(unregistered, "bind.CreateBindHandler")
	}
	if o.CacheCreateCacheHandler == nil {
		unregistered = append(unregistered, "cache.CreateCacheHandler")
	}
	if o.ServiceDiscoveryCreateConsulHandler == nil {
		unregistered = append(unregistered, "service_discovery.CreateConsulHandler")
	}
	if o.DeclareCaptureCreateDeclareCaptureHandler == nil {
		unregistered = append(unregistered, "declare_capture.CreateDeclareCaptureHandler")
	}
	if o.DefaultsCreateDefaultsSectionHandler == nil {
		unregistered = append(unregistered, "defaults.CreateDefaultsSectionHandler")
	}
	if o.DgramBindCreateDgramBindHandler == nil {
		unregistered = append(unregistered, "dgram_bind.CreateDgramBindHandler")
	}
	if o.FCGIAppCreateFCGIAppHandler == nil {
		unregistered = append(unregistered, "fcgi_app.CreateFCGIAppHandler")
	}
	if o.FilterCreateFilterHandler == nil {
		unregistered = append(unregistered, "filter.CreateFilterHandler")
	}
	if o.FrontendCreateFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.CreateFrontendHandler")
	}
	if o.GroupCreateGroupHandler == nil {
		unregistered = append(unregistered, "group.CreateGroupHandler")
	}
	if o.HTTPAfterResponseRuleCreateHTTPAfterResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_after_response_rule.CreateHTTPAfterResponseRuleHandler")
	}
	if o.HTTPCheckCreateHTTPCheckHandler == nil {
		unregistered = append(unregistered, "http_check.CreateHTTPCheckHandler")
	}
	if o.HTTPErrorRuleCreateHTTPErrorRuleHandler == nil {
		unregistered = append(unregistered, "http_error_rule.CreateHTTPErrorRuleHandler")
	}
	if o.HTTPErrorsCreateHTTPErrorsSectionHandler == nil {
		unregistered = append(unregistered, "http_errors.CreateHTTPErrorsSectionHandler")
	}
	if o.HTTPRequestRuleCreateHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.CreateHTTPRequestRuleHandler")
	}
	if o.HTTPResponseRuleCreateHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.CreateHTTPResponseRuleHandler")
	}
	if o.LogForwardCreateLogForwardHandler == nil {
		unregistered = append(unregistered, "log_forward.CreateLogForwardHandler")
	}
	if o.LogTargetCreateLogTargetHandler == nil {
		unregistered = append(unregistered, "log_target.CreateLogTargetHandler")
	}
	if o.MailerEntryCreateMailerEntryHandler == nil {
		unregistered = append(unregistered, "mailer_entry.CreateMailerEntryHandler")
	}
	if o.MailersCreateMailersSectionHandler == nil {
		unregistered = append(unregistered, "mailers.CreateMailersSectionHandler")
	}
	if o.NameserverCreateNameserverHandler == nil {
		unregistered = append(unregistered, "nameserver.CreateNameserverHandler")
	}
	if o.PeerCreatePeerHandler == nil {
		unregistered = append(unregistered, "peer.CreatePeerHandler")
	}
	if o.PeerEntryCreatePeerEntryHandler == nil {
		unregistered = append(unregistered, "peer_entry.CreatePeerEntryHandler")
	}
	if o.ProcessManagerCreateProgramHandler == nil {
		unregistered = append(unregistered, "process_manager.CreateProgramHandler")
	}
	if o.ResolverCreateResolverHandler == nil {
		unregistered = append(unregistered, "resolver.CreateResolverHandler")
	}
	if o.RingCreateRingHandler == nil {
		unregistered = append(unregistered, "ring.CreateRingHandler")
	}
	if o.ServerCreateServerHandler == nil {
		unregistered = append(unregistered, "server.CreateServerHandler")
	}
	if o.ServerSwitchingRuleCreateServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.CreateServerSwitchingRuleHandler")
	}
	if o.ServerTemplateCreateServerTemplateHandler == nil {
		unregistered = append(unregistered, "server_template.CreateServerTemplateHandler")
	}
	if o.SitesCreateSiteHandler == nil {
		unregistered = append(unregistered, "sites.CreateSiteHandler")
	}
	if o.SpoeCreateSpoeHandler == nil {
		unregistered = append(unregistered, "spoe.CreateSpoeHandler")
	}
	if o.SpoeCreateSpoeAgentHandler == nil {
		unregistered = append(unregistered, "spoe.CreateSpoeAgentHandler")
	}
	if o.SpoeCreateSpoeGroupHandler == nil {
		unregistered = append(unregistered, "spoe.CreateSpoeGroupHandler")
	}
	if o.SpoeCreateSpoeMessageHandler == nil {
		unregistered = append(unregistered, "spoe.CreateSpoeMessageHandler")
	}
	if o.SpoeCreateSpoeScopeHandler == nil {
		unregistered = append(unregistered, "spoe.CreateSpoeScopeHandler")
	}
	if o.StickRuleCreateStickRuleHandler == nil {
		unregistered = append(unregistered, "stick_rule.CreateStickRuleHandler")
	}
	if o.StorageCreateStorageGeneralFileHandler == nil {
		unregistered = append(unregistered, "storage.CreateStorageGeneralFileHandler")
	}
	if o.StorageCreateStorageMapFileHandler == nil {
		unregistered = append(unregistered, "storage.CreateStorageMapFileHandler")
	}
	if o.StorageCreateStorageSSLCertificateHandler == nil {
		unregistered = append(unregistered, "storage.CreateStorageSSLCertificateHandler")
	}
	if o.TCPCheckCreateTCPCheckHandler == nil {
		unregistered = append(unregistered, "tcp_check.CreateTCPCheckHandler")
	}
	if o.TCPRequestRuleCreateTCPRequestRuleHandler == nil {
		unregistered = append(unregistered, "tcp_request_rule.CreateTCPRequestRuleHandler")
	}
	if o.TCPResponseRuleCreateTCPResponseRuleHandler == nil {
		unregistered = append(unregistered, "tcp_response_rule.CreateTCPResponseRuleHandler")
	}
	if o.TableCreateTableHandler == nil {
		unregistered = append(unregistered, "table.CreateTableHandler")
	}
	if o.UserCreateUserHandler == nil {
		unregistered = append(unregistered, "user.CreateUserHandler")
	}
	if o.UserlistCreateUserlistHandler == nil {
		unregistered = append(unregistered, "userlist.CreateUserlistHandler")
	}
	if o.ServiceDiscoveryDeleteAWSRegionHandler == nil {
		unregistered = append(unregistered, "service_discovery.DeleteAWSRegionHandler")
	}
	if o.ACLDeleteACLHandler == nil {
		unregistered = append(unregistered, "acl.DeleteACLHandler")
	}
	if o.BackendDeleteBackendHandler == nil {
		unregistered = append(unregistered, "backend.DeleteBackendHandler")
	}
	if o.BackendSwitchingRuleDeleteBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.DeleteBackendSwitchingRuleHandler")
	}
	if o.BindDeleteBindHandler == nil {
		unregistered = append(unregistered, "bind.DeleteBindHandler")
	}
	if o.CacheDeleteCacheHandler == nil {
		unregistered = append(unregistered, "cache.DeleteCacheHandler")
	}
	if o.ClusterDeleteClusterHandler == nil {
		unregistered = append(unregistered, "cluster.DeleteClusterHandler")
	}
	if o.ServiceDiscoveryDeleteConsulHandler == nil {
		unregistered = append(unregistered, "service_discovery.DeleteConsulHandler")
	}
	if o.DeclareCaptureDeleteDeclareCaptureHandler == nil {
		unregistered = append(unregistered, "declare_capture.DeleteDeclareCaptureHandler")
	}
	if o.DefaultsDeleteDefaultsSectionHandler == nil {
		unregistered = append(unregistered, "defaults.DeleteDefaultsSectionHandler")
	}
	if o.DgramBindDeleteDgramBindHandler == nil {
		unregistered = append(unregistered, "dgram_bind.DeleteDgramBindHandler")
	}
	if o.FCGIAppDeleteFCGIAppHandler == nil {
		unregistered = append(unregistered, "fcgi_app.DeleteFCGIAppHandler")
	}
	if o.FilterDeleteFilterHandler == nil {
		unregistered = append(unregistered, "filter.DeleteFilterHandler")
	}
	if o.FrontendDeleteFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.DeleteFrontendHandler")
	}
	if o.GroupDeleteGroupHandler == nil {
		unregistered = append(unregistered, "group.DeleteGroupHandler")
	}
	if o.HTTPAfterResponseRuleDeleteHTTPAfterResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_after_response_rule.DeleteHTTPAfterResponseRuleHandler")
	}
	if o.HTTPCheckDeleteHTTPCheckHandler == nil {
		unregistered = append(unregistered, "http_check.DeleteHTTPCheckHandler")
	}
	if o.HTTPErrorRuleDeleteHTTPErrorRuleHandler == nil {
		unregistered = append(unregistered, "http_error_rule.DeleteHTTPErrorRuleHandler")
	}
	if o.HTTPErrorsDeleteHTTPErrorsSectionHandler == nil {
		unregistered = append(unregistered, "http_errors.DeleteHTTPErrorsSectionHandler")
	}
	if o.HTTPRequestRuleDeleteHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.DeleteHTTPRequestRuleHandler")
	}
	if o.HTTPResponseRuleDeleteHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.DeleteHTTPResponseRuleHandler")
	}
	if o.LogForwardDeleteLogForwardHandler == nil {
		unregistered = append(unregistered, "log_forward.DeleteLogForwardHandler")
	}
	if o.LogTargetDeleteLogTargetHandler == nil {
		unregistered = append(unregistered, "log_target.DeleteLogTargetHandler")
	}
	if o.MailerEntryDeleteMailerEntryHandler == nil {
		unregistered = append(unregistered, "mailer_entry.DeleteMailerEntryHandler")
	}
	if o.MailersDeleteMailersSectionHandler == nil {
		unregistered = append(unregistered, "mailers.DeleteMailersSectionHandler")
	}
	if o.NameserverDeleteNameserverHandler == nil {
		unregistered = append(unregistered, "nameserver.DeleteNameserverHandler")
	}
	if o.PeerDeletePeerHandler == nil {
		unregistered = append(unregistered, "peer.DeletePeerHandler")
	}
	if o.PeerEntryDeletePeerEntryHandler == nil {
		unregistered = append(unregistered, "peer_entry.DeletePeerEntryHandler")
	}
	if o.ProcessManagerDeleteProgramHandler == nil {
		unregistered = append(unregistered, "process_manager.DeleteProgramHandler")
	}
	if o.ResolverDeleteResolverHandler == nil {
		unregistered = append(unregistered, "resolver.DeleteResolverHandler")
	}
	if o.RingDeleteRingHandler == nil {
		unregistered = append(unregistered, "ring.DeleteRingHandler")
	}
	if o.MapsDeleteRuntimeMapEntryHandler == nil {
		unregistered = append(unregistered, "maps.DeleteRuntimeMapEntryHandler")
	}
	if o.ServerDeleteRuntimeServerHandler == nil {
		unregistered = append(unregistered, "server.DeleteRuntimeServerHandler")
	}
	if o.ServerDeleteServerHandler == nil {
		unregistered = append(unregistered, "server.DeleteServerHandler")
	}
	if o.ServerSwitchingRuleDeleteServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.DeleteServerSwitchingRuleHandler")
	}
	if o.ServerTemplateDeleteServerTemplateHandler == nil {
		unregistered = append(unregistered, "server_template.DeleteServerTemplateHandler")
	}
	if o.SitesDeleteSiteHandler == nil {
		unregistered = append(unregistered, "sites.DeleteSiteHandler")
	}
	if o.SpoeDeleteSpoeAgentHandler == nil {
		unregistered = append(unregistered, "spoe.DeleteSpoeAgentHandler")
	}
	if o.SpoeDeleteSpoeFileHandler == nil {
		unregistered = append(unregistered, "spoe.DeleteSpoeFileHandler")
	}
	if o.SpoeDeleteSpoeGroupHandler == nil {
		unregistered = append(unregistered, "spoe.DeleteSpoeGroupHandler")
	}
	if o.SpoeDeleteSpoeMessageHandler == nil {
		unregistered = append(unregistered, "spoe.DeleteSpoeMessageHandler")
	}
	if o.SpoeDeleteSpoeScopeHandler == nil {
		unregistered = append(unregistered, "spoe.DeleteSpoeScopeHandler")
	}
	if o.SpoeTransactionsDeleteSpoeTransactionHandler == nil {
		unregistered = append(unregistered, "spoe_transactions.DeleteSpoeTransactionHandler")
	}
	if o.StickRuleDeleteStickRuleHandler == nil {
		unregistered = append(unregistered, "stick_rule.DeleteStickRuleHandler")
	}
	if o.StorageDeleteStorageGeneralFileHandler == nil {
		unregistered = append(unregistered, "storage.DeleteStorageGeneralFileHandler")
	}
	if o.StorageDeleteStorageMapHandler == nil {
		unregistered = append(unregistered, "storage.DeleteStorageMapHandler")
	}
	if o.StorageDeleteStorageSSLCertificateHandler == nil {
		unregistered = append(unregistered, "storage.DeleteStorageSSLCertificateHandler")
	}
	if o.TCPCheckDeleteTCPCheckHandler == nil {
		unregistered = append(unregistered, "tcp_check.DeleteTCPCheckHandler")
	}
	if o.TCPRequestRuleDeleteTCPRequestRuleHandler == nil {
		unregistered = append(unregistered, "tcp_request_rule.DeleteTCPRequestRuleHandler")
	}
	if o.TCPResponseRuleDeleteTCPResponseRuleHandler == nil {
		unregistered = append(unregistered, "tcp_response_rule.DeleteTCPResponseRuleHandler")
	}
	if o.TableDeleteTableHandler == nil {
		unregistered = append(unregistered, "table.DeleteTableHandler")
	}
	if o.TransactionsDeleteTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.DeleteTransactionHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.UserlistDeleteUserlistHandler == nil {
		unregistered = append(unregistered, "userlist.DeleteUserlistHandler")
	}
	if o.ClusterEditClusterHandler == nil {
		unregistered = append(unregistered, "cluster.EditClusterHandler")
	}
	if o.MailersEditMailersSectionHandler == nil {
		unregistered = append(unregistered, "mailers.EditMailersSectionHandler")
	}
	if o.DiscoveryGetAPIEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetAPIEndpointsHandler")
	}
	if o.ServiceDiscoveryGetAWSRegionHandler == nil {
		unregistered = append(unregistered, "service_discovery.GetAWSRegionHandler")
	}
	if o.ServiceDiscoveryGetAWSRegionsHandler == nil {
		unregistered = append(unregistered, "service_discovery.GetAWSRegionsHandler")
	}
	if o.ACLGetACLHandler == nil {
		unregistered = append(unregistered, "acl.GetACLHandler")
	}
	if o.ACLGetAclsHandler == nil {
		unregistered = append(unregistered, "acl.GetAclsHandler")
	}
	if o.MapsGetAllRuntimeMapFilesHandler == nil {
		unregistered = append(unregistered, "maps.GetAllRuntimeMapFilesHandler")
	}
	if o.SpoeGetAllSpoeFilesHandler == nil {
		unregistered = append(unregistered, "spoe.GetAllSpoeFilesHandler")
	}
	if o.StorageGetAllStorageGeneralFilesHandler == nil {
		unregistered = append(unregistered, "storage.GetAllStorageGeneralFilesHandler")
	}
	if o.StorageGetAllStorageMapFilesHandler == nil {
		unregistered = append(unregistered, "storage.GetAllStorageMapFilesHandler")
	}
	if o.StorageGetAllStorageSSLCertificatesHandler == nil {
		unregistered = append(unregistered, "storage.GetAllStorageSSLCertificatesHandler")
	}
	if o.BackendGetBackendHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendHandler")
	}
	if o.BackendSwitchingRuleGetBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.GetBackendSwitchingRuleHandler")
	}
	if o.BackendSwitchingRuleGetBackendSwitchingRulesHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.GetBackendSwitchingRulesHandler")
	}
	if o.BackendGetBackendsHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendsHandler")
	}
	if o.BindGetBindHandler == nil {
		unregistered = append(unregistered, "bind.GetBindHandler")
	}
	if o.BindGetBindsHandler == nil {
		unregistered = append(unregistered, "bind.GetBindsHandler")
	}
	if o.CacheGetCacheHandler == nil {
		unregistered = append(unregistered, "cache.GetCacheHandler")
	}
	if o.CacheGetCachesHandler == nil {
		unregistered = append(unregistered, "cache.GetCachesHandler")
	}
	if o.ClusterGetClusterHandler == nil {
		unregistered = append(unregistered, "cluster.GetClusterHandler")
	}
	if o.DiscoveryGetConfigurationEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetConfigurationEndpointsHandler")
	}
	if o.ConfigurationGetConfigurationVersionHandler == nil {
		unregistered = append(unregistered, "configuration.GetConfigurationVersionHandler")
	}
	if o.ServiceDiscoveryGetConsulHandler == nil {
		unregistered = append(unregistered, "service_discovery.GetConsulHandler")
	}
	if o.ServiceDiscoveryGetConsulsHandler == nil {
		unregistered = append(unregistered, "service_discovery.GetConsulsHandler")
	}
	if o.DeclareCaptureGetDeclareCaptureHandler == nil {
		unregistered = append(unregistered, "declare_capture.GetDeclareCaptureHandler")
	}
	if o.DeclareCaptureGetDeclareCapturesHandler == nil {
		unregistered = append(unregistered, "declare_capture.GetDeclareCapturesHandler")
	}
	if o.DefaultsGetDefaultsHandler == nil {
		unregistered = append(unregistered, "defaults.GetDefaultsHandler")
	}
	if o.DefaultsGetDefaultsSectionHandler == nil {
		unregistered = append(unregistered, "defaults.GetDefaultsSectionHandler")
	}
	if o.DefaultsGetDefaultsSectionsHandler == nil {
		unregistered = append(unregistered, "defaults.GetDefaultsSectionsHandler")
	}
	if o.DgramBindGetDgramBindHandler == nil {
		unregistered = append(unregistered, "dgram_bind.GetDgramBindHandler")
	}
	if o.DgramBindGetDgramBindsHandler == nil {
		unregistered = append(unregistered, "dgram_bind.GetDgramBindsHandler")
	}
	if o.FCGIAppGetFCGIAppHandler == nil {
		unregistered = append(unregistered, "fcgi_app.GetFCGIAppHandler")
	}
	if o.FCGIAppGetFCGIAppsHandler == nil {
		unregistered = append(unregistered, "fcgi_app.GetFCGIAppsHandler")
	}
	if o.FilterGetFilterHandler == nil {
		unregistered = append(unregistered, "filter.GetFilterHandler")
	}
	if o.FilterGetFiltersHandler == nil {
		unregistered = append(unregistered, "filter.GetFiltersHandler")
	}
	if o.FrontendGetFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.GetFrontendHandler")
	}
	if o.FrontendGetFrontendsHandler == nil {
		unregistered = append(unregistered, "frontend.GetFrontendsHandler")
	}
	if o.GlobalGetGlobalHandler == nil {
		unregistered = append(unregistered, "global.GetGlobalHandler")
	}
	if o.GroupGetGroupHandler == nil {
		unregistered = append(unregistered, "group.GetGroupHandler")
	}
	if o.GroupGetGroupsHandler == nil {
		unregistered = append(unregistered, "group.GetGroupsHandler")
	}
	if o.ConfigurationGetHAProxyConfigurationHandler == nil {
		unregistered = append(unregistered, "configuration.GetHAProxyConfigurationHandler")
	}
	if o.HTTPAfterResponseRuleGetHTTPAfterResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_after_response_rule.GetHTTPAfterResponseRuleHandler")
	}
	if o.HTTPAfterResponseRuleGetHTTPAfterResponseRulesHandler == nil {
		unregistered = append(unregistered, "http_after_response_rule.GetHTTPAfterResponseRulesHandler")
	}
	if o.HTTPCheckGetHTTPCheckHandler == nil {
		unregistered = append(unregistered, "http_check.GetHTTPCheckHandler")
	}
	if o.HTTPCheckGetHTTPChecksHandler == nil {
		unregistered = append(unregistered, "http_check.GetHTTPChecksHandler")
	}
	if o.HTTPErrorRuleGetHTTPErrorRuleHandler == nil {
		unregistered = append(unregistered, "http_error_rule.GetHTTPErrorRuleHandler")
	}
	if o.HTTPErrorRuleGetHTTPErrorRulesHandler == nil {
		unregistered = append(unregistered, "http_error_rule.GetHTTPErrorRulesHandler")
	}
	if o.HTTPErrorsGetHTTPErrorsSectionHandler == nil {
		unregistered = append(unregistered, "http_errors.GetHTTPErrorsSectionHandler")
	}
	if o.HTTPErrorsGetHTTPErrorsSectionsHandler == nil {
		unregistered = append(unregistered, "http_errors.GetHTTPErrorsSectionsHandler")
	}
	if o.HTTPRequestRuleGetHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.GetHTTPRequestRuleHandler")
	}
	if o.HTTPRequestRuleGetHTTPRequestRulesHandler == nil {
		unregistered = append(unregistered, "http_request_rule.GetHTTPRequestRulesHandler")
	}
	if o.HTTPResponseRuleGetHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.GetHTTPResponseRuleHandler")
	}
	if o.HTTPResponseRuleGetHTTPResponseRulesHandler == nil {
		unregistered = append(unregistered, "http_response_rule.GetHTTPResponseRulesHandler")
	}
	if o.DiscoveryGetHaproxyEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetHaproxyEndpointsHandler")
	}
	if o.InformationGetHaproxyProcessInfoHandler == nil {
		unregistered = append(unregistered, "information.GetHaproxyProcessInfoHandler")
	}
	if o.HealthGetHealthHandler == nil {
		unregistered = append(unregistered, "health.GetHealthHandler")
	}
	if o.InformationGetInfoHandler == nil {
		unregistered = append(unregistered, "information.GetInfoHandler")
	}
	if o.LogForwardGetLogForwardHandler == nil {
		unregistered = append(unregistered, "log_forward.GetLogForwardHandler")
	}
	if o.LogForwardGetLogForwardsHandler == nil {
		unregistered = append(unregistered, "log_forward.GetLogForwardsHandler")
	}
	if o.LogTargetGetLogTargetHandler == nil {
		unregistered = append(unregistered, "log_target.GetLogTargetHandler")
	}
	if o.LogTargetGetLogTargetsHandler == nil {
		unregistered = append(unregistered, "log_target.GetLogTargetsHandler")
	}
	if o.MailerEntryGetMailerEntriesHandler == nil {
		unregistered = append(unregistered, "mailer_entry.GetMailerEntriesHandler")
	}
	if o.MailerEntryGetMailerEntryHandler == nil {
		unregistered = append(unregistered, "mailer_entry.GetMailerEntryHandler")
	}
	if o.MailersGetMailersSectionHandler == nil {
		unregistered = append(unregistered, "mailers.GetMailersSectionHandler")
	}
	if o.MailersGetMailersSectionsHandler == nil {
		unregistered = append(unregistered, "mailers.GetMailersSectionsHandler")
	}
	if o.NameserverGetNameserverHandler == nil {
		unregistered = append(unregistered, "nameserver.GetNameserverHandler")
	}
	if o.NameserverGetNameserversHandler == nil {
		unregistered = append(unregistered, "nameserver.GetNameserversHandler")
	}
	if o.MapsGetOneRuntimeMapHandler == nil {
		unregistered = append(unregistered, "maps.GetOneRuntimeMapHandler")
	}
	if o.SpoeGetOneSpoeFileHandler == nil {
		unregistered = append(unregistered, "spoe.GetOneSpoeFileHandler")
	}
	if o.StorageGetOneStorageGeneralFileHandler == nil {
		unregistered = append(unregistered, "storage.GetOneStorageGeneralFileHandler")
	}
	if o.StorageGetOneStorageMapHandler == nil {
		unregistered = append(unregistered, "storage.GetOneStorageMapHandler")
	}
	if o.StorageGetOneStorageSSLCertificateHandler == nil {
		unregistered = append(unregistered, "storage.GetOneStorageSSLCertificateHandler")
	}
	if o.Version3GetOpenapiv3SpecificationHandler == nil {
		unregistered = append(unregistered, "version3.GetOpenapiv3SpecificationHandler")
	}
	if o.PeerEntryGetPeerEntriesHandler == nil {
		unregistered = append(unregistered, "peer_entry.GetPeerEntriesHandler")
	}
	if o.PeerEntryGetPeerEntryHandler == nil {
		unregistered = append(unregistered, "peer_entry.GetPeerEntryHandler")
	}
	if o.PeerGetPeerSectionHandler == nil {
		unregistered = append(unregistered, "peer.GetPeerSectionHandler")
	}
	if o.PeerGetPeerSectionsHandler == nil {
		unregistered = append(unregistered, "peer.GetPeerSectionsHandler")
	}
	if o.ProcessManagerGetProgramHandler == nil {
		unregistered = append(unregistered, "process_manager.GetProgramHandler")
	}
	if o.ProcessManagerGetProgramsHandler == nil {
		unregistered = append(unregistered, "process_manager.GetProgramsHandler")
	}
	if o.ReloadsGetReloadHandler == nil {
		unregistered = append(unregistered, "reloads.GetReloadHandler")
	}
	if o.ReloadsGetReloadsHandler == nil {
		unregistered = append(unregistered, "reloads.GetReloadsHandler")
	}
	if o.ResolverGetResolverHandler == nil {
		unregistered = append(unregistered, "resolver.GetResolverHandler")
	}
	if o.ResolverGetResolversHandler == nil {
		unregistered = append(unregistered, "resolver.GetResolversHandler")
	}
	if o.RingGetRingHandler == nil {
		unregistered = append(unregistered, "ring.GetRingHandler")
	}
	if o.RingGetRingsHandler == nil {
		unregistered = append(unregistered, "ring.GetRingsHandler")
	}
	if o.DiscoveryGetRuntimeEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetRuntimeEndpointsHandler")
	}
	if o.MapsGetRuntimeMapEntryHandler == nil {
		unregistered = append(unregistered, "maps.GetRuntimeMapEntryHandler")
	}
	if o.ServerGetRuntimeServerHandler == nil {
		unregistered = append(unregistered, "server.GetRuntimeServerHandler")
	}
	if o.ServerGetRuntimeServersHandler == nil {
		unregistered = append(unregistered, "server.GetRuntimeServersHandler")
	}
	if o.ServerGetServerHandler == nil {
		unregistered = append(unregistered, "server.GetServerHandler")
	}
	if o.ServerSwitchingRuleGetServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.GetServerSwitchingRuleHandler")
	}
	if o.ServerSwitchingRuleGetServerSwitchingRulesHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.GetServerSwitchingRulesHandler")
	}
	if o.ServerTemplateGetServerTemplateHandler == nil {
		unregistered = append(unregistered, "server_template.GetServerTemplateHandler")
	}
	if o.ServerTemplateGetServerTemplatesHandler == nil {
		unregistered = append(unregistered, "server_template.GetServerTemplatesHandler")
	}
	if o.ServerGetServersHandler == nil {
		unregistered = append(unregistered, "server.GetServersHandler")
	}
	if o.DiscoveryGetServicesEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetServicesEndpointsHandler")
	}
	if o.SitesGetSiteHandler == nil {
		unregistered = append(unregistered, "sites.GetSiteHandler")
	}
	if o.SitesGetSitesHandler == nil {
		unregistered = append(unregistered, "sites.GetSitesHandler")
	}
	if o.SpecificationGetSpecificationHandler == nil {
		unregistered = append(unregistered, "specification.GetSpecificationHandler")
	}
	if o.SpoeGetSpoeAgentHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeAgentHandler")
	}
	if o.SpoeGetSpoeAgentsHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeAgentsHandler")
	}
	if o.SpoeGetSpoeConfigurationVersionHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeConfigurationVersionHandler")
	}
	if o.DiscoveryGetSpoeEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetSpoeEndpointsHandler")
	}
	if o.SpoeGetSpoeGroupHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeGroupHandler")
	}
	if o.SpoeGetSpoeGroupsHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeGroupsHandler")
	}
	if o.SpoeGetSpoeMessageHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeMessageHandler")
	}
	if o.SpoeGetSpoeMessagesHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeMessagesHandler")
	}
	if o.SpoeGetSpoeScopeHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeScopeHandler")
	}
	if o.SpoeGetSpoeScopesHandler == nil {
		unregistered = append(unregistered, "spoe.GetSpoeScopesHandler")
	}
	if o.SpoeTransactionsGetSpoeTransactionHandler == nil {
		unregistered = append(unregistered, "spoe_transactions.GetSpoeTransactionHandler")
	}
	if o.SpoeTransactionsGetSpoeTransactionsHandler == nil {
		unregistered = append(unregistered, "spoe_transactions.GetSpoeTransactionsHandler")
	}
	if o.StatsGetStatsHandler == nil {
		unregistered = append(unregistered, "stats.GetStatsHandler")
	}
	if o.DiscoveryGetStatsEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetStatsEndpointsHandler")
	}
	if o.StickRuleGetStickRuleHandler == nil {
		unregistered = append(unregistered, "stick_rule.GetStickRuleHandler")
	}
	if o.StickRuleGetStickRulesHandler == nil {
		unregistered = append(unregistered, "stick_rule.GetStickRulesHandler")
	}
	if o.StickTableGetStickTableHandler == nil {
		unregistered = append(unregistered, "stick_table.GetStickTableHandler")
	}
	if o.StickTableGetStickTableEntriesHandler == nil {
		unregistered = append(unregistered, "stick_table.GetStickTableEntriesHandler")
	}
	if o.StickTableGetStickTablesHandler == nil {
		unregistered = append(unregistered, "stick_table.GetStickTablesHandler")
	}
	if o.DiscoveryGetStorageEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetStorageEndpointsHandler")
	}
	if o.TCPCheckGetTCPCheckHandler == nil {
		unregistered = append(unregistered, "tcp_check.GetTCPCheckHandler")
	}
	if o.TCPCheckGetTCPChecksHandler == nil {
		unregistered = append(unregistered, "tcp_check.GetTCPChecksHandler")
	}
	if o.TCPRequestRuleGetTCPRequestRuleHandler == nil {
		unregistered = append(unregistered, "tcp_request_rule.GetTCPRequestRuleHandler")
	}
	if o.TCPRequestRuleGetTCPRequestRulesHandler == nil {
		unregistered = append(unregistered, "tcp_request_rule.GetTCPRequestRulesHandler")
	}
	if o.TCPResponseRuleGetTCPResponseRuleHandler == nil {
		unregistered = append(unregistered, "tcp_response_rule.GetTCPResponseRuleHandler")
	}
	if o.TCPResponseRuleGetTCPResponseRulesHandler == nil {
		unregistered = append(unregistered, "tcp_response_rule.GetTCPResponseRulesHandler")
	}
	if o.TableGetTableHandler == nil {
		unregistered = append(unregistered, "table.GetTableHandler")
	}
	if o.TableGetTablesHandler == nil {
		unregistered = append(unregistered, "table.GetTablesHandler")
	}
	if o.TransactionsGetTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.GetTransactionHandler")
	}
	if o.TransactionsGetTransactionsHandler == nil {
		unregistered = append(unregistered, "transactions.GetTransactionsHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.UserlistGetUserlistHandler == nil {
		unregistered = append(unregistered, "userlist.GetUserlistHandler")
	}
	if o.UserlistGetUserlistsHandler == nil {
		unregistered = append(unregistered, "userlist.GetUserlistsHandler")
	}
	if o.UserGetUsersHandler == nil {
		unregistered = append(unregistered, "user.GetUsersHandler")
	}
	if o.ClusterInitiateCertificateRefreshHandler == nil {
		unregistered = append(unregistered, "cluster.InitiateCertificateRefreshHandler")
	}
	if o.ClusterPostClusterHandler == nil {
		unregistered = append(unregistered, "cluster.PostClusterHandler")
	}
	if o.ConfigurationPostHAProxyConfigurationHandler == nil {
		unregistered = append(unregistered, "configuration.PostHAProxyConfigurationHandler")
	}
	if o.ServiceDiscoveryReplaceAWSRegionHandler == nil {
		unregistered = append(unregistered, "service_discovery.ReplaceAWSRegionHandler")
	}
	if o.ACLReplaceACLHandler == nil {
		unregistered = append(unregistered, "acl.ReplaceACLHandler")
	}
	if o.BackendReplaceBackendHandler == nil {
		unregistered = append(unregistered, "backend.ReplaceBackendHandler")
	}
	if o.BackendSwitchingRuleReplaceBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.ReplaceBackendSwitchingRuleHandler")
	}
	if o.BindReplaceBindHandler == nil {
		unregistered = append(unregistered, "bind.ReplaceBindHandler")
	}
	if o.CacheReplaceCacheHandler == nil {
		unregistered = append(unregistered, "cache.ReplaceCacheHandler")
	}
	if o.ServiceDiscoveryReplaceConsulHandler == nil {
		unregistered = append(unregistered, "service_discovery.ReplaceConsulHandler")
	}
	if o.DeclareCaptureReplaceDeclareCaptureHandler == nil {
		unregistered = append(unregistered, "declare_capture.ReplaceDeclareCaptureHandler")
	}
	if o.DefaultsReplaceDefaultsHandler == nil {
		unregistered = append(unregistered, "defaults.ReplaceDefaultsHandler")
	}
	if o.DefaultsReplaceDefaultsSectionHandler == nil {
		unregistered = append(unregistered, "defaults.ReplaceDefaultsSectionHandler")
	}
	if o.DgramBindReplaceDgramBindHandler == nil {
		unregistered = append(unregistered, "dgram_bind.ReplaceDgramBindHandler")
	}
	if o.FCGIAppReplaceFCGIAppHandler == nil {
		unregistered = append(unregistered, "fcgi_app.ReplaceFCGIAppHandler")
	}
	if o.FilterReplaceFilterHandler == nil {
		unregistered = append(unregistered, "filter.ReplaceFilterHandler")
	}
	if o.FrontendReplaceFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.ReplaceFrontendHandler")
	}
	if o.GlobalReplaceGlobalHandler == nil {
		unregistered = append(unregistered, "global.ReplaceGlobalHandler")
	}
	if o.GroupReplaceGroupHandler == nil {
		unregistered = append(unregistered, "group.ReplaceGroupHandler")
	}
	if o.HTTPAfterResponseRuleReplaceHTTPAfterResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_after_response_rule.ReplaceHTTPAfterResponseRuleHandler")
	}
	if o.HTTPCheckReplaceHTTPCheckHandler == nil {
		unregistered = append(unregistered, "http_check.ReplaceHTTPCheckHandler")
	}
	if o.HTTPErrorRuleReplaceHTTPErrorRuleHandler == nil {
		unregistered = append(unregistered, "http_error_rule.ReplaceHTTPErrorRuleHandler")
	}
	if o.HTTPErrorsReplaceHTTPErrorsSectionHandler == nil {
		unregistered = append(unregistered, "http_errors.ReplaceHTTPErrorsSectionHandler")
	}
	if o.HTTPRequestRuleReplaceHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.ReplaceHTTPRequestRuleHandler")
	}
	if o.HTTPResponseRuleReplaceHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.ReplaceHTTPResponseRuleHandler")
	}
	if o.LogForwardReplaceLogForwardHandler == nil {
		unregistered = append(unregistered, "log_forward.ReplaceLogForwardHandler")
	}
	if o.LogTargetReplaceLogTargetHandler == nil {
		unregistered = append(unregistered, "log_target.ReplaceLogTargetHandler")
	}
	if o.MailerEntryReplaceMailerEntryHandler == nil {
		unregistered = append(unregistered, "mailer_entry.ReplaceMailerEntryHandler")
	}
	if o.NameserverReplaceNameserverHandler == nil {
		unregistered = append(unregistered, "nameserver.ReplaceNameserverHandler")
	}
	if o.PeerEntryReplacePeerEntryHandler == nil {
		unregistered = append(unregistered, "peer_entry.ReplacePeerEntryHandler")
	}
	if o.ProcessManagerReplaceProgramHandler == nil {
		unregistered = append(unregistered, "process_manager.ReplaceProgramHandler")
	}
	if o.ResolverReplaceResolverHandler == nil {
		unregistered = append(unregistered, "resolver.ReplaceResolverHandler")
	}
	if o.RingReplaceRingHandler == nil {
		unregistered = append(unregistered, "ring.ReplaceRingHandler")
	}
	if o.MapsReplaceRuntimeMapEntryHandler == nil {
		unregistered = append(unregistered, "maps.ReplaceRuntimeMapEntryHandler")
	}
	if o.ServerReplaceRuntimeServerHandler == nil {
		unregistered = append(unregistered, "server.ReplaceRuntimeServerHandler")
	}
	if o.ServerReplaceServerHandler == nil {
		unregistered = append(unregistered, "server.ReplaceServerHandler")
	}
	if o.ServerSwitchingRuleReplaceServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.ReplaceServerSwitchingRuleHandler")
	}
	if o.ServerTemplateReplaceServerTemplateHandler == nil {
		unregistered = append(unregistered, "server_template.ReplaceServerTemplateHandler")
	}
	if o.SitesReplaceSiteHandler == nil {
		unregistered = append(unregistered, "sites.ReplaceSiteHandler")
	}
	if o.SpoeReplaceSpoeAgentHandler == nil {
		unregistered = append(unregistered, "spoe.ReplaceSpoeAgentHandler")
	}
	if o.SpoeReplaceSpoeGroupHandler == nil {
		unregistered = append(unregistered, "spoe.ReplaceSpoeGroupHandler")
	}
	if o.SpoeReplaceSpoeMessageHandler == nil {
		unregistered = append(unregistered, "spoe.ReplaceSpoeMessageHandler")
	}
	if o.StickRuleReplaceStickRuleHandler == nil {
		unregistered = append(unregistered, "stick_rule.ReplaceStickRuleHandler")
	}
	if o.StorageReplaceStorageGeneralFileHandler == nil {
		unregistered = append(unregistered, "storage.ReplaceStorageGeneralFileHandler")
	}
	if o.StorageReplaceStorageMapFileHandler == nil {
		unregistered = append(unregistered, "storage.ReplaceStorageMapFileHandler")
	}
	if o.StorageReplaceStorageSSLCertificateHandler == nil {
		unregistered = append(unregistered, "storage.ReplaceStorageSSLCertificateHandler")
	}
	if o.TCPCheckReplaceTCPCheckHandler == nil {
		unregistered = append(unregistered, "tcp_check.ReplaceTCPCheckHandler")
	}
	if o.TCPRequestRuleReplaceTCPRequestRuleHandler == nil {
		unregistered = append(unregistered, "tcp_request_rule.ReplaceTCPRequestRuleHandler")
	}
	if o.TCPResponseRuleReplaceTCPResponseRuleHandler == nil {
		unregistered = append(unregistered, "tcp_response_rule.ReplaceTCPResponseRuleHandler")
	}
	if o.TableReplaceTableHandler == nil {
		unregistered = append(unregistered, "table.ReplaceTableHandler")
	}
	if o.UserReplaceUserHandler == nil {
		unregistered = append(unregistered, "user.ReplaceUserHandler")
	}
	if o.StickTableSetStickTableEntriesHandler == nil {
		unregistered = append(unregistered, "stick_table.SetStickTableEntriesHandler")
	}
	if o.MapsShowRuntimeMapHandler == nil {
		unregistered = append(unregistered, "maps.ShowRuntimeMapHandler")
	}
	if o.SpoeTransactionsStartSpoeTransactionHandler == nil {
		unregistered = append(unregistered, "spoe_transactions.StartSpoeTransactionHandler")
	}
	if o.TransactionsStartTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.StartTransactionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DataPlaneAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DataPlaneAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "basic_auth":
			result[name] = o.BasicAuthenticator(o.BasicAuthAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *DataPlaneAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DataPlaneAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		case "text/plain":
			result["text/plain"] = o.TxtConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DataPlaneAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DataPlaneAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the data plane API
func (o *DataPlaneAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DataPlaneAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/runtime/acl_file_entries/{id}"] = acl_runtime.NewDeleteServicesHaproxyRuntimeACLFileEntriesID(o.context, o.ACLRuntimeDeleteServicesHaproxyRuntimeACLFileEntriesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/acl_file_entries"] = acl_runtime.NewGetServicesHaproxyRuntimeACLFileEntries(o.context, o.ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/acl_file_entries/{id}"] = acl_runtime.NewGetServicesHaproxyRuntimeACLFileEntriesID(o.context, o.ACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/acls"] = acl_runtime.NewGetServicesHaproxyRuntimeAcls(o.context, o.ACLRuntimeGetServicesHaproxyRuntimeAclsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/acls/{id}"] = acl_runtime.NewGetServicesHaproxyRuntimeAclsID(o.context, o.ACLRuntimeGetServicesHaproxyRuntimeAclsIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/runtime/acl_file_entries"] = acl_runtime.NewPostServicesHaproxyRuntimeACLFileEntries(o.context, o.ACLRuntimePostServicesHaproxyRuntimeACLFileEntriesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/runtime/maps_entries"] = maps.NewAddMapEntry(o.context, o.MapsAddMapEntryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/runtime/acl_file_entries"] = acl_runtime.NewAddPayloadRuntimeACL(o.context, o.ACLRuntimeAddPayloadRuntimeACLHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/runtime/maps/{name}"] = maps.NewAddPayloadRuntimeMap(o.context, o.MapsAddPayloadRuntimeMapHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/runtime/servers"] = serverops.NewAddRuntimeServer(o.context, o.ServerAddRuntimeServerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/runtime/maps/{name}"] = maps.NewClearRuntimeMap(o.context, o.MapsClearRuntimeMapHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/spoe_transactions/{id}"] = spoe_transactions.NewCommitSpoeTransaction(o.context, o.SpoeTransactionsCommitSpoeTransactionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/transactions/{id}"] = transactions.NewCommitTransaction(o.context, o.TransactionsCommitTransactionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_discovery/aws"] = service_discovery.NewCreateAWSRegion(o.context, o.ServiceDiscoveryCreateAWSRegionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/acls"] = acl.NewCreateACL(o.context, o.ACLCreateACLHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/backends"] = backend.NewCreateBackend(o.context, o.BackendCreateBackendHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/backend_switching_rules"] = backend_switching_rule.NewCreateBackendSwitchingRule(o.context, o.BackendSwitchingRuleCreateBackendSwitchingRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/binds"] = bind.NewCreateBind(o.context, o.BindCreateBindHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/caches"] = cache.NewCreateCache(o.context, o.CacheCreateCacheHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_discovery/consul"] = service_discovery.NewCreateConsul(o.context, o.ServiceDiscoveryCreateConsulHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/captures"] = declare_capture.NewCreateDeclareCapture(o.context, o.DeclareCaptureCreateDeclareCaptureHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/named_defaults"] = defaults.NewCreateDefaultsSection(o.context, o.DefaultsCreateDefaultsSectionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/dgram_binds"] = dgram_bind.NewCreateDgramBind(o.context, o.DgramBindCreateDgramBindHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/fcgi_apps"] = fcgi_app.NewCreateFCGIApp(o.context, o.FCGIAppCreateFCGIAppHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/filters"] = filter.NewCreateFilter(o.context, o.FilterCreateFilterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/frontends"] = frontend.NewCreateFrontend(o.context, o.FrontendCreateFrontendHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/groups"] = group.NewCreateGroup(o.context, o.GroupCreateGroupHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_after_response_rules"] = http_after_response_rule.NewCreateHTTPAfterResponseRule(o.context, o.HTTPAfterResponseRuleCreateHTTPAfterResponseRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_checks"] = http_check.NewCreateHTTPCheck(o.context, o.HTTPCheckCreateHTTPCheckHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_error_rules"] = http_error_rule.NewCreateHTTPErrorRule(o.context, o.HTTPErrorRuleCreateHTTPErrorRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_errors_sections"] = http_errors.NewCreateHTTPErrorsSection(o.context, o.HTTPErrorsCreateHTTPErrorsSectionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_request_rules"] = http_request_rule.NewCreateHTTPRequestRule(o.context, o.HTTPRequestRuleCreateHTTPRequestRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_response_rules"] = http_response_rule.NewCreateHTTPResponseRule(o.context, o.HTTPResponseRuleCreateHTTPResponseRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/log_forwards"] = log_forward.NewCreateLogForward(o.context, o.LogForwardCreateLogForwardHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/log_targets"] = log_target.NewCreateLogTarget(o.context, o.LogTargetCreateLogTargetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/mailer_entries"] = mailer_entry.NewCreateMailerEntry(o.context, o.MailerEntryCreateMailerEntryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/mailers_section"] = mailers.NewCreateMailersSection(o.context, o.MailersCreateMailersSectionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/nameservers"] = nameserver.NewCreateNameserver(o.context, o.NameserverCreateNameserverHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/peer_section"] = peer.NewCreatePeer(o.context, o.PeerCreatePeerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/peer_entries"] = peer_entry.NewCreatePeerEntry(o.context, o.PeerEntryCreatePeerEntryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/programs"] = process_manager.NewCreateProgram(o.context, o.ProcessManagerCreateProgramHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/resolvers"] = resolver.NewCreateResolver(o.context, o.ResolverCreateResolverHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/rings"] = ring.NewCreateRing(o.context, o.RingCreateRingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/servers"] = serverops.NewCreateServer(o.context, o.ServerCreateServerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/server_switching_rules"] = server_switching_rule.NewCreateServerSwitchingRule(o.context, o.ServerSwitchingRuleCreateServerSwitchingRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/server_templates"] = server_template.NewCreateServerTemplate(o.context, o.ServerTemplateCreateServerTemplateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/sites"] = sites.NewCreateSite(o.context, o.SitesCreateSiteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/spoe/spoe_files"] = spoe.NewCreateSpoe(o.context, o.SpoeCreateSpoeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/spoe/spoe_agents"] = spoe.NewCreateSpoeAgent(o.context, o.SpoeCreateSpoeAgentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/spoe/spoe_groups"] = spoe.NewCreateSpoeGroup(o.context, o.SpoeCreateSpoeGroupHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/spoe/spoe_messages"] = spoe.NewCreateSpoeMessage(o.context, o.SpoeCreateSpoeMessageHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/spoe/spoe_scopes"] = spoe.NewCreateSpoeScope(o.context, o.SpoeCreateSpoeScopeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/stick_rules"] = stick_rule.NewCreateStickRule(o.context, o.StickRuleCreateStickRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/storage/general"] = storage.NewCreateStorageGeneralFile(o.context, o.StorageCreateStorageGeneralFileHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/storage/maps"] = storage.NewCreateStorageMapFile(o.context, o.StorageCreateStorageMapFileHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/storage/ssl_certificates"] = storage.NewCreateStorageSSLCertificate(o.context, o.StorageCreateStorageSSLCertificateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/tcp_checks"] = tcp_check.NewCreateTCPCheck(o.context, o.TCPCheckCreateTCPCheckHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/tcp_request_rules"] = tcp_request_rule.NewCreateTCPRequestRule(o.context, o.TCPRequestRuleCreateTCPRequestRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/tcp_response_rules"] = tcp_response_rule.NewCreateTCPResponseRule(o.context, o.TCPResponseRuleCreateTCPResponseRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/tables"] = table.NewCreateTable(o.context, o.TableCreateTableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/users"] = user.NewCreateUser(o.context, o.UserCreateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/userlists"] = userlist.NewCreateUserlist(o.context, o.UserlistCreateUserlistHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_discovery/aws/{id}"] = service_discovery.NewDeleteAWSRegion(o.context, o.ServiceDiscoveryDeleteAWSRegionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/acls/{index}"] = acl.NewDeleteACL(o.context, o.ACLDeleteACLHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/backends/{name}"] = backend.NewDeleteBackend(o.context, o.BackendDeleteBackendHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/backend_switching_rules/{index}"] = backend_switching_rule.NewDeleteBackendSwitchingRule(o.context, o.BackendSwitchingRuleDeleteBackendSwitchingRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/binds/{name}"] = bind.NewDeleteBind(o.context, o.BindDeleteBindHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/caches/{name}"] = cache.NewDeleteCache(o.context, o.CacheDeleteCacheHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cluster"] = cluster.NewDeleteCluster(o.context, o.ClusterDeleteClusterHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_discovery/consul/{id}"] = service_discovery.NewDeleteConsul(o.context, o.ServiceDiscoveryDeleteConsulHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/captures/{index}"] = declare_capture.NewDeleteDeclareCapture(o.context, o.DeclareCaptureDeleteDeclareCaptureHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/named_defaults/{name}"] = defaults.NewDeleteDefaultsSection(o.context, o.DefaultsDeleteDefaultsSectionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/dgram_binds/{name}"] = dgram_bind.NewDeleteDgramBind(o.context, o.DgramBindDeleteDgramBindHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/fcgi_apps/{name}"] = fcgi_app.NewDeleteFCGIApp(o.context, o.FCGIAppDeleteFCGIAppHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/filters/{index}"] = filter.NewDeleteFilter(o.context, o.FilterDeleteFilterHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/frontends/{name}"] = frontend.NewDeleteFrontend(o.context, o.FrontendDeleteFrontendHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/groups/{name}"] = group.NewDeleteGroup(o.context, o.GroupDeleteGroupHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_after_response_rules/{index}"] = http_after_response_rule.NewDeleteHTTPAfterResponseRule(o.context, o.HTTPAfterResponseRuleDeleteHTTPAfterResponseRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_checks/{index}"] = http_check.NewDeleteHTTPCheck(o.context, o.HTTPCheckDeleteHTTPCheckHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_error_rules/{index}"] = http_error_rule.NewDeleteHTTPErrorRule(o.context, o.HTTPErrorRuleDeleteHTTPErrorRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_errors_sections/{name}"] = http_errors.NewDeleteHTTPErrorsSection(o.context, o.HTTPErrorsDeleteHTTPErrorsSectionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_request_rules/{index}"] = http_request_rule.NewDeleteHTTPRequestRule(o.context, o.HTTPRequestRuleDeleteHTTPRequestRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_response_rules/{index}"] = http_response_rule.NewDeleteHTTPResponseRule(o.context, o.HTTPResponseRuleDeleteHTTPResponseRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/log_forwards/{name}"] = log_forward.NewDeleteLogForward(o.context, o.LogForwardDeleteLogForwardHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/log_targets/{index}"] = log_target.NewDeleteLogTarget(o.context, o.LogTargetDeleteLogTargetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/mailer_entries/{name}"] = mailer_entry.NewDeleteMailerEntry(o.context, o.MailerEntryDeleteMailerEntryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/mailers_section/{name}"] = mailers.NewDeleteMailersSection(o.context, o.MailersDeleteMailersSectionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/nameservers/{name}"] = nameserver.NewDeleteNameserver(o.context, o.NameserverDeleteNameserverHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/peer_section/{name}"] = peer.NewDeletePeer(o.context, o.PeerDeletePeerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/peer_entries/{name}"] = peer_entry.NewDeletePeerEntry(o.context, o.PeerEntryDeletePeerEntryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/programs/{name}"] = process_manager.NewDeleteProgram(o.context, o.ProcessManagerDeleteProgramHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/resolvers/{name}"] = resolver.NewDeleteResolver(o.context, o.ResolverDeleteResolverHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/rings/{name}"] = ring.NewDeleteRing(o.context, o.RingDeleteRingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/runtime/maps_entries/{id}"] = maps.NewDeleteRuntimeMapEntry(o.context, o.MapsDeleteRuntimeMapEntryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/runtime/servers/{name}"] = serverops.NewDeleteRuntimeServer(o.context, o.ServerDeleteRuntimeServerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/servers/{name}"] = serverops.NewDeleteServer(o.context, o.ServerDeleteServerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/server_switching_rules/{index}"] = server_switching_rule.NewDeleteServerSwitchingRule(o.context, o.ServerSwitchingRuleDeleteServerSwitchingRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/server_templates/{prefix}"] = server_template.NewDeleteServerTemplate(o.context, o.ServerTemplateDeleteServerTemplateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/sites/{name}"] = sites.NewDeleteSite(o.context, o.SitesDeleteSiteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/spoe/spoe_agents/{name}"] = spoe.NewDeleteSpoeAgent(o.context, o.SpoeDeleteSpoeAgentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/spoe/spoe_files/{name}"] = spoe.NewDeleteSpoeFile(o.context, o.SpoeDeleteSpoeFileHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/spoe/spoe_groups/{name}"] = spoe.NewDeleteSpoeGroup(o.context, o.SpoeDeleteSpoeGroupHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/spoe/spoe_messages/{name}"] = spoe.NewDeleteSpoeMessage(o.context, o.SpoeDeleteSpoeMessageHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/spoe/spoe_scopes/{name}"] = spoe.NewDeleteSpoeScope(o.context, o.SpoeDeleteSpoeScopeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/spoe_transactions/{id}"] = spoe_transactions.NewDeleteSpoeTransaction(o.context, o.SpoeTransactionsDeleteSpoeTransactionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/stick_rules/{index}"] = stick_rule.NewDeleteStickRule(o.context, o.StickRuleDeleteStickRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/storage/general/{name}"] = storage.NewDeleteStorageGeneralFile(o.context, o.StorageDeleteStorageGeneralFileHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/storage/maps/{name}"] = storage.NewDeleteStorageMap(o.context, o.StorageDeleteStorageMapHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/storage/ssl_certificates/{name}"] = storage.NewDeleteStorageSSLCertificate(o.context, o.StorageDeleteStorageSSLCertificateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/tcp_checks/{index}"] = tcp_check.NewDeleteTCPCheck(o.context, o.TCPCheckDeleteTCPCheckHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/tcp_request_rules/{index}"] = tcp_request_rule.NewDeleteTCPRequestRule(o.context, o.TCPRequestRuleDeleteTCPRequestRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/tcp_response_rules/{index}"] = tcp_response_rule.NewDeleteTCPResponseRule(o.context, o.TCPResponseRuleDeleteTCPResponseRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/tables/{name}"] = table.NewDeleteTable(o.context, o.TableDeleteTableHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/transactions/{id}"] = transactions.NewDeleteTransaction(o.context, o.TransactionsDeleteTransactionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/users/{username}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/userlists/{name}"] = userlist.NewDeleteUserlist(o.context, o.UserlistDeleteUserlistHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cluster"] = cluster.NewEditCluster(o.context, o.ClusterEditClusterHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/mailers_section/{name}"] = mailers.NewEditMailersSection(o.context, o.MailersEditMailersSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = discovery.NewGetAPIEndpoints(o.context, o.DiscoveryGetAPIEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_discovery/aws/{id}"] = service_discovery.NewGetAWSRegion(o.context, o.ServiceDiscoveryGetAWSRegionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_discovery/aws"] = service_discovery.NewGetAWSRegions(o.context, o.ServiceDiscoveryGetAWSRegionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/acls/{index}"] = acl.NewGetACL(o.context, o.ACLGetACLHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/acls"] = acl.NewGetAcls(o.context, o.ACLGetAclsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/maps"] = maps.NewGetAllRuntimeMapFiles(o.context, o.MapsGetAllRuntimeMapFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_files"] = spoe.NewGetAllSpoeFiles(o.context, o.SpoeGetAllSpoeFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage/general"] = storage.NewGetAllStorageGeneralFiles(o.context, o.StorageGetAllStorageGeneralFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage/maps"] = storage.NewGetAllStorageMapFiles(o.context, o.StorageGetAllStorageMapFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage/ssl_certificates"] = storage.NewGetAllStorageSSLCertificates(o.context, o.StorageGetAllStorageSSLCertificatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backends/{name}"] = backend.NewGetBackend(o.context, o.BackendGetBackendHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backend_switching_rules/{index}"] = backend_switching_rule.NewGetBackendSwitchingRule(o.context, o.BackendSwitchingRuleGetBackendSwitchingRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backend_switching_rules"] = backend_switching_rule.NewGetBackendSwitchingRules(o.context, o.BackendSwitchingRuleGetBackendSwitchingRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backends"] = backend.NewGetBackends(o.context, o.BackendGetBackendsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/binds/{name}"] = bind.NewGetBind(o.context, o.BindGetBindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/binds"] = bind.NewGetBinds(o.context, o.BindGetBindsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/caches/{name}"] = cache.NewGetCache(o.context, o.CacheGetCacheHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/caches"] = cache.NewGetCaches(o.context, o.CacheGetCachesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cluster"] = cluster.NewGetCluster(o.context, o.ClusterGetClusterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration"] = discovery.NewGetConfigurationEndpoints(o.context, o.DiscoveryGetConfigurationEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/version"] = configuration.NewGetConfigurationVersion(o.context, o.ConfigurationGetConfigurationVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_discovery/consul/{id}"] = service_discovery.NewGetConsul(o.context, o.ServiceDiscoveryGetConsulHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_discovery/consul"] = service_discovery.NewGetConsuls(o.context, o.ServiceDiscoveryGetConsulsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/captures/{index}"] = declare_capture.NewGetDeclareCapture(o.context, o.DeclareCaptureGetDeclareCaptureHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/captures"] = declare_capture.NewGetDeclareCaptures(o.context, o.DeclareCaptureGetDeclareCapturesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/defaults"] = defaults.NewGetDefaults(o.context, o.DefaultsGetDefaultsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/named_defaults/{name}"] = defaults.NewGetDefaultsSection(o.context, o.DefaultsGetDefaultsSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/named_defaults"] = defaults.NewGetDefaultsSections(o.context, o.DefaultsGetDefaultsSectionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/dgram_binds/{name}"] = dgram_bind.NewGetDgramBind(o.context, o.DgramBindGetDgramBindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/dgram_binds"] = dgram_bind.NewGetDgramBinds(o.context, o.DgramBindGetDgramBindsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/fcgi_apps/{name}"] = fcgi_app.NewGetFCGIApp(o.context, o.FCGIAppGetFCGIAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/fcgi_apps"] = fcgi_app.NewGetFCGIApps(o.context, o.FCGIAppGetFCGIAppsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/filters/{index}"] = filter.NewGetFilter(o.context, o.FilterGetFilterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/filters"] = filter.NewGetFilters(o.context, o.FilterGetFiltersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/frontends/{name}"] = frontend.NewGetFrontend(o.context, o.FrontendGetFrontendHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/frontends"] = frontend.NewGetFrontends(o.context, o.FrontendGetFrontendsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/global"] = global.NewGetGlobal(o.context, o.GlobalGetGlobalHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/groups/{name}"] = group.NewGetGroup(o.context, o.GroupGetGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/groups"] = group.NewGetGroups(o.context, o.GroupGetGroupsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/raw"] = configuration.NewGetHAProxyConfiguration(o.context, o.ConfigurationGetHAProxyConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_after_response_rules/{index}"] = http_after_response_rule.NewGetHTTPAfterResponseRule(o.context, o.HTTPAfterResponseRuleGetHTTPAfterResponseRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_after_response_rules"] = http_after_response_rule.NewGetHTTPAfterResponseRules(o.context, o.HTTPAfterResponseRuleGetHTTPAfterResponseRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_checks/{index}"] = http_check.NewGetHTTPCheck(o.context, o.HTTPCheckGetHTTPCheckHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_checks"] = http_check.NewGetHTTPChecks(o.context, o.HTTPCheckGetHTTPChecksHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_error_rules/{index}"] = http_error_rule.NewGetHTTPErrorRule(o.context, o.HTTPErrorRuleGetHTTPErrorRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_error_rules"] = http_error_rule.NewGetHTTPErrorRules(o.context, o.HTTPErrorRuleGetHTTPErrorRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_errors_sections/{name}"] = http_errors.NewGetHTTPErrorsSection(o.context, o.HTTPErrorsGetHTTPErrorsSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_errors_sections"] = http_errors.NewGetHTTPErrorsSections(o.context, o.HTTPErrorsGetHTTPErrorsSectionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_request_rules/{index}"] = http_request_rule.NewGetHTTPRequestRule(o.context, o.HTTPRequestRuleGetHTTPRequestRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_request_rules"] = http_request_rule.NewGetHTTPRequestRules(o.context, o.HTTPRequestRuleGetHTTPRequestRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_response_rules/{index}"] = http_response_rule.NewGetHTTPResponseRule(o.context, o.HTTPResponseRuleGetHTTPResponseRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_response_rules"] = http_response_rule.NewGetHTTPResponseRules(o.context, o.HTTPResponseRuleGetHTTPResponseRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy"] = discovery.NewGetHaproxyEndpoints(o.context, o.DiscoveryGetHaproxyEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/info"] = information.NewGetHaproxyProcessInfo(o.context, o.InformationGetHaproxyProcessInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health"] = health.NewGetHealth(o.context, o.HealthGetHealthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info"] = information.NewGetInfo(o.context, o.InformationGetInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/log_forwards/{name}"] = log_forward.NewGetLogForward(o.context, o.LogForwardGetLogForwardHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/log_forwards"] = log_forward.NewGetLogForwards(o.context, o.LogForwardGetLogForwardsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/log_targets/{index}"] = log_target.NewGetLogTarget(o.context, o.LogTargetGetLogTargetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/log_targets"] = log_target.NewGetLogTargets(o.context, o.LogTargetGetLogTargetsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/mailer_entries"] = mailer_entry.NewGetMailerEntries(o.context, o.MailerEntryGetMailerEntriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/mailer_entries/{name}"] = mailer_entry.NewGetMailerEntry(o.context, o.MailerEntryGetMailerEntryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/mailers_section/{name}"] = mailers.NewGetMailersSection(o.context, o.MailersGetMailersSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/mailers_section"] = mailers.NewGetMailersSections(o.context, o.MailersGetMailersSectionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/nameservers/{name}"] = nameserver.NewGetNameserver(o.context, o.NameserverGetNameserverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/nameservers"] = nameserver.NewGetNameservers(o.context, o.NameserverGetNameserversHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/maps/{name}"] = maps.NewGetOneRuntimeMap(o.context, o.MapsGetOneRuntimeMapHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_files/{name}"] = spoe.NewGetOneSpoeFile(o.context, o.SpoeGetOneSpoeFileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage/general/{name}"] = storage.NewGetOneStorageGeneralFile(o.context, o.StorageGetOneStorageGeneralFileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage/maps/{name}"] = storage.NewGetOneStorageMap(o.context, o.StorageGetOneStorageMapHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage/ssl_certificates/{name}"] = storage.NewGetOneStorageSSLCertificate(o.context, o.StorageGetOneStorageSSLCertificateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/specification_openapiv3"] = version3.NewGetOpenapiv3Specification(o.context, o.Version3GetOpenapiv3SpecificationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/peer_entries"] = peer_entry.NewGetPeerEntries(o.context, o.PeerEntryGetPeerEntriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/peer_entries/{name}"] = peer_entry.NewGetPeerEntry(o.context, o.PeerEntryGetPeerEntryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/peer_section/{name}"] = peer.NewGetPeerSection(o.context, o.PeerGetPeerSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/peer_section"] = peer.NewGetPeerSections(o.context, o.PeerGetPeerSectionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/programs/{name}"] = process_manager.NewGetProgram(o.context, o.ProcessManagerGetProgramHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/programs"] = process_manager.NewGetPrograms(o.context, o.ProcessManagerGetProgramsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/reloads/{id}"] = reloads.NewGetReload(o.context, o.ReloadsGetReloadHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/reloads"] = reloads.NewGetReloads(o.context, o.ReloadsGetReloadsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/resolvers/{name}"] = resolver.NewGetResolver(o.context, o.ResolverGetResolverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/resolvers"] = resolver.NewGetResolvers(o.context, o.ResolverGetResolversHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/rings/{name}"] = ring.NewGetRing(o.context, o.RingGetRingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/rings"] = ring.NewGetRings(o.context, o.RingGetRingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime"] = discovery.NewGetRuntimeEndpoints(o.context, o.DiscoveryGetRuntimeEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/maps_entries/{id}"] = maps.NewGetRuntimeMapEntry(o.context, o.MapsGetRuntimeMapEntryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/servers/{name}"] = serverops.NewGetRuntimeServer(o.context, o.ServerGetRuntimeServerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/servers"] = serverops.NewGetRuntimeServers(o.context, o.ServerGetRuntimeServersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/servers/{name}"] = serverops.NewGetServer(o.context, o.ServerGetServerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/server_switching_rules/{index}"] = server_switching_rule.NewGetServerSwitchingRule(o.context, o.ServerSwitchingRuleGetServerSwitchingRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/server_switching_rules"] = server_switching_rule.NewGetServerSwitchingRules(o.context, o.ServerSwitchingRuleGetServerSwitchingRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/server_templates/{prefix}"] = server_template.NewGetServerTemplate(o.context, o.ServerTemplateGetServerTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/server_templates"] = server_template.NewGetServerTemplates(o.context, o.ServerTemplateGetServerTemplatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/servers"] = serverops.NewGetServers(o.context, o.ServerGetServersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services"] = discovery.NewGetServicesEndpoints(o.context, o.DiscoveryGetServicesEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/sites/{name}"] = sites.NewGetSite(o.context, o.SitesGetSiteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/sites"] = sites.NewGetSites(o.context, o.SitesGetSitesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/specification"] = specification.NewGetSpecification(o.context, o.SpecificationGetSpecificationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_agents/{name}"] = spoe.NewGetSpoeAgent(o.context, o.SpoeGetSpoeAgentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_agents"] = spoe.NewGetSpoeAgents(o.context, o.SpoeGetSpoeAgentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/version"] = spoe.NewGetSpoeConfigurationVersion(o.context, o.SpoeGetSpoeConfigurationVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe"] = discovery.NewGetSpoeEndpoints(o.context, o.DiscoveryGetSpoeEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_groups/{name}"] = spoe.NewGetSpoeGroup(o.context, o.SpoeGetSpoeGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_groups"] = spoe.NewGetSpoeGroups(o.context, o.SpoeGetSpoeGroupsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_messages/{name}"] = spoe.NewGetSpoeMessage(o.context, o.SpoeGetSpoeMessageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_messages"] = spoe.NewGetSpoeMessages(o.context, o.SpoeGetSpoeMessagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_scopes/{name}"] = spoe.NewGetSpoeScope(o.context, o.SpoeGetSpoeScopeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe/spoe_scopes"] = spoe.NewGetSpoeScopes(o.context, o.SpoeGetSpoeScopesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe_transactions/{id}"] = spoe_transactions.NewGetSpoeTransaction(o.context, o.SpoeTransactionsGetSpoeTransactionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/spoe_transactions"] = spoe_transactions.NewGetSpoeTransactions(o.context, o.SpoeTransactionsGetSpoeTransactionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/stats/native"] = stats.NewGetStats(o.context, o.StatsGetStatsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/stats"] = discovery.NewGetStatsEndpoints(o.context, o.DiscoveryGetStatsEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/stick_rules/{index}"] = stick_rule.NewGetStickRule(o.context, o.StickRuleGetStickRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/stick_rules"] = stick_rule.NewGetStickRules(o.context, o.StickRuleGetStickRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/stick_tables/{name}"] = stick_table.NewGetStickTable(o.context, o.StickTableGetStickTableHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/stick_table_entries"] = stick_table.NewGetStickTableEntries(o.context, o.StickTableGetStickTableEntriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/stick_tables"] = stick_table.NewGetStickTables(o.context, o.StickTableGetStickTablesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/storage"] = discovery.NewGetStorageEndpoints(o.context, o.DiscoveryGetStorageEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_checks/{index}"] = tcp_check.NewGetTCPCheck(o.context, o.TCPCheckGetTCPCheckHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_checks"] = tcp_check.NewGetTCPChecks(o.context, o.TCPCheckGetTCPChecksHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_request_rules/{index}"] = tcp_request_rule.NewGetTCPRequestRule(o.context, o.TCPRequestRuleGetTCPRequestRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_request_rules"] = tcp_request_rule.NewGetTCPRequestRules(o.context, o.TCPRequestRuleGetTCPRequestRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_response_rules/{index}"] = tcp_response_rule.NewGetTCPResponseRule(o.context, o.TCPResponseRuleGetTCPResponseRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_response_rules"] = tcp_response_rule.NewGetTCPResponseRules(o.context, o.TCPResponseRuleGetTCPResponseRulesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tables/{name}"] = table.NewGetTable(o.context, o.TableGetTableHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tables"] = table.NewGetTables(o.context, o.TableGetTablesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/transactions/{id}"] = transactions.NewGetTransaction(o.context, o.TransactionsGetTransactionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/transactions"] = transactions.NewGetTransactions(o.context, o.TransactionsGetTransactionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/users/{username}"] = user.NewGetUser(o.context, o.UserGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/userlists/{name}"] = userlist.NewGetUserlist(o.context, o.UserlistGetUserlistHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/userlists"] = userlist.NewGetUserlists(o.context, o.UserlistGetUserlistsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/users"] = user.NewGetUsers(o.context, o.UserGetUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cluster/certificate"] = cluster.NewInitiateCertificateRefresh(o.context, o.ClusterInitiateCertificateRefreshHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cluster"] = cluster.NewPostCluster(o.context, o.ClusterPostClusterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/raw"] = configuration.NewPostHAProxyConfiguration(o.context, o.ConfigurationPostHAProxyConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_discovery/aws/{id}"] = service_discovery.NewReplaceAWSRegion(o.context, o.ServiceDiscoveryReplaceAWSRegionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/acls/{index}"] = acl.NewReplaceACL(o.context, o.ACLReplaceACLHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/backends/{name}"] = backend.NewReplaceBackend(o.context, o.BackendReplaceBackendHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/backend_switching_rules/{index}"] = backend_switching_rule.NewReplaceBackendSwitchingRule(o.context, o.BackendSwitchingRuleReplaceBackendSwitchingRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/binds/{name}"] = bind.NewReplaceBind(o.context, o.BindReplaceBindHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/caches/{name}"] = cache.NewReplaceCache(o.context, o.CacheReplaceCacheHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_discovery/consul/{id}"] = service_discovery.NewReplaceConsul(o.context, o.ServiceDiscoveryReplaceConsulHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/captures/{index}"] = declare_capture.NewReplaceDeclareCapture(o.context, o.DeclareCaptureReplaceDeclareCaptureHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/defaults"] = defaults.NewReplaceDefaults(o.context, o.DefaultsReplaceDefaultsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/named_defaults/{name}"] = defaults.NewReplaceDefaultsSection(o.context, o.DefaultsReplaceDefaultsSectionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/dgram_binds/{name}"] = dgram_bind.NewReplaceDgramBind(o.context, o.DgramBindReplaceDgramBindHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/fcgi_apps/{name}"] = fcgi_app.NewReplaceFCGIApp(o.context, o.FCGIAppReplaceFCGIAppHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/filters/{index}"] = filter.NewReplaceFilter(o.context, o.FilterReplaceFilterHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/frontends/{name}"] = frontend.NewReplaceFrontend(o.context, o.FrontendReplaceFrontendHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/global"] = global.NewReplaceGlobal(o.context, o.GlobalReplaceGlobalHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/groups/{name}"] = group.NewReplaceGroup(o.context, o.GroupReplaceGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_after_response_rules/{index}"] = http_after_response_rule.NewReplaceHTTPAfterResponseRule(o.context, o.HTTPAfterResponseRuleReplaceHTTPAfterResponseRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_checks/{index}"] = http_check.NewReplaceHTTPCheck(o.context, o.HTTPCheckReplaceHTTPCheckHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_error_rules/{index}"] = http_error_rule.NewReplaceHTTPErrorRule(o.context, o.HTTPErrorRuleReplaceHTTPErrorRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_errors_sections/{name}"] = http_errors.NewReplaceHTTPErrorsSection(o.context, o.HTTPErrorsReplaceHTTPErrorsSectionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_request_rules/{index}"] = http_request_rule.NewReplaceHTTPRequestRule(o.context, o.HTTPRequestRuleReplaceHTTPRequestRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_response_rules/{index}"] = http_response_rule.NewReplaceHTTPResponseRule(o.context, o.HTTPResponseRuleReplaceHTTPResponseRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/log_forwards/{name}"] = log_forward.NewReplaceLogForward(o.context, o.LogForwardReplaceLogForwardHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/log_targets/{index}"] = log_target.NewReplaceLogTarget(o.context, o.LogTargetReplaceLogTargetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/mailer_entries/{name}"] = mailer_entry.NewReplaceMailerEntry(o.context, o.MailerEntryReplaceMailerEntryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/nameservers/{name}"] = nameserver.NewReplaceNameserver(o.context, o.NameserverReplaceNameserverHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/peer_entries/{name}"] = peer_entry.NewReplacePeerEntry(o.context, o.PeerEntryReplacePeerEntryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/programs/{name}"] = process_manager.NewReplaceProgram(o.context, o.ProcessManagerReplaceProgramHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/resolvers/{name}"] = resolver.NewReplaceResolver(o.context, o.ResolverReplaceResolverHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/rings/{name}"] = ring.NewReplaceRing(o.context, o.RingReplaceRingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/runtime/maps_entries/{id}"] = maps.NewReplaceRuntimeMapEntry(o.context, o.MapsReplaceRuntimeMapEntryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/runtime/servers/{name}"] = serverops.NewReplaceRuntimeServer(o.context, o.ServerReplaceRuntimeServerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/servers/{name}"] = serverops.NewReplaceServer(o.context, o.ServerReplaceServerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/server_switching_rules/{index}"] = server_switching_rule.NewReplaceServerSwitchingRule(o.context, o.ServerSwitchingRuleReplaceServerSwitchingRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/server_templates/{prefix}"] = server_template.NewReplaceServerTemplate(o.context, o.ServerTemplateReplaceServerTemplateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/sites/{name}"] = sites.NewReplaceSite(o.context, o.SitesReplaceSiteHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/spoe/spoe_agents/{name}"] = spoe.NewReplaceSpoeAgent(o.context, o.SpoeReplaceSpoeAgentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/spoe/spoe_groups/{name}"] = spoe.NewReplaceSpoeGroup(o.context, o.SpoeReplaceSpoeGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/spoe/spoe_messages/{name}"] = spoe.NewReplaceSpoeMessage(o.context, o.SpoeReplaceSpoeMessageHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/stick_rules/{index}"] = stick_rule.NewReplaceStickRule(o.context, o.StickRuleReplaceStickRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/storage/general/{name}"] = storage.NewReplaceStorageGeneralFile(o.context, o.StorageReplaceStorageGeneralFileHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/storage/maps/{name}"] = storage.NewReplaceStorageMapFile(o.context, o.StorageReplaceStorageMapFileHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/storage/ssl_certificates/{name}"] = storage.NewReplaceStorageSSLCertificate(o.context, o.StorageReplaceStorageSSLCertificateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/tcp_checks/{index}"] = tcp_check.NewReplaceTCPCheck(o.context, o.TCPCheckReplaceTCPCheckHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/tcp_request_rules/{index}"] = tcp_request_rule.NewReplaceTCPRequestRule(o.context, o.TCPRequestRuleReplaceTCPRequestRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/tcp_response_rules/{index}"] = tcp_response_rule.NewReplaceTCPResponseRule(o.context, o.TCPResponseRuleReplaceTCPResponseRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/tables/{name}"] = table.NewReplaceTable(o.context, o.TableReplaceTableHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/users/{username}"] = user.NewReplaceUser(o.context, o.UserReplaceUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/runtime/stick_table_entries"] = stick_table.NewSetStickTableEntries(o.context, o.StickTableSetStickTableEntriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/runtime/maps_entries"] = maps.NewShowRuntimeMap(o.context, o.MapsShowRuntimeMapHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/spoe_transactions"] = spoe_transactions.NewStartSpoeTransaction(o.context, o.SpoeTransactionsStartSpoeTransactionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/transactions"] = transactions.NewStartTransaction(o.context, o.TransactionsStartTransactionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DataPlaneAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DataPlaneAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DataPlaneAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DataPlaneAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DataPlaneAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
