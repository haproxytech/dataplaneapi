// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_after_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateHTTPAfterResponseRuleCreatedCode is the HTTP code returned for type CreateHTTPAfterResponseRuleCreated
const CreateHTTPAfterResponseRuleCreatedCode int = 201

/*
CreateHTTPAfterResponseRuleCreated HTTP Response Rule created

swagger:response createHttpAfterResponseRuleCreated
*/
type CreateHTTPAfterResponseRuleCreated struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPAfterResponseRule `json:"body,omitempty"`
}

// NewCreateHTTPAfterResponseRuleCreated creates CreateHTTPAfterResponseRuleCreated with default headers values
func NewCreateHTTPAfterResponseRuleCreated() *CreateHTTPAfterResponseRuleCreated {

	return &CreateHTTPAfterResponseRuleCreated{}
}

// WithPayload adds the payload to the create Http after response rule created response
func (o *CreateHTTPAfterResponseRuleCreated) WithPayload(payload *models.HTTPAfterResponseRule) *CreateHTTPAfterResponseRuleCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http after response rule created response
func (o *CreateHTTPAfterResponseRuleCreated) SetPayload(payload *models.HTTPAfterResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPAfterResponseRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPAfterResponseRuleAcceptedCode is the HTTP code returned for type CreateHTTPAfterResponseRuleAccepted
const CreateHTTPAfterResponseRuleAcceptedCode int = 202

/*
CreateHTTPAfterResponseRuleAccepted Configuration change accepted and reload requested

swagger:response createHttpAfterResponseRuleAccepted
*/
type CreateHTTPAfterResponseRuleAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPAfterResponseRule `json:"body,omitempty"`
}

// NewCreateHTTPAfterResponseRuleAccepted creates CreateHTTPAfterResponseRuleAccepted with default headers values
func NewCreateHTTPAfterResponseRuleAccepted() *CreateHTTPAfterResponseRuleAccepted {

	return &CreateHTTPAfterResponseRuleAccepted{}
}

// WithReloadID adds the reloadId to the create Http after response rule accepted response
func (o *CreateHTTPAfterResponseRuleAccepted) WithReloadID(reloadID string) *CreateHTTPAfterResponseRuleAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Http after response rule accepted response
func (o *CreateHTTPAfterResponseRuleAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Http after response rule accepted response
func (o *CreateHTTPAfterResponseRuleAccepted) WithPayload(payload *models.HTTPAfterResponseRule) *CreateHTTPAfterResponseRuleAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http after response rule accepted response
func (o *CreateHTTPAfterResponseRuleAccepted) SetPayload(payload *models.HTTPAfterResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPAfterResponseRuleAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPAfterResponseRuleBadRequestCode is the HTTP code returned for type CreateHTTPAfterResponseRuleBadRequest
const CreateHTTPAfterResponseRuleBadRequestCode int = 400

/*
CreateHTTPAfterResponseRuleBadRequest Bad request

swagger:response createHttpAfterResponseRuleBadRequest
*/
type CreateHTTPAfterResponseRuleBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPAfterResponseRuleBadRequest creates CreateHTTPAfterResponseRuleBadRequest with default headers values
func NewCreateHTTPAfterResponseRuleBadRequest() *CreateHTTPAfterResponseRuleBadRequest {

	return &CreateHTTPAfterResponseRuleBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http after response rule bad request response
func (o *CreateHTTPAfterResponseRuleBadRequest) WithConfigurationVersion(configurationVersion string) *CreateHTTPAfterResponseRuleBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http after response rule bad request response
func (o *CreateHTTPAfterResponseRuleBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http after response rule bad request response
func (o *CreateHTTPAfterResponseRuleBadRequest) WithPayload(payload *models.Error) *CreateHTTPAfterResponseRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http after response rule bad request response
func (o *CreateHTTPAfterResponseRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPAfterResponseRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPAfterResponseRuleConflictCode is the HTTP code returned for type CreateHTTPAfterResponseRuleConflict
const CreateHTTPAfterResponseRuleConflictCode int = 409

/*
CreateHTTPAfterResponseRuleConflict The specified resource already exists

swagger:response createHttpAfterResponseRuleConflict
*/
type CreateHTTPAfterResponseRuleConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPAfterResponseRuleConflict creates CreateHTTPAfterResponseRuleConflict with default headers values
func NewCreateHTTPAfterResponseRuleConflict() *CreateHTTPAfterResponseRuleConflict {

	return &CreateHTTPAfterResponseRuleConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http after response rule conflict response
func (o *CreateHTTPAfterResponseRuleConflict) WithConfigurationVersion(configurationVersion string) *CreateHTTPAfterResponseRuleConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http after response rule conflict response
func (o *CreateHTTPAfterResponseRuleConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http after response rule conflict response
func (o *CreateHTTPAfterResponseRuleConflict) WithPayload(payload *models.Error) *CreateHTTPAfterResponseRuleConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http after response rule conflict response
func (o *CreateHTTPAfterResponseRuleConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPAfterResponseRuleConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateHTTPAfterResponseRuleDefault General Error

swagger:response createHttpAfterResponseRuleDefault
*/
type CreateHTTPAfterResponseRuleDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPAfterResponseRuleDefault creates CreateHTTPAfterResponseRuleDefault with default headers values
func NewCreateHTTPAfterResponseRuleDefault(code int) *CreateHTTPAfterResponseRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateHTTPAfterResponseRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create HTTP after response rule default response
func (o *CreateHTTPAfterResponseRuleDefault) WithStatusCode(code int) *CreateHTTPAfterResponseRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create HTTP after response rule default response
func (o *CreateHTTPAfterResponseRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create HTTP after response rule default response
func (o *CreateHTTPAfterResponseRuleDefault) WithConfigurationVersion(configurationVersion string) *CreateHTTPAfterResponseRuleDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create HTTP after response rule default response
func (o *CreateHTTPAfterResponseRuleDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create HTTP after response rule default response
func (o *CreateHTTPAfterResponseRuleDefault) WithPayload(payload *models.Error) *CreateHTTPAfterResponseRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create HTTP after response rule default response
func (o *CreateHTTPAfterResponseRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPAfterResponseRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
