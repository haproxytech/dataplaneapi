// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dataplaneapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for editing and managing haproxy instances. Provides process information, configuration management,\nhaproxy stats and logs.\n",
    "title": "HAProxy Data Plane API",
    "contact": {
      "name": "HAProxy Support",
      "url": "https://my.haproxy.com/portal/cust/login",
      "email": "support@haproxy.com"
    },
    "version": "2.0"
  },
  "basePath": "/v2",
  "paths": {
    "/": {
      "get": {
        "description": "Returns a list of root endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of root endpoints",
        "operationId": "getAPIEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/info": {
      "get": {
        "description": "Return API, hardware and OS information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return API, hardware and OS information",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/info"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services": {
      "get": {
        "description": "Returns a list of API managed services endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of service endpoints",
        "operationId": "getServicesEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy": {
      "get": {
        "description": "Returns a list of HAProxy related endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy related endpoints",
        "operationId": "getHaproxyEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced configuration of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced configuration endpoints",
        "operationId": "getConfigurationEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/acls": {
      "get": {
        "description": "Returns all ACL lines that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Return an array of all ACL lines",
        "operationId": "getAcls",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acls"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new ACL line of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Add a new ACL line",
        "operationId": "createAcl",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "ACL line created",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/acls/{id}": {
      "get": {
        "description": "Returns one ACL line configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Return one ACL line",
        "operationId": "getAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acl"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a ACL line configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Replace a ACL line",
        "operationId": "replaceAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "ACL line replaced",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a ACL line configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Delete a ACL line",
        "operationId": "deleteAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "ACL line deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Return an array of all Backend Switching Rules",
        "operationId": "getBackendSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Backend Switching Rule of the specified type in the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Add a new Backend Switching Rule",
        "operationId": "createBackendSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend Switching Rule created",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules/{id}": {
      "get": {
        "description": "Returns one Backend Switching Rule configuration by it's ID in the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Return one Backend Switching Rule",
        "operationId": "getBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Backend Switching Rule configuration by it's ID in the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Replace a Backend Switching Rule",
        "operationId": "replaceBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Backend Switching Rule configuration by it's ID from the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Delete a Backend Switching Rule",
        "operationId": "deleteBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend Switching Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backends": {
      "get": {
        "description": "Returns an array of all configured backends.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Return an array of backends",
        "operationId": "getBackends",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new backend to the configuration file.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Add a backend",
        "operationId": "createBackend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend created",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backends/{name}": {
      "get": {
        "description": "Returns one backend configuration by it's name.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Return a backend",
        "operationId": "getBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a backend configuration by it's name.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Replace a backend",
        "operationId": "replaceBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend replaced",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Delete a backend",
        "operationId": "deleteBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/binds": {
      "get": {
        "description": "Returns an array of all binds that are configured in specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Return an array of binds",
        "operationId": "getBinds",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/binds"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new bind in the specified frontend in the configuration file.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Add a new bind",
        "operationId": "createBind",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Bind created",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/binds/{name}": {
      "get": {
        "description": "Returns one bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Return one bind",
        "operationId": "getBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/bind"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Replace a bind",
        "operationId": "replaceBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Bind replaced",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Delete a bind",
        "operationId": "deleteBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Bind deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/defaults": {
      "get": {
        "description": "Returns defaults part of configuration.",
        "tags": [
          "Defaults",
          "HAProxy configuration management"
        ],
        "summary": "Return defaults part of configuration",
        "operationId": "getDefaults",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/defaults"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replace defaults part of config",
        "tags": [
          "Defaults",
          "HAProxy configuration management"
        ],
        "summary": "Replace defaults",
        "operationId": "replaceDefaults",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Defaults replaced",
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/defaults"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/filters": {
      "get": {
        "description": "Returns all Filters that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Return an array of all Filters",
        "operationId": "getFilters",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filters"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Filter of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Add a new Filter",
        "operationId": "createFilter",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Filter created",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/filters/{id}": {
      "get": {
        "description": "Returns one Filter configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Return one Filter",
        "operationId": "getFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filter"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Filter configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Replace a Filter",
        "operationId": "replaceFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Filter replaced",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Filter configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Delete a Filter",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Filter deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends": {
      "get": {
        "description": "Returns an array of all configured frontends.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Return an array of frontends",
        "operationId": "getFrontends",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new frontend to the configuration file.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Add a frontend",
        "operationId": "createFrontend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Frontend created",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends/{name}": {
      "get": {
        "description": "Returns one frontend configuration by it's name.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Return a frontend",
        "operationId": "getFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a frontend configuration by it's name.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Replace a frontend",
        "operationId": "replaceFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Frontend replaced",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Delete a frontend",
        "operationId": "deleteFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Frontend deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/global": {
      "get": {
        "description": "Returns global part of configuration.",
        "tags": [
          "Global",
          "HAProxy configuration management"
        ],
        "summary": "Return a global part of configuration",
        "operationId": "getGlobal",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/global"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replace global part of config",
        "tags": [
          "Global",
          "HAProxy configuration management"
        ],
        "summary": "Replace global",
        "operationId": "replaceGlobal",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Global replaced",
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/global"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules": {
      "get": {
        "description": "Returns all HTTP Request Rules that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Return an array of all HTTP Request Rules",
        "operationId": "getHTTPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Request Rule of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Add a new HTTP Request Rule",
        "operationId": "createHTTPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Request Rule created",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules/{id}": {
      "get": {
        "description": "Returns one HTTP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Return one HTTP Request Rule",
        "operationId": "getHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Replace a HTTP Request Rule",
        "operationId": "replaceHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Request Rule configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Delete a HTTP Request Rule",
        "operationId": "deleteHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Request Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules": {
      "get": {
        "description": "Returns all HTTP Response Rules that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Return an array of all HTTP Response Rules",
        "operationId": "getHTTPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Response Rule of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Add a new HTTP Response Rule",
        "operationId": "createHTTPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Response Rule created",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules/{id}": {
      "get": {
        "description": "Returns one HTTP Response Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Return one HTTP Response Rule",
        "operationId": "getHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Response Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Replace a HTTP Response Rule",
        "operationId": "replaceHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Response Rule configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Delete a HTTP Response Rule",
        "operationId": "deleteHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Response Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets": {
      "get": {
        "description": "Returns all Log Targets that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Return an array of all Log Targets",
        "operationId": "getLogTargets",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_targets"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Log Target of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Add a new Log Target",
        "operationId": "createLogTarget",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Log Target created",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets/{id}": {
      "get": {
        "description": "Returns one Log Target configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Return one Log Target",
        "operationId": "getLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_target"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Log Target configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Replace a Log Target",
        "operationId": "replaceLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Log Target replaced",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Log Target configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Delete a Log Target",
        "operationId": "deleteLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Log Target deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/raw": {
      "get": {
        "description": "Returns HAProxy configuration file in plain text",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Configuration",
          "HAProxy configuration management"
        ],
        "summary": "Return HAProxy configuration",
        "operationId": "getHAProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Push a new haproxy configuration file in plain text",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Configuration",
          "HAProxy configuration management"
        ],
        "summary": "Push new haproxy configuration",
        "operationId": "postHAProxyConfiguration",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "New HAProxy configuration pushed",
            "schema": {
              "type": "string"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Return an array of all Server Switching Rules",
        "operationId": "getServerSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Server Switching Rule of the specified type in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Add a new Server Switching Rule",
        "operationId": "createServerSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Server Switching Rule created",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules/{id}": {
      "get": {
        "description": "Returns one Server Switching Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Return one Server Switching Rule",
        "operationId": "getServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Server Switching Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Replace a Server Switching Rule",
        "operationId": "replaceServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Server Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Server Switching Rule configuration by it's ID from the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Delete a Server Switching Rule",
        "operationId": "deleteServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server Switching Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/servers": {
      "get": {
        "description": "Returns an array of all servers that are configured in specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Return an array of servers",
        "operationId": "getServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/servers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new server in the specified backend in the configuration file.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Add a new server",
        "operationId": "createServer",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Server created",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/servers/{name}": {
      "get": {
        "description": "Returns one server configuration by it's name in the specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Return one server",
        "operationId": "getServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a server configuration by it's name in the specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Replace a server",
        "operationId": "replaceServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Server replaced",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a server configuration by it's name in the specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Delete a server",
        "operationId": "deleteServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules": {
      "get": {
        "description": "Returns all Stick Rules that are configured in specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Return an array of all Stick Rules",
        "operationId": "getStickRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Stick Rule of the specified type in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Add a new Stick Rule",
        "operationId": "createStickRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Stick Rule created",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules/{id}": {
      "get": {
        "description": "Returns one Stick Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Return one Stick Rule",
        "operationId": "getStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Stick Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Replace a Stick Rule",
        "operationId": "replaceStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Stick Rule replaced",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Stick Rule configuration by it's ID from the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Delete a Stick Rule",
        "operationId": "deleteStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Stick Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules": {
      "get": {
        "description": "Returns all TCP Request Rules that are configured in specified parent and parent type.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Return an array of all TCP Request Rules",
        "operationId": "getTCPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Request Rule of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Add a new TCP Request Rule",
        "operationId": "createTCPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Request Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules/{id}": {
      "get": {
        "description": "Returns one TCP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Return one TCP Request Rule",
        "operationId": "getTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Replace a TCP Request Rule",
        "operationId": "replaceTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Request Rule configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Delete a TCP Request Rule",
        "operationId": "deleteTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Request Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules": {
      "get": {
        "description": "Returns all TCP Response Rules that are configured in specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Return an array of all TCP Response Rules",
        "operationId": "getTCPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Response Rule of the specified type in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Add a new TCP Response Rule",
        "operationId": "createTCPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Response Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules/{id}": {
      "get": {
        "description": "Returns one TCP Response Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Return one TCP Response Rule",
        "operationId": "getTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Response Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Replace a TCP Response Rule",
        "operationId": "replaceTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Response Rule configuration by it's ID from the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Delete a TCP Response Rule",
        "operationId": "deleteTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Response Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/reloads": {
      "get": {
        "description": "Returns a list of HAProxy reloads.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Reloads"
        ],
        "summary": "Return list of HAProxy Reloads.",
        "operationId": "getReloads",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/reloads"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/reloads/{id}": {
      "get": {
        "description": "Returns one HAProxy reload status.",
        "tags": [
          "Reloads"
        ],
        "summary": "Return one HAProxy reload status",
        "operationId": "getReload",
        "parameters": [
          {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$",
            "type": "string",
            "description": "Reload id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/reload"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced runtime settings of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced runtime endpoints",
        "operationId": "getRuntimeEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/info": {
      "get": {
        "description": "Return HAProxy process information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return HAProxy process information",
        "operationId": "getHaproxyProcessInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/process_infos"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/servers": {
      "get": {
        "description": "Returns an array of all servers' runtime settings.",
        "tags": [
          "Server",
          "Backend options"
        ],
        "summary": "Return an array of runtime servers' setings",
        "operationId": "getRuntimeServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_servers"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/servers/{name}": {
      "get": {
        "description": "Returns one server runtime settings by it's name in the specified backend.",
        "tags": [
          "Server",
          "Backend options"
        ],
        "summary": "Return one server runtime settings",
        "operationId": "getRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a server transient settings by it's name in the specified backend.",
        "tags": [
          "Server",
          "Backend options"
        ],
        "summary": "Replace server transient settings",
        "operationId": "replaceRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server transient settings replaced",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_table_entries": {
      "get": {
        "description": "Returns an array of all entries in a given stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table Entries",
        "operationId": "getStickTableEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "stick_table",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "A list of filters in format data.\u003ctype\u003e \u003coperator\u003e \u003cvalue\u003e separated by comma",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Key which we want the entries for",
            "name": "key",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Max number of entries to be returned for pagination",
            "name": "count",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset which indicates how many items we skip in pagination",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table_entries"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables": {
      "get": {
        "description": "Returns an array of all stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Tables",
        "operationId": "getStickTables",
        "parameters": [
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not all processes are returned",
            "name": "process",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_tables"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables/{name}": {
      "get": {
        "description": "Returns one stick table from runtime.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table",
        "operationId": "getStickTable",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/sites": {
      "get": {
        "description": "Returns an array of all configured sites.",
        "tags": [
          "Sites"
        ],
        "summary": "Return an array of sites",
        "operationId": "getSites",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/sites"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new site to the configuration file.",
        "tags": [
          "Sites"
        ],
        "summary": "Add a site",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Site created",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/sites/{name}": {
      "get": {
        "description": "Returns one site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Return a site",
        "operationId": "getSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/site"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Replace a site",
        "operationId": "replaceSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Site replaced",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a site from the configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Delete a site",
        "operationId": "deleteSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/stats": {
      "get": {
        "description": "Returns a list of HAProxy stats endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy stats endpoints",
        "operationId": "getStatsEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/stats/native": {
      "get": {
        "description": "Getting stats from the HAProxy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Stats"
        ],
        "summary": "Gets stats",
        "operationId": "getStats",
        "parameters": [
          {
            "enum": [
              "frontend",
              "backend",
              "server"
            ],
            "type": "string",
            "description": "Object type to get stats for (one of frontend, backend, server)",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object name to get stats for",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-dependency": {
              "query.type": "server"
            },
            "description": "Object parent name to get stats for, in case the object is a server",
            "name": "parent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/transactions": {
      "get": {
        "description": "Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Return list of HAProxy configuration transactions.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "enum": [
              "failed",
              "in_progress"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/transactions"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Start a new transaction",
        "operationId": "startTransaction",
        "parameters": [
          {
            "type": "integer",
            "description": "Configuration version on which to work on",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/transactions/{id}": {
      "get": {
        "description": "Returns one HAProxy configuration transactions.",
        "tags": [
          "Transactions"
        ],
        "summary": "Return one HAProxy configuration transactions",
        "operationId": "getTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "tags": [
          "Transactions"
        ],
        "summary": "Commit transaction",
        "operationId": "commitTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction succesfully commited",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/transaction"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a transaction.",
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/specification": {
      "get": {
        "description": "Return Data Plane API OpenAPI specification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Specification"
        ],
        "summary": "Data Plane API Specification",
        "operationId": "getSpecification",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    }
  },
  "definitions": {
    "acl": {
      "description": "The use of Access Control Lists (ACL) provides a flexible solution to perform\ncontent switching and generally to take decisions based on content extracted\nfrom the request, the response or any environmental status.\n",
      "type": "object",
      "title": "ACL Lines",
      "required": [
        "id",
        "acl_name",
        "criterion",
        "value"
      ],
      "properties": {
        "acl_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "criterion": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "type": "string",
          "x-nullable": false
        }
      },
      "additionalProperties": false
    },
    "acls": {
      "description": "HAProxy ACL lines array (corresponds to acl directives)",
      "type": "array",
      "title": "ACL Lines Array",
      "items": {
        "$ref": "#/definitions/acl"
      }
    },
    "backend": {
      "description": "HAProxy backend configuration",
      "type": "object",
      "title": "Backend",
      "required": [
        "name"
      ],
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check"
          ],
          "x-display-name": "Advanced Check"
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "cookie": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/cookie"
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "hash_type": {
          "type": "object",
          "properties": {
            "function": {
              "type": "string",
              "enum": [
                "sdbm",
                "djb2",
                "wt6",
                "crc32"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "map-based",
                "consistent"
              ]
            },
            "modifier": {
              "type": "string",
              "enum": [
                "avalanche"
              ]
            }
          }
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "httpchk": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/httpchk"
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "stick_table": {
          "type": "object",
          "properties": {
            "expire": {
              "type": "integer",
              "x-nullable": true
            },
            "keylen": {
              "type": "integer",
              "x-display-name": "Key Length",
              "x-nullable": true
            },
            "nopurge": {
              "type": "boolean",
              "x-display-name": "No Purge"
            },
            "peers": {
              "type": "string",
              "pattern": "^[^\\s]+$"
            },
            "size": {
              "type": "integer",
              "x-nullable": true
            },
            "store": {
              "type": "string",
              "pattern": "^[^\\s]+$"
            },
            "type": {
              "type": "string",
              "enum": [
                "ip",
                "ipv6",
                "integer",
                "string",
                "binary"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "balance": {
          "algorithm": "roundrobin"
        },
        "forwardfor": {
          "enabled": "enabled"
        },
        "httpchk": {
          "method": "OPTIONS",
          "uri": "/check",
          "version": "HTTP/1.1"
        },
        "mode": "http",
        "name": "test_backend"
      }
    },
    "backend_switching_rule": {
      "description": "HAProxy backend switching rule configuration (corresponds to use_backend directive)",
      "type": "object",
      "title": "Backend Switching Rule",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Backend Name",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "id": 0,
        "name": "test_backend"
      }
    },
    "backend_switching_rules": {
      "description": "HAProxy backend switching rules array (corresponds to use_backend directives)",
      "type": "array",
      "title": "Backend Switching Rules Array",
      "items": {
        "$ref": "#/definitions/backend_switching_rule"
      }
    },
    "backends": {
      "description": "HAProxy backends array",
      "type": "array",
      "title": "Backends",
      "items": {
        "$ref": "#/definitions/backend"
      }
    },
    "balance": {
      "type": "object",
      "required": [
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": [
            "roundrobin",
            "static-rr",
            "leastconn",
            "first",
            "source",
            "uri",
            "url_param",
            "hdr",
            "random",
            "rdp-cookie"
          ]
        },
        "hdr_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "hdr"
            }
          },
          "x-display-name": "Header Name"
        },
        "hdr_use_domain_only": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "hdr"
            }
          },
          "x-display-name": "Header Use Domain Only"
        },
        "random_draws": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "random"
            }
          },
          "x-display-name": "Random Draws",
          "x-nullable": false
        },
        "rdp_cookie_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "value": "rdp-cookie"
            }
          },
          "x-display-name": "Rdp Cookie Name"
        },
        "uri_depth": {
          "type": "integer",
          "pattern": "^[^\\d+$]",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Depth"
        },
        "uri_len": {
          "type": "integer",
          "pattern": "^[^\\d+$]",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Len"
        },
        "uri_whole": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Whole"
        },
        "url_param": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param"
        },
        "url_param_check_post": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Check Post"
        },
        "url_param_max_wait": {
          "type": "integer",
          "pattern": "^[^\\d+$]",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Max Weight"
        }
      }
    },
    "bind": {
      "description": "HAProxy frontend bind configuration",
      "type": "object",
      "title": "Bind",
      "required": [
        "name"
      ],
      "properties": {
        "accept_proxy": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "ssl": {
          "type": "boolean"
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "tcp_user_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "transparent": {
          "type": "boolean"
        },
        "v4v6": {
          "type": "boolean"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "optional",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "127.0.0.1",
        "name": "http",
        "port": 80
      }
    },
    "binds": {
      "description": "HAProxy frontend binds array (corresponds to bind directives)",
      "type": "array",
      "title": "Binds",
      "items": {
        "$ref": "#/definitions/bind"
      }
    },
    "cookie": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "domain": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "dynamic": {
          "type": "boolean"
        },
        "httponly": {
          "type": "boolean"
        },
        "indirect": {
          "type": "boolean"
        },
        "maxidle": {
          "type": "integer",
          "pattern": "^[^\\d+$]"
        },
        "maxlife": {
          "type": "integer",
          "pattern": "^[^\\d+$]"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "nocache": {
          "type": "boolean"
        },
        "postonly": {
          "type": "boolean"
        },
        "preserve": {
          "type": "boolean"
        },
        "secure": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "rewrite",
            "insert",
            "prefix"
          ]
        }
      }
    },
    "default_server": {
      "type": "object",
      "properties": {
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "fall": {
          "type": "integer",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "defaults": {
      "description": "HAProxy defaults configuration",
      "type": "object",
      "title": "Defaults",
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check"
          ],
          "x-display-name": "Advanced Check"
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clflog": {
          "type": "boolean",
          "x-display-name": "CLF Log"
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Client TCP Keep Alive"
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continuous Statistics"
        },
        "cookie": {
          "$ref": "#/definitions/cookie"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "error_files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorfile"
          },
          "x-go-name": "ErrorFiles"
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "$ref": "#/definitions/forwardfor"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ]
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "http_request_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "httpchk": {
          "$ref": "#/definitions/httpchk"
        },
        "httplog": {
          "type": "boolean",
          "x-display-name": "HTTP Log"
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "tcp",
            "http"
          ]
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tcplog": {
          "type": "boolean",
          "x-display-name": "TCP Log"
        }
      },
      "additionalProperties": false
    },
    "endpoint": {
      "description": "Endpoint definition",
      "type": "object",
      "title": "Endpoint",
      "properties": {
        "description": {
          "description": "Endpoint description",
          "type": "string"
        },
        "title": {
          "description": "Endpoint title",
          "type": "string"
        },
        "url": {
          "description": "Path to the endpoint",
          "type": "string"
        }
      }
    },
    "endpoints": {
      "description": "Collection of endpoints",
      "type": "array",
      "title": "Endpoints Array",
      "items": {
        "$ref": "#/definitions/endpoint"
      }
    },
    "error": {
      "description": "API Error",
      "type": "object",
      "title": "Error",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "errorfile": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            200,
            400,
            403,
            405,
            408,
            425,
            429,
            500,
            502,
            503,
            504
          ]
        },
        "file": {
          "type": "string"
        }
      },
      "x-display-name": "Error File"
    },
    "filter": {
      "description": "HAProxy filters",
      "type": "object",
      "title": "Filter",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache"
            }
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "spoe_config": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "spoe"
            }
          }
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "spoe"
            }
          }
        },
        "trace_hexdump": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_rnd_forwarding": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Forwarding"
        },
        "trace_rnd_parsing": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Parsing"
        },
        "type": {
          "type": "string",
          "enum": [
            "trace",
            "compression",
            "spoe",
            "cache"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "id": 0,
        "trace_name": "name",
        "trace_rnd_parsing": true,
        "type": "trace"
      }
    },
    "filters": {
      "description": "HAProxy filters array (corresponds to filter directive)",
      "type": "array",
      "title": "Filters Array",
      "items": {
        "$ref": "#/definitions/filter"
      }
    },
    "forwardfor": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "except": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "header": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "ifnone": {
          "type": "boolean"
        }
      },
      "x-display-name": "ForwardFor"
    },
    "frontend": {
      "description": "HAProxy frontend configuration",
      "type": "object",
      "title": "Frontend",
      "required": [
        "name"
      ],
      "properties": {
        "clflog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "CLF Log"
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "Client TCP Keep Alive"
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continous Statistics"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "httplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Log"
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "tcplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Log"
        }
      },
      "additionalProperties": false,
      "example": {
        "default_backend": "test_backend",
        "http_connection_mode": "http-keep-alive",
        "maxconn": 2000,
        "mode": "http",
        "name": "test_frontend"
      }
    },
    "frontends": {
      "description": "HAProxy frontends array",
      "type": "array",
      "title": "Frontends",
      "items": {
        "$ref": "#/definitions/frontend"
      }
    },
    "global": {
      "description": "HAProxy global configuration",
      "type": "object",
      "title": "Global",
      "properties": {
        "cpu_maps": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "process",
              "cpu_set"
            ],
            "properties": {
              "cpu_set": {
                "type": "string",
                "x-display-name": "CPU Set"
              },
              "process": {
                "type": "string",
                "x-display-name": "Process/Thread Set"
              }
            },
            "x-go-name": "CPUMap"
          },
          "x-display-name": "CPU Maps",
          "x-go-name": "CPUMaps"
        },
        "daemon": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "external_check": {
          "type": "boolean",
          "x-display-name": "External Check"
        },
        "master-worker": {
          "type": "boolean",
          "x-display-name": "Master Worker Mode"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections"
        },
        "nbproc": {
          "type": "integer",
          "x-display-name": "Number of Processes"
        },
        "nbthread": {
          "type": "integer",
          "x-display-name": "Number of Threads"
        },
        "pidfile": {
          "type": "string",
          "x-display-name": "PID File"
        },
        "runtime_apis": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              },
              "exposeFdListeners": {
                "type": "boolean",
                "x-display-name": "Expose FD Listeners"
              },
              "level": {
                "type": "string",
                "enum": [
                  "user",
                  "operator",
                  "admin"
                ]
              },
              "mode": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              },
              "process": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              }
            },
            "x-go-name": "RuntimeAPI"
          },
          "x-display-name": "Runtime APIs",
          "x-go-name": "RuntimeAPIs"
        },
        "ssl_default_bind_ciphers": {
          "type": "string",
          "x-display-name": "SSL Default Bind Ciphers"
        },
        "ssl_default_bind_options": {
          "type": "string",
          "x-display-name": "SSL Default Bind Options"
        },
        "stats_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tune_ssl_default_dh_param": {
          "type": "integer",
          "x-display-name": "SSL Default DH Parameter Size"
        }
      },
      "additionalProperties": false
    },
    "http_request_rule": {
      "description": "HAProxy HTTP request rule configuration (corresponds to http-request directives)",
      "type": "object",
      "title": "HTTP Request Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL File"
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL Key Format"
        },
        "auth_realm": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "auth"
            }
          },
          "x-display-name": "Authentication Realm"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "deny_status": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit"
              ]
            }
          },
          "x-nullable": false
        },
        "hdr_format": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "path_fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-path"
            }
          }
        },
        "query-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-query"
            }
          }
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code"
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Engine"
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Group"
        },
        "type": {
          "type": "string",
          "enum": [
            "allow",
            "deny",
            "auth",
            "redirect",
            "tarpit",
            "add-header",
            "replace-header",
            "replace-value",
            "del-header",
            "set-header",
            "set-log-level",
            "set-path",
            "set-query",
            "set-uri",
            "set-var",
            "send-spoe-group",
            "add-acl",
            "del-acl"
          ],
          "x-nullable": false
        },
        "uri-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-uri"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "id": 0,
        "type": "add-header"
      }
    },
    "http_request_rules": {
      "description": "HAProxy HTTP request rules array (corresponds to http-request directives)",
      "type": "array",
      "title": "HTTP Request Rules Array",
      "items": {
        "$ref": "#/definitions/http_request_rule"
      }
    },
    "http_response_rule": {
      "description": "HAProxy HTTP response rule configuration (corresponds to http-response directives)",
      "type": "object",
      "title": "HTTP Response Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          }
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACK Key Format"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "hdr_format": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code"
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "status": {
          "type": "integer",
          "maximum": 999,
          "minimum": 100,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-status"
            }
          },
          "x-nullable": false
        },
        "status_reason": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "set-status"
            }
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "allow",
            "deny",
            "redirect",
            "add-header",
            "set-header",
            "del-header",
            "set-log-level",
            "set-var",
            "set-status",
            "send-spoe-group",
            "replace-header",
            "replace-value",
            "add-acl",
            "del-acl"
          ],
          "x-nullable": false
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "id": 0,
        "type": "add-header"
      }
    },
    "http_response_rules": {
      "description": "HAProxy HTTP response rules array (corresponds to http-response directives)",
      "type": "array",
      "title": "HTTP Response Rules Array",
      "items": {
        "$ref": "#/definitions/http_response_rule"
      }
    },
    "httpchk": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "HEAD",
            "PUT",
            "POST",
            "GET",
            "TRACE",
            "PATCH"
          ]
        },
        "uri": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "version": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "x-display-name": "HTTP Check"
    },
    "info": {
      "description": "General API, OS and hardware information",
      "type": "object",
      "title": "Information",
      "properties": {
        "api": {
          "type": "object",
          "properties": {
            "build_date": {
              "description": "HAProxy Dataplane API build date",
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "description": "HAProxy Dataplane API version string",
              "type": "string"
            }
          }
        },
        "system": {
          "type": "object",
          "properties": {
            "cpu_info": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "string"
                },
                "num_cpus": {
                  "description": "Number of logical CPUs",
                  "type": "integer"
                }
              }
            },
            "hostname": {
              "description": "Hostname where the HAProxy is running",
              "type": "string"
            },
            "mem_info": {
              "type": "object",
              "properties": {
                "dataplaneapi_memory": {
                  "type": "integer"
                },
                "free_memory": {
                  "type": "integer"
                },
                "total_memory": {
                  "type": "integer"
                }
              }
            },
            "os_string": {
              "description": "OS string",
              "type": "string"
            },
            "time": {
              "description": "Current time in milliseconds since Epoch.",
              "type": "integer"
            },
            "uptime": {
              "description": "System uptime",
              "type": "integer",
              "x-nullable": true
            }
          }
        }
      },
      "example": {
        "api": {
          "build_date": "2019-08-21T17:31:56.000Z",
          "version": "v1.2.1 45a3288.dev"
        },
        "system": {
          "cpu_info": {
            "model": "Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz",
            "num_cpus": 4
          },
          "hostname": "test",
          "mem_info": {
            "dataplaneapi_memory": 44755536,
            "free_memory": 5790642176,
            "total_memory": 16681517056
          },
          "os_string": "Linux 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019",
          "time": 1566401525,
          "uptime": 87340
        }
      }
    },
    "log_target": {
      "description": "Per-instance logging of events and traffic.",
      "type": "object",
      "title": "Log Target",
      "required": [
        "id"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "facility": {
          "type": "string",
          "enum": [
            "kern",
            "user",
            "mail",
            "daemon",
            "auth",
            "syslog",
            "lpr",
            "news",
            "uucp",
            "cron",
            "auth2",
            "ftp",
            "ntp",
            "audit",
            "alert",
            "cron2",
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7"
          ],
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "format": {
          "type": "string",
          "enum": [
            "rfc3164",
            "rfc5424",
            "short",
            "raw"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "global": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "length": {
          "type": "integer",
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "minlevel": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "level": {
              "required": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "nolog": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "log_targets": {
      "description": "HAProxy log target array (corresponds to log directives)",
      "type": "array",
      "title": "Log Target Array",
      "items": {
        "$ref": "#/definitions/log_target"
      }
    },
    "native_stat": {
      "description": "Current stats for one object.",
      "type": "object",
      "title": "Stats",
      "properties": {
        "backend_name": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "name": {
          "type": "string"
        },
        "stats": {
          "type": "object",
          "properties": {
            "act": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "addr": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "agent_code": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_desc": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "agent_duration": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_fall": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_health": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_rise": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_status": {
              "type": "string",
              "enum": [
                "UNK",
                "INI",
                "SOCKERR",
                "L40K",
                "L4TOUT",
                "L4CON",
                "L7OK",
                "L7STS"
              ],
              "x-dependency": {
                "type": "server"
              }
            },
            "algo": {
              "type": "string",
              "x-dependency": {
                "type": "backend"
              }
            },
            "bck": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "bin": {
              "type": "integer",
              "x-nullable": true
            },
            "bout": {
              "type": "integer",
              "x-nullable": true
            },
            "check_code": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_desc": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "check_duration": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_fall": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_health": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_rise": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_status": {
              "type": "string",
              "enum": [
                "UNK",
                "INI",
                "SOCKERR",
                "L40K",
                "L4TOUT",
                "L4CON",
                "L6OK",
                "L6TOUT",
                "L6RSP",
                "L7OK",
                "L7OKC",
                "L7TOUT",
                "L7RSP",
                "L7STS"
              ],
              "x-dependency": {
                "type": "server"
              }
            },
            "chkdown": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "chkfail": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "cli_abrt": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_byp": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_in": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_out": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_rsp": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "conn_rate": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "conn_rate_max": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "conn_tot": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "cookie": {
              "type": "string",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              }
            },
            "ctime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "dcon": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "downtime": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "dreq": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "dresp": {
              "type": "integer",
              "x-nullable": true
            },
            "dses": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "econ": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "ereq": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "eresp": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "hanafail": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "hrsp_1xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_2xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_3xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_4xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_5xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_other": {
              "type": "integer",
              "x-nullable": true
            },
            "iid": {
              "type": "integer",
              "x-nullable": true
            },
            "intercepted": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "lastchg": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "lastsess": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "lbtot": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "mode": {
              "type": "string",
              "enum": [
                "tcp",
                "http",
                "health",
                "unknown"
              ]
            },
            "pid": {
              "type": "integer",
              "x-nullable": true
            },
            "qcur": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "qlimit": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "qmax": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "qtime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "rate": {
              "type": "integer",
              "x-nullable": true
            },
            "rate_lim": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "rate_max": {
              "type": "integer",
              "x-nullable": true
            },
            "req_rate": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "req_rate_max": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "req_tot": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "rtime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "scur": {
              "type": "integer",
              "x-nullable": true
            },
            "sid": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "slim": {
              "type": "integer",
              "x-nullable": true
            },
            "smax": {
              "type": "integer",
              "x-nullable": true
            },
            "srv_abrt": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "status": {
              "type": "string",
              "enum": [
                "UP",
                "DOWN",
                "NOLB",
                "MAINT",
                "no check"
              ]
            },
            "stot": {
              "type": "integer",
              "x-nullable": true
            },
            "throttle": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "tracked": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "ttime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "weight": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "wredis": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "wretr": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            }
          },
          "x-go-name": "NativeStatStats"
        },
        "type": {
          "type": "string",
          "enum": [
            "backend",
            "server",
            "frontend"
          ]
        }
      },
      "x-go-name": "NativeStat",
      "example": {
        "name": "frontend_test",
        "stats": {
          "bin": 4326578,
          "bout": 889901290,
          "comp_byp": 0,
          "comp_in": 0,
          "comp_out": 0,
          "comp_rsp": 0,
          "conn_rate": 12,
          "conn_rate_max": 456,
          "conn_tot": 45682,
          "dcon": 0,
          "dreq": 4,
          "dresp": 1,
          "dses": 0,
          "ereq": 54,
          "hrsp_1xx": 0,
          "hrsp_2xx": 165,
          "hrsp_3xx": 12,
          "hrsp_4xx": 50,
          "hrsp_5xx": 4,
          "hrsp_other": 0,
          "iid": 0,
          "intercepted": 346,
          "mode": "http",
          "pid": 3204,
          "rate": 64,
          "rate_lim": 20000,
          "rate_max": 4000,
          "req_rate": 49,
          "req_rate_max": 3965,
          "req_total": 1254786,
          "scur": 129,
          "slim": 2000,
          "smax": 2000,
          "status": "UP",
          "stot": 12902
        },
        "type": "frontend"
      }
    },
    "native_stats": {
      "description": "HAProxy stats array",
      "type": "array",
      "title": "Stats Array",
      "items": {
        "description": "Stats from one runtime API",
        "type": "object",
        "title": "Stats collection",
        "properties": {
          "error": {
            "type": "string"
          },
          "runtimeAPI": {
            "type": "string"
          },
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/native_stat"
            }
          }
        },
        "x-go-name": "NativeStatsCollection"
      },
      "x-go-name": "NativeStats"
    },
    "process_infos": {
      "description": "General HAProxy process information",
      "type": "array",
      "title": "HAProxy Information",
      "items": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "active_peers": {
                "type": "integer",
                "x-nullable": true
              },
              "busy_polling": {
                "type": "integer",
                "x-nullable": true
              },
              "bytes_out_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "compress_bps_in": {
                "type": "integer",
                "x-nullable": true
              },
              "compress_bps_out": {
                "type": "integer",
                "x-nullable": true
              },
              "compress_bps_rate_lim": {
                "type": "integer",
                "x-nullable": true
              },
              "conn_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "conn_rate_limit": {
                "type": "integer",
                "x-nullable": true
              },
              "connected_peers": {
                "type": "integer",
                "x-nullable": true
              },
              "cum_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "cum_req": {
                "type": "integer",
                "x-nullable": true
              },
              "cum_ssl_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "curr_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "curr_ssl_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "dropped_logs": {
                "type": "integer",
                "x-nullable": true
              },
              "failed_resolutions": {
                "type": "integer",
                "x-nullable": true
              },
              "hard_max_conn": {
                "type": "integer",
                "x-nullable": true
              },
              "idle_pct": {
                "type": "integer",
                "x-nullable": true
              },
              "jobs": {
                "type": "integer",
                "x-nullable": true
              },
              "listeners": {
                "type": "integer",
                "x-nullable": true
              },
              "max_conn": {
                "type": "integer",
                "x-nullable": true
              },
              "max_conn_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "max_pipes": {
                "type": "integer",
                "x-nullable": true
              },
              "max_sess_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "max_sock": {
                "type": "integer",
                "x-nullable": true
              },
              "max_ssl_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "max_ssl_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "max_zlib_mem_usage": {
                "type": "integer",
                "x-nullable": true
              },
              "mem_max_mb": {
                "type": "integer",
                "x-nullable": true
              },
              "nbthread": {
                "description": "Number of threads",
                "type": "integer",
                "x-display-name": "Number of Threads",
                "x-nullable": true
              },
              "node": {
                "type": "string"
              },
              "pid": {
                "description": "Process id of the replying worker process",
                "type": "integer",
                "x-display-name": "PID",
                "x-nullable": true
              },
              "pipes_free": {
                "type": "integer",
                "x-nullable": true
              },
              "pipes_used": {
                "type": "integer",
                "x-nullable": true
              },
              "pool_alloc_mb": {
                "type": "integer",
                "x-nullable": true
              },
              "pool_failed": {
                "type": "integer",
                "x-nullable": true
              },
              "pool_used_mb": {
                "type": "integer",
                "x-nullable": true
              },
              "process_num": {
                "description": "Process number",
                "type": "integer",
                "x-display-name": "Process Number",
                "x-nullable": true
              },
              "processes": {
                "description": "Number of spawned processes",
                "type": "integer",
                "x-display-name": "Number of processes",
                "x-nullable": true
              },
              "release_date": {
                "description": "HAProxy version release date",
                "type": "string",
                "format": "date"
              },
              "run_queue": {
                "type": "integer",
                "x-nullable": true
              },
              "sess_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "sess_rate_limit": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_backend_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_backend_max_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_cache_lookups": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_cache_misses": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_frontend_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_frontend_max_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_frontend_session_reuse": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_rate_limit": {
                "type": "integer",
                "x-nullable": true
              },
              "stopping": {
                "type": "integer",
                "x-nullable": true
              },
              "tasks": {
                "type": "integer",
                "x-nullable": true
              },
              "total_bytes_out": {
                "type": "integer",
                "x-nullable": true
              },
              "ulimit_n": {
                "type": "integer",
                "x-nullable": true
              },
              "unstoppable": {
                "type": "integer",
                "x-nullable": true
              },
              "uptime": {
                "description": "HAProxy uptime in s",
                "type": "integer",
                "x-nullable": true
              },
              "version": {
                "description": "HAProxy version string",
                "type": "string"
              },
              "zlib_mem_usage": {
                "type": "integer",
                "x-nullable": true
              }
            },
            "x-go-name": "ProcessInfoItem"
          },
          "runtimeAPI": {
            "type": "string"
          }
        },
        "x-go-name": "ProcessInfo"
      },
      "example": {
        "haproxy": {
          "address": "127.0.0.1",
          "pid": 1234,
          "processes": 4,
          "release_date": "2016-03-11",
          "time": "2018-07-02T12:00:00.124Z",
          "uptime": 8,
          "version": "1.7-dev1-868ab3-148"
        }
      }
    },
    "redispatch": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "interval": {
          "type": "integer",
          "x-nullable": false
        }
      }
    },
    "reload": {
      "description": "HAProxy reload",
      "type": "object",
      "title": "HAProxy reload",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
        },
        "reload_timestamp": {
          "type": "integer"
        },
        "response": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "succeeded"
          ]
        }
      },
      "example": {
        "id": "2019-01-03-44",
        "status": "in_progress"
      }
    },
    "reloads": {
      "description": "HAProxy reloads array",
      "type": "array",
      "title": "HAProxy Reloads Array",
      "items": {
        "$ref": "#/definitions/reload"
      }
    },
    "runtime_server": {
      "description": "Runtime transient server properties",
      "type": "object",
      "title": "Runtime Server",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false,
          "readOnly": true
        },
        "admin_state": {
          "type": "string",
          "enum": [
            "ready",
            "maint",
            "drain"
          ]
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "operational_state": {
          "type": "string",
          "enum": [
            "up",
            "down",
            "stopping"
          ]
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "x-nullable": true,
          "readOnly": true
        }
      },
      "example": {
        "address": "127.0.0.5",
        "admin_state": "up",
        "operational_state": "up",
        "port": 80,
        "server_id": 1,
        "server_name": "web_server"
      }
    },
    "runtime_servers": {
      "description": "HAProxy runtime servers array",
      "type": "array",
      "title": "HAProxy Runtime Servers Array",
      "items": {
        "$ref": "#/definitions/runtime_server"
      }
    },
    "server": {
      "description": "HAProxy backend server configuration",
      "type": "object",
      "title": "Server",
      "required": [
        "name"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "maintenance": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "10.1.1.1",
        "check": "enabled",
        "max-connections": 500,
        "name": "www",
        "port": 8080,
        "weight": 80
      }
    },
    "server_switching_rule": {
      "description": "HAProxy server switching rule configuration (corresponds to use-server directive)",
      "type": "object",
      "title": "Server Switching Rule",
      "required": [
        "id",
        "target_server"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "target_server": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getServers",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "id": 0,
        "target_server": "www"
      }
    },
    "server_switching_rules": {
      "description": "HAProxy backend server switching rules array (corresponds to use-server directives)",
      "type": "array",
      "title": "Server Switching Rules Array",
      "items": {
        "$ref": "#/definitions/server_switching_rule"
      }
    },
    "servers": {
      "description": "HAProxy backend servers array",
      "type": "array",
      "title": "Servers",
      "items": {
        "$ref": "#/definitions/server"
      }
    },
    "site": {
      "description": "Site configuration. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration \nendpoints.\n",
      "type": "object",
      "title": "Site",
      "required": [
        "name"
      ],
      "properties": {
        "farms": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "use_as"
            ],
            "properties": {
              "balance": {
                "$ref": "#/definitions/balance"
              },
              "cond": {
                "type": "string",
                "enum": [
                  "if",
                  "unless"
                ],
                "x-dependency": {
                  "use_as": {
                    "required": true,
                    "value": "conditional"
                  }
                },
                "x-display-name": "Condition"
              },
              "cond_test": {
                "type": "string",
                "x-dependency": {
                  "use_as": {
                    "required": true,
                    "value": "conditional"
                  }
                },
                "x-display-name": "Condition Test"
              },
              "forwardfor": {
                "$ref": "#/definitions/forwardfor"
              },
              "mode": {
                "type": "string",
                "enum": [
                  "http",
                  "tcp"
                ]
              },
              "name": {
                "type": "string",
                "pattern": "^[A-Za-z0-9-_.:]+$",
                "x-nullable": false
              },
              "servers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/server"
                }
              },
              "use_as": {
                "type": "string",
                "enum": [
                  "default",
                  "conditional"
                ],
                "x-nullable": false
              }
            },
            "x-go-name": "SiteFarm"
          }
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "service": {
          "type": "object",
          "properties": {
            "http_connection_mode": {
              "type": "string",
              "enum": [
                "http-tunnel",
                "httpclose",
                "forced-close",
                "http-server-close",
                "http-keep-alive"
              ],
              "x-dependency": {
                "mode": {
                  "value": "http"
                }
              },
              "x-display-name": "HTTP Connection Mode"
            },
            "listeners": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bind"
              }
            },
            "maxconn": {
              "type": "integer",
              "x-display-name": "Max Connections",
              "x-nullable": true
            },
            "mode": {
              "type": "string",
              "enum": [
                "http",
                "tcp"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "farms": [
          {
            "balance": {
              "algorithm": "roundrobin"
            },
            "mode": "http",
            "name": "www_backend",
            "servers": [
              {
                "address": "127.0.1.1",
                "name": "www_server",
                "port": 4567,
                "weight": 30
              },
              {
                "address": "127.0.1.2",
                "name": "www_server_new",
                "port": 4567,
                "weight": 70
              }
            ],
            "use_as": "default"
          }
        ],
        "name": "test_site",
        "service": {
          "http_connection_mode": "httpclose",
          "listeners": [
            {
              "address": "127.0.0.1",
              "name": "test_listener",
              "port": 80
            },
            {
              "address": "127.0.0.1",
              "name": "test_listener_2",
              "port": 8080
            }
          ],
          "maxconn": 2000,
          "mode": "http"
        }
      }
    },
    "sites": {
      "description": "Sites array. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration \nendpoints.\n",
      "type": "array",
      "title": "Sites",
      "items": {
        "$ref": "#/definitions/site"
      }
    },
    "stick_rule": {
      "description": "Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.",
      "type": "object",
      "title": "Stick Rule",
      "required": [
        "id",
        "type",
        "pattern"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "pattern": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "table": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "match",
            "on",
            "store-request",
            "store-response"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "id": 0,
        "pattern": "src",
        "type": "storeonly"
      }
    },
    "stick_rules": {
      "description": "HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)",
      "type": "array",
      "title": "Stick Rules Array",
      "items": {
        "$ref": "#/definitions/stick_rule"
      }
    },
    "stick_table": {
      "description": "Stick Table Information",
      "type": "object",
      "title": "Stick Table",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "enum": [
                  "server_id",
                  "gpc0",
                  "gpc0_rate",
                  "gpc1",
                  "gpc1_rate",
                  "conn_cnt",
                  "conn_cur",
                  "conn_rate",
                  "sess_cnt",
                  "sess_rate",
                  "http_req_cnt",
                  "http_req_rate",
                  "http_err_cnt",
                  "http_err_rate",
                  "bytes_in_cnt",
                  "bytes_in_rate",
                  "bytes_out_cnt",
                  "bytes_out_rate"
                ]
              },
              "period": {
                "type": "integer",
                "x-dependency": {
                  "type": {
                    "value": "rate"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "rate",
                  "counter"
                ]
              }
            },
            "x-go-name": "StickTableField"
          }
        },
        "name": {
          "type": "string"
        },
        "process": {
          "description": "Process number if master-worker mode",
          "type": "integer",
          "x-nullable": true
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "ip",
            "ipv6",
            "integer",
            "string",
            "binary"
          ]
        },
        "used": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "stick_table_entries": {
      "description": "Entries of one runtime stick table",
      "type": "array",
      "title": "Stick Tables Entries",
      "items": {
        "$ref": "#/definitions/stick_table_entry"
      }
    },
    "stick_table_entry": {
      "description": "One entry in stick table",
      "type": "object",
      "title": "Stick Table Entry",
      "properties": {
        "bytes_in_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_in_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cur": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "exp": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "server_id": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "use": {
          "type": "boolean"
        }
      }
    },
    "stick_tables": {
      "description": "Array of runtime stick tables",
      "type": "array",
      "title": "Stick Tables Array",
      "items": {
        "$ref": "#/definitions/stick_table"
      }
    },
    "tcp_request_rule": {
      "description": "HAProxy TCP Request Rule configuration (corresponds to tcp-request)",
      "type": "object",
      "title": "TCP Request Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-nullable": false
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "connection",
            "content",
            "inspect-delay",
            "session"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "id": 0,
        "type": "accept"
      }
    },
    "tcp_request_rules": {
      "description": "HAProxy TCP request rules array (corresponds to tcp-request directive)",
      "type": "array",
      "title": "TCP Request Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_request_rule"
      }
    },
    "tcp_response_rule": {
      "description": "HAProxy TCP Response Rule configuration (corresponds to tcp-response)",
      "type": "object",
      "title": "TCP Response Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "content"
            }
          },
          "x-nullable": false
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "content",
            "inspect-delay"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "id": 0,
        "type": "accept"
      }
    },
    "tcp_response_rules": {
      "description": "HAProxy TCP response rules array (corresponds to tcp-response directive)",
      "type": "array",
      "title": "TCP Response Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_response_rule"
      }
    },
    "transaction": {
      "description": "HAProxy configuration transaction",
      "type": "object",
      "title": "Configuration transaction",
      "properties": {
        "_version": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "success"
          ]
        }
      },
      "example": {
        "_version": 2,
        "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
        "status": "in_progress"
      }
    },
    "transactions": {
      "description": "Configuration transactions array",
      "type": "array",
      "title": "Transactions array",
      "items": {
        "$ref": "#/definitions/transaction"
      }
    }
  },
  "parameters": {
    "force_reload": {
      "type": "boolean",
      "default": false,
      "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
      "name": "force_reload",
      "in": "query"
    },
    "transaction_id": {
      "type": "string",
      "x-nullable": false,
      "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
      "name": "transaction_id",
      "in": "query"
    },
    "version": {
      "type": "integer",
      "x-nullable": false,
      "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
      "name": "version",
      "in": "query"
    }
  },
  "responses": {
    "AlreadyExists": {
      "description": "The specified resource already exists",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    },
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    },
    "DefaultError": {
      "description": "General Error",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic_auth": null
    }
  ],
  "tags": [
    {
      "description": "API autodiscover endpoints",
      "name": "Discovery"
    },
    {
      "name": "Information"
    },
    {
      "name": "Specification"
    },
    {
      "description": "Managing transactions. Configuration changes can be grouped in the transaction. You start the \ntransaction with trasactions POST, and call the configuration changes you need with parameter \ntransaction_id. When you want to commit the transaction, you call the transactions PUT and all changes\nin that transaction is commited. If you call a configuration change without the transaction_id, \ntransaction mechanism is implicitly called with one operation in transaction.\n",
      "name": "Transactions"
    },
    {
      "description": "Checking reload success. To avoid constant reloading we reload in intervals that are configurable when\nwith reload-delay option. When a change to configuration is made and force_reload url query string \nparameter is false we issue a request for reload, and return the reload ID in response header. You can\nthen use reloads endpoints to check the status of that reload ID. If force_reload is true, we override all\nof this and reload immediately.\n",
      "name": "Reloads"
    },
    {
      "description": "Managing sites (simple configuration mode). Sites are considered as one frontend with multiple backends \nconnected to it via default_backend or use-backend directives.\n",
      "name": "Sites"
    },
    {
      "description": "Stats container",
      "name": "Stats"
    },
    {
      "description": "Managing global configuration (advanced mode)",
      "name": "Global"
    },
    {
      "description": "Managing defaults configuration (advanced mode)",
      "name": "Defaults"
    },
    {
      "description": "Managing frontend configuration (advanced mode)",
      "name": "Frontend"
    },
    {
      "description": "Managing backend configurations (advanced mode)",
      "name": "Backend"
    },
    {
      "description": "Managing frontend bind configurations (advanced mode)",
      "name": "Bind"
    },
    {
      "description": "Managing backend server configurations (advanced mode)",
      "name": "Server"
    },
    {
      "description": "Various frontend options (advanced mode)",
      "name": "Frontend options"
    },
    {
      "description": "Various backend options (advanced mode)",
      "name": "Backend options"
    },
    {
      "description": "Raw HAProxy configuration management (advanced mode)",
      "name": "Configuration"
    },
    {
      "description": "Managing advanced haproxy configuration (advanced mode)",
      "name": "HAProxy configuration management"
    },
    {
      "name": "TCPRequestRule"
    },
    {
      "name": "HTTPRequestRule"
    },
    {
      "name": "HTTPResponseRule"
    },
    {
      "name": "BackendSwitchingRule"
    },
    {
      "name": "ServerSwitchingRule"
    },
    {
      "name": "TCPResponseRule"
    },
    {
      "name": "Filter"
    },
    {
      "name": "StickRule"
    },
    {
      "name": "LogTarget"
    },
    {
      "name": "ACL"
    }
  ],
  "externalDocs": {
    "description": "HAProxy Documentation",
    "url": "https://cbonte.github.io/haproxy-dconv/"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for editing and managing haproxy instances. Provides process information, configuration management,\nhaproxy stats and logs.\n",
    "title": "HAProxy Data Plane API",
    "contact": {
      "name": "HAProxy Support",
      "url": "https://my.haproxy.com/portal/cust/login",
      "email": "support@haproxy.com"
    },
    "version": "2.0"
  },
  "basePath": "/v2",
  "paths": {
    "/": {
      "get": {
        "description": "Returns a list of root endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of root endpoints",
        "operationId": "getAPIEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "description": "Return API, hardware and OS information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return API, hardware and OS information",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/info"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "description": "Returns a list of API managed services endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of service endpoints",
        "operationId": "getServicesEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy": {
      "get": {
        "description": "Returns a list of HAProxy related endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy related endpoints",
        "operationId": "getHaproxyEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced configuration of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced configuration endpoints",
        "operationId": "getConfigurationEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/acls": {
      "get": {
        "description": "Returns all ACL lines that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Return an array of all ACL lines",
        "operationId": "getAcls",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acls"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new ACL line of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Add a new ACL line",
        "operationId": "createAcl",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "ACL line created",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/acls/{id}": {
      "get": {
        "description": "Returns one ACL line configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Return one ACL line",
        "operationId": "getAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acl"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a ACL line configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Replace a ACL line",
        "operationId": "replaceAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ACL line replaced",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a ACL line configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ],
        "summary": "Delete a ACL line",
        "operationId": "deleteAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "ACL line deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Return an array of all Backend Switching Rules",
        "operationId": "getBackendSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Backend Switching Rule of the specified type in the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Add a new Backend Switching Rule",
        "operationId": "createBackendSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend Switching Rule created",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules/{id}": {
      "get": {
        "description": "Returns one Backend Switching Rule configuration by it's ID in the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Return one Backend Switching Rule",
        "operationId": "getBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Backend Switching Rule configuration by it's ID in the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Replace a Backend Switching Rule",
        "operationId": "replaceBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Backend Switching Rule configuration by it's ID from the specified frontend.",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ],
        "summary": "Delete a Backend Switching Rule",
        "operationId": "deleteBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend Switching Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backends": {
      "get": {
        "description": "Returns an array of all configured backends.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Return an array of backends",
        "operationId": "getBackends",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new backend to the configuration file.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Add a backend",
        "operationId": "createBackend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend created",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backends/{name}": {
      "get": {
        "description": "Returns one backend configuration by it's name.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Return a backend",
        "operationId": "getBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a backend configuration by it's name.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Replace a backend",
        "operationId": "replaceBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend replaced",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ],
        "summary": "Delete a backend",
        "operationId": "deleteBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/binds": {
      "get": {
        "description": "Returns an array of all binds that are configured in specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Return an array of binds",
        "operationId": "getBinds",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/binds"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new bind in the specified frontend in the configuration file.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Add a new bind",
        "operationId": "createBind",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Bind created",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/binds/{name}": {
      "get": {
        "description": "Returns one bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Return one bind",
        "operationId": "getBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/bind"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Replace a bind",
        "operationId": "replaceBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Bind replaced",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ],
        "summary": "Delete a bind",
        "operationId": "deleteBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Bind deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/defaults": {
      "get": {
        "description": "Returns defaults part of configuration.",
        "tags": [
          "Defaults",
          "HAProxy configuration management"
        ],
        "summary": "Return defaults part of configuration",
        "operationId": "getDefaults",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/defaults"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replace defaults part of config",
        "tags": [
          "Defaults",
          "HAProxy configuration management"
        ],
        "summary": "Replace defaults",
        "operationId": "replaceDefaults",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Defaults replaced",
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/defaults"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/filters": {
      "get": {
        "description": "Returns all Filters that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Return an array of all Filters",
        "operationId": "getFilters",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filters"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Filter of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Add a new Filter",
        "operationId": "createFilter",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Filter created",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/filters/{id}": {
      "get": {
        "description": "Returns one Filter configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Return one Filter",
        "operationId": "getFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filter"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Filter configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Replace a Filter",
        "operationId": "replaceFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Filter replaced",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Filter configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ],
        "summary": "Delete a Filter",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Filter deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends": {
      "get": {
        "description": "Returns an array of all configured frontends.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Return an array of frontends",
        "operationId": "getFrontends",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new frontend to the configuration file.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Add a frontend",
        "operationId": "createFrontend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Frontend created",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends/{name}": {
      "get": {
        "description": "Returns one frontend configuration by it's name.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Return a frontend",
        "operationId": "getFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a frontend configuration by it's name.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Replace a frontend",
        "operationId": "replaceFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Frontend replaced",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ],
        "summary": "Delete a frontend",
        "operationId": "deleteFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Frontend deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/global": {
      "get": {
        "description": "Returns global part of configuration.",
        "tags": [
          "Global",
          "HAProxy configuration management"
        ],
        "summary": "Return a global part of configuration",
        "operationId": "getGlobal",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/global"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replace global part of config",
        "tags": [
          "Global",
          "HAProxy configuration management"
        ],
        "summary": "Replace global",
        "operationId": "replaceGlobal",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Global replaced",
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/global"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules": {
      "get": {
        "description": "Returns all HTTP Request Rules that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Return an array of all HTTP Request Rules",
        "operationId": "getHTTPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Request Rule of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Add a new HTTP Request Rule",
        "operationId": "createHTTPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Request Rule created",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules/{id}": {
      "get": {
        "description": "Returns one HTTP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Return one HTTP Request Rule",
        "operationId": "getHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Replace a HTTP Request Rule",
        "operationId": "replaceHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Request Rule configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ],
        "summary": "Delete a HTTP Request Rule",
        "operationId": "deleteHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Request Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules": {
      "get": {
        "description": "Returns all HTTP Response Rules that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Return an array of all HTTP Response Rules",
        "operationId": "getHTTPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Response Rule of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Add a new HTTP Response Rule",
        "operationId": "createHTTPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Response Rule created",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules/{id}": {
      "get": {
        "description": "Returns one HTTP Response Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Return one HTTP Response Rule",
        "operationId": "getHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Response Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Replace a HTTP Response Rule",
        "operationId": "replaceHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Response Rule configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ],
        "summary": "Delete a HTTP Response Rule",
        "operationId": "deleteHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Response Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets": {
      "get": {
        "description": "Returns all Log Targets that are configured in specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Return an array of all Log Targets",
        "operationId": "getLogTargets",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_targets"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Log Target of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Add a new Log Target",
        "operationId": "createLogTarget",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Log Target created",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets/{id}": {
      "get": {
        "description": "Returns one Log Target configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Return one Log Target",
        "operationId": "getLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_target"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Log Target configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Replace a Log Target",
        "operationId": "replaceLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Log Target replaced",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Log Target configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ],
        "summary": "Delete a Log Target",
        "operationId": "deleteLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Log Target deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/raw": {
      "get": {
        "description": "Returns HAProxy configuration file in plain text",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Configuration",
          "HAProxy configuration management"
        ],
        "summary": "Return HAProxy configuration",
        "operationId": "getHAProxyConfiguration",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Push a new haproxy configuration file in plain text",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Configuration",
          "HAProxy configuration management"
        ],
        "summary": "Push new haproxy configuration",
        "operationId": "postHAProxyConfiguration",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "New HAProxy configuration pushed",
            "schema": {
              "type": "string"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Return an array of all Server Switching Rules",
        "operationId": "getServerSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Server Switching Rule of the specified type in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Add a new Server Switching Rule",
        "operationId": "createServerSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Server Switching Rule created",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules/{id}": {
      "get": {
        "description": "Returns one Server Switching Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Return one Server Switching Rule",
        "operationId": "getServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Server Switching Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Replace a Server Switching Rule",
        "operationId": "replaceServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Server Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Server Switching Rule configuration by it's ID from the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ],
        "summary": "Delete a Server Switching Rule",
        "operationId": "deleteServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server Switching Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/servers": {
      "get": {
        "description": "Returns an array of all servers that are configured in specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Return an array of servers",
        "operationId": "getServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/servers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new server in the specified backend in the configuration file.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Add a new server",
        "operationId": "createServer",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Server created",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/servers/{name}": {
      "get": {
        "description": "Returns one server configuration by it's name in the specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Return one server",
        "operationId": "getServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a server configuration by it's name in the specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Replace a server",
        "operationId": "replaceServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Server replaced",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a server configuration by it's name in the specified backend.",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ],
        "summary": "Delete a server",
        "operationId": "deleteServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules": {
      "get": {
        "description": "Returns all Stick Rules that are configured in specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Return an array of all Stick Rules",
        "operationId": "getStickRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Stick Rule of the specified type in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Add a new Stick Rule",
        "operationId": "createStickRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Stick Rule created",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules/{id}": {
      "get": {
        "description": "Returns one Stick Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Return one Stick Rule",
        "operationId": "getStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Stick Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Replace a Stick Rule",
        "operationId": "replaceStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Stick Rule replaced",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Stick Rule configuration by it's ID from the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ],
        "summary": "Delete a Stick Rule",
        "operationId": "deleteStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Stick Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules": {
      "get": {
        "description": "Returns all TCP Request Rules that are configured in specified parent and parent type.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Return an array of all TCP Request Rules",
        "operationId": "getTCPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Request Rule of the specified type in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Add a new TCP Request Rule",
        "operationId": "createTCPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Request Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules/{id}": {
      "get": {
        "description": "Returns one TCP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Return one TCP Request Rule",
        "operationId": "getTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Request Rule configuration by it's ID in the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Replace a TCP Request Rule",
        "operationId": "replaceTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Request Rule configuration by it's ID from the specified parent.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ],
        "summary": "Delete a TCP Request Rule",
        "operationId": "deleteTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Request Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules": {
      "get": {
        "description": "Returns all TCP Response Rules that are configured in specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Return an array of all TCP Response Rules",
        "operationId": "getTCPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Response Rule of the specified type in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Add a new TCP Response Rule",
        "operationId": "createTCPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Response Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules/{id}": {
      "get": {
        "description": "Returns one TCP Response Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Return one TCP Response Rule",
        "operationId": "getTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Response Rule configuration by it's ID in the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Replace a TCP Response Rule",
        "operationId": "replaceTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Response Rule configuration by it's ID from the specified backend.",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ],
        "summary": "Delete a TCP Response Rule",
        "operationId": "deleteTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Response Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/reloads": {
      "get": {
        "description": "Returns a list of HAProxy reloads.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Reloads"
        ],
        "summary": "Return list of HAProxy Reloads.",
        "operationId": "getReloads",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/reloads"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/reloads/{id}": {
      "get": {
        "description": "Returns one HAProxy reload status.",
        "tags": [
          "Reloads"
        ],
        "summary": "Return one HAProxy reload status",
        "operationId": "getReload",
        "parameters": [
          {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$",
            "type": "string",
            "description": "Reload id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/reload"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced runtime settings of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced runtime endpoints",
        "operationId": "getRuntimeEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/info": {
      "get": {
        "description": "Return HAProxy process information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return HAProxy process information",
        "operationId": "getHaproxyProcessInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/process_infos"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/servers": {
      "get": {
        "description": "Returns an array of all servers' runtime settings.",
        "tags": [
          "Server",
          "Backend options"
        ],
        "summary": "Return an array of runtime servers' setings",
        "operationId": "getRuntimeServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_servers"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/servers/{name}": {
      "get": {
        "description": "Returns one server runtime settings by it's name in the specified backend.",
        "tags": [
          "Server",
          "Backend options"
        ],
        "summary": "Return one server runtime settings",
        "operationId": "getRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a server transient settings by it's name in the specified backend.",
        "tags": [
          "Server",
          "Backend options"
        ],
        "summary": "Replace server transient settings",
        "operationId": "replaceRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server transient settings replaced",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_table_entries": {
      "get": {
        "description": "Returns an array of all entries in a given stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table Entries",
        "operationId": "getStickTableEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "stick_table",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "A list of filters in format data.\u003ctype\u003e \u003coperator\u003e \u003cvalue\u003e separated by comma",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Key which we want the entries for",
            "name": "key",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Max number of entries to be returned for pagination",
            "name": "count",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset which indicates how many items we skip in pagination",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table_entries"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables": {
      "get": {
        "description": "Returns an array of all stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Tables",
        "operationId": "getStickTables",
        "parameters": [
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not all processes are returned",
            "name": "process",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_tables"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables/{name}": {
      "get": {
        "description": "Returns one stick table from runtime.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table",
        "operationId": "getStickTable",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/sites": {
      "get": {
        "description": "Returns an array of all configured sites.",
        "tags": [
          "Sites"
        ],
        "summary": "Return an array of sites",
        "operationId": "getSites",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/sites"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new site to the configuration file.",
        "tags": [
          "Sites"
        ],
        "summary": "Add a site",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Site created",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/sites/{name}": {
      "get": {
        "description": "Returns one site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Return a site",
        "operationId": "getSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/site"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Replace a site",
        "operationId": "replaceSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Site replaced",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a site from the configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Delete a site",
        "operationId": "deleteSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/stats": {
      "get": {
        "description": "Returns a list of HAProxy stats endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy stats endpoints",
        "operationId": "getStatsEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/stats/native": {
      "get": {
        "description": "Getting stats from the HAProxy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Stats"
        ],
        "summary": "Gets stats",
        "operationId": "getStats",
        "parameters": [
          {
            "enum": [
              "frontend",
              "backend",
              "server"
            ],
            "type": "string",
            "description": "Object type to get stats for (one of frontend, backend, server)",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object name to get stats for",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-dependency": {
              "query.type": "server"
            },
            "description": "Object parent name to get stats for, in case the object is a server",
            "name": "parent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/transactions": {
      "get": {
        "description": "Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Return list of HAProxy configuration transactions.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "enum": [
              "failed",
              "in_progress"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/transactions"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Start a new transaction",
        "operationId": "startTransaction",
        "parameters": [
          {
            "type": "integer",
            "description": "Configuration version on which to work on",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/transactions/{id}": {
      "get": {
        "description": "Returns one HAProxy configuration transactions.",
        "tags": [
          "Transactions"
        ],
        "summary": "Return one HAProxy configuration transactions",
        "operationId": "getTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "tags": [
          "Transactions"
        ],
        "summary": "Commit transaction",
        "operationId": "commitTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction succesfully commited",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/transaction"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a transaction.",
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/specification": {
      "get": {
        "description": "Return Data Plane API OpenAPI specification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Specification"
        ],
        "summary": "Data Plane API Specification",
        "operationId": "getSpecification",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "acl": {
      "description": "The use of Access Control Lists (ACL) provides a flexible solution to perform\ncontent switching and generally to take decisions based on content extracted\nfrom the request, the response or any environmental status.\n",
      "type": "object",
      "title": "ACL Lines",
      "required": [
        "id",
        "acl_name",
        "criterion",
        "value"
      ],
      "properties": {
        "acl_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "criterion": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "type": "string",
          "x-nullable": false
        }
      },
      "additionalProperties": false
    },
    "acls": {
      "description": "HAProxy ACL lines array (corresponds to acl directives)",
      "type": "array",
      "title": "ACL Lines Array",
      "items": {
        "$ref": "#/definitions/acl"
      }
    },
    "backend": {
      "description": "HAProxy backend configuration",
      "type": "object",
      "title": "Backend",
      "required": [
        "name"
      ],
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check"
          ],
          "x-display-name": "Advanced Check"
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "cookie": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/cookie"
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "hash_type": {
          "type": "object",
          "properties": {
            "function": {
              "type": "string",
              "enum": [
                "sdbm",
                "djb2",
                "wt6",
                "crc32"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "map-based",
                "consistent"
              ]
            },
            "modifier": {
              "type": "string",
              "enum": [
                "avalanche"
              ]
            }
          }
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "httpchk": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/httpchk"
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "stick_table": {
          "type": "object",
          "properties": {
            "expire": {
              "type": "integer",
              "x-nullable": true
            },
            "keylen": {
              "type": "integer",
              "x-display-name": "Key Length",
              "x-nullable": true
            },
            "nopurge": {
              "type": "boolean",
              "x-display-name": "No Purge"
            },
            "peers": {
              "type": "string",
              "pattern": "^[^\\s]+$"
            },
            "size": {
              "type": "integer",
              "x-nullable": true
            },
            "store": {
              "type": "string",
              "pattern": "^[^\\s]+$"
            },
            "type": {
              "type": "string",
              "enum": [
                "ip",
                "ipv6",
                "integer",
                "string",
                "binary"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "balance": {
          "algorithm": "roundrobin"
        },
        "forwardfor": {
          "enabled": "enabled"
        },
        "httpchk": {
          "method": "OPTIONS",
          "uri": "/check",
          "version": "HTTP/1.1"
        },
        "mode": "http",
        "name": "test_backend"
      }
    },
    "backend_switching_rule": {
      "description": "HAProxy backend switching rule configuration (corresponds to use_backend directive)",
      "type": "object",
      "title": "Backend Switching Rule",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Backend Name",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "id": 0,
        "name": "test_backend"
      }
    },
    "backend_switching_rules": {
      "description": "HAProxy backend switching rules array (corresponds to use_backend directives)",
      "type": "array",
      "title": "Backend Switching Rules Array",
      "items": {
        "$ref": "#/definitions/backend_switching_rule"
      }
    },
    "backends": {
      "description": "HAProxy backends array",
      "type": "array",
      "title": "Backends",
      "items": {
        "$ref": "#/definitions/backend"
      }
    },
    "balance": {
      "type": "object",
      "required": [
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": [
            "roundrobin",
            "static-rr",
            "leastconn",
            "first",
            "source",
            "uri",
            "url_param",
            "hdr",
            "random",
            "rdp-cookie"
          ]
        },
        "hdr_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "hdr"
            }
          },
          "x-display-name": "Header Name"
        },
        "hdr_use_domain_only": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "hdr"
            }
          },
          "x-display-name": "Header Use Domain Only"
        },
        "random_draws": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "random"
            }
          },
          "x-display-name": "Random Draws",
          "x-nullable": false
        },
        "rdp_cookie_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "value": "rdp-cookie"
            }
          },
          "x-display-name": "Rdp Cookie Name"
        },
        "uri_depth": {
          "type": "integer",
          "pattern": "^[^\\d+$]",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Depth"
        },
        "uri_len": {
          "type": "integer",
          "pattern": "^[^\\d+$]",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Len"
        },
        "uri_whole": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Whole"
        },
        "url_param": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param"
        },
        "url_param_check_post": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Check Post"
        },
        "url_param_max_wait": {
          "type": "integer",
          "pattern": "^[^\\d+$]",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Max Weight"
        }
      }
    },
    "bind": {
      "description": "HAProxy frontend bind configuration",
      "type": "object",
      "title": "Bind",
      "required": [
        "name"
      ],
      "properties": {
        "accept_proxy": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "ssl": {
          "type": "boolean"
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "tcp_user_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "transparent": {
          "type": "boolean"
        },
        "v4v6": {
          "type": "boolean"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "optional",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "127.0.0.1",
        "name": "http",
        "port": 80
      }
    },
    "binds": {
      "description": "HAProxy frontend binds array (corresponds to bind directives)",
      "type": "array",
      "title": "Binds",
      "items": {
        "$ref": "#/definitions/bind"
      }
    },
    "cookie": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "domain": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "dynamic": {
          "type": "boolean"
        },
        "httponly": {
          "type": "boolean"
        },
        "indirect": {
          "type": "boolean"
        },
        "maxidle": {
          "type": "integer",
          "pattern": "^[^\\d+$]"
        },
        "maxlife": {
          "type": "integer",
          "pattern": "^[^\\d+$]"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "nocache": {
          "type": "boolean"
        },
        "postonly": {
          "type": "boolean"
        },
        "preserve": {
          "type": "boolean"
        },
        "secure": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "rewrite",
            "insert",
            "prefix"
          ]
        }
      }
    },
    "default_server": {
      "type": "object",
      "properties": {
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "fall": {
          "type": "integer",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "defaults": {
      "description": "HAProxy defaults configuration",
      "type": "object",
      "title": "Defaults",
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check"
          ],
          "x-display-name": "Advanced Check"
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clflog": {
          "type": "boolean",
          "x-display-name": "CLF Log"
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Client TCP Keep Alive"
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continuous Statistics"
        },
        "cookie": {
          "$ref": "#/definitions/cookie"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "error_files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorfile"
          },
          "x-go-name": "ErrorFiles"
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "$ref": "#/definitions/forwardfor"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ]
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "http_request_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "httpchk": {
          "$ref": "#/definitions/httpchk"
        },
        "httplog": {
          "type": "boolean",
          "x-display-name": "HTTP Log"
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "tcp",
            "http"
          ]
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tcplog": {
          "type": "boolean",
          "x-display-name": "TCP Log"
        }
      },
      "additionalProperties": false
    },
    "endpoint": {
      "description": "Endpoint definition",
      "type": "object",
      "title": "Endpoint",
      "properties": {
        "description": {
          "description": "Endpoint description",
          "type": "string"
        },
        "title": {
          "description": "Endpoint title",
          "type": "string"
        },
        "url": {
          "description": "Path to the endpoint",
          "type": "string"
        }
      }
    },
    "endpoints": {
      "description": "Collection of endpoints",
      "type": "array",
      "title": "Endpoints Array",
      "items": {
        "$ref": "#/definitions/endpoint"
      }
    },
    "error": {
      "description": "API Error",
      "type": "object",
      "title": "Error",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "errorfile": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            200,
            400,
            403,
            405,
            408,
            425,
            429,
            500,
            502,
            503,
            504
          ]
        },
        "file": {
          "type": "string"
        }
      },
      "x-display-name": "Error File"
    },
    "filter": {
      "description": "HAProxy filters",
      "type": "object",
      "title": "Filter",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache"
            }
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "spoe_config": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "spoe"
            }
          }
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "spoe"
            }
          }
        },
        "trace_hexdump": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_rnd_forwarding": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Forwarding"
        },
        "trace_rnd_parsing": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Parsing"
        },
        "type": {
          "type": "string",
          "enum": [
            "trace",
            "compression",
            "spoe",
            "cache"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "id": 0,
        "trace_name": "name",
        "trace_rnd_parsing": true,
        "type": "trace"
      }
    },
    "filters": {
      "description": "HAProxy filters array (corresponds to filter directive)",
      "type": "array",
      "title": "Filters Array",
      "items": {
        "$ref": "#/definitions/filter"
      }
    },
    "forwardfor": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "except": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "header": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "ifnone": {
          "type": "boolean"
        }
      },
      "x-display-name": "ForwardFor"
    },
    "frontend": {
      "description": "HAProxy frontend configuration",
      "type": "object",
      "title": "Frontend",
      "required": [
        "name"
      ],
      "properties": {
        "clflog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "CLF Log"
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "Client TCP Keep Alive"
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continous Statistics"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "httplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Log"
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "tcplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Log"
        }
      },
      "additionalProperties": false,
      "example": {
        "default_backend": "test_backend",
        "http_connection_mode": "http-keep-alive",
        "maxconn": 2000,
        "mode": "http",
        "name": "test_frontend"
      }
    },
    "frontends": {
      "description": "HAProxy frontends array",
      "type": "array",
      "title": "Frontends",
      "items": {
        "$ref": "#/definitions/frontend"
      }
    },
    "global": {
      "description": "HAProxy global configuration",
      "type": "object",
      "title": "Global",
      "properties": {
        "cpu_maps": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "process",
              "cpu_set"
            ],
            "properties": {
              "cpu_set": {
                "type": "string",
                "x-display-name": "CPU Set"
              },
              "process": {
                "type": "string",
                "x-display-name": "Process/Thread Set"
              }
            },
            "x-go-name": "CPUMap"
          },
          "x-display-name": "CPU Maps",
          "x-go-name": "CPUMaps"
        },
        "daemon": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "external_check": {
          "type": "boolean",
          "x-display-name": "External Check"
        },
        "master-worker": {
          "type": "boolean",
          "x-display-name": "Master Worker Mode"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections"
        },
        "nbproc": {
          "type": "integer",
          "x-display-name": "Number of Processes"
        },
        "nbthread": {
          "type": "integer",
          "x-display-name": "Number of Threads"
        },
        "pidfile": {
          "type": "string",
          "x-display-name": "PID File"
        },
        "runtime_apis": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              },
              "exposeFdListeners": {
                "type": "boolean",
                "x-display-name": "Expose FD Listeners"
              },
              "level": {
                "type": "string",
                "enum": [
                  "user",
                  "operator",
                  "admin"
                ]
              },
              "mode": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              },
              "process": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              }
            },
            "x-go-name": "RuntimeAPI"
          },
          "x-display-name": "Runtime APIs",
          "x-go-name": "RuntimeAPIs"
        },
        "ssl_default_bind_ciphers": {
          "type": "string",
          "x-display-name": "SSL Default Bind Ciphers"
        },
        "ssl_default_bind_options": {
          "type": "string",
          "x-display-name": "SSL Default Bind Options"
        },
        "stats_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tune_ssl_default_dh_param": {
          "type": "integer",
          "x-display-name": "SSL Default DH Parameter Size"
        }
      },
      "additionalProperties": false
    },
    "http_request_rule": {
      "description": "HAProxy HTTP request rule configuration (corresponds to http-request directives)",
      "type": "object",
      "title": "HTTP Request Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL File"
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL Key Format"
        },
        "auth_realm": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "auth"
            }
          },
          "x-display-name": "Authentication Realm"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "deny_status": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit"
              ]
            }
          },
          "x-nullable": false
        },
        "hdr_format": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "path_fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-path"
            }
          }
        },
        "query-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-query"
            }
          }
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code"
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Engine"
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Group"
        },
        "type": {
          "type": "string",
          "enum": [
            "allow",
            "deny",
            "auth",
            "redirect",
            "tarpit",
            "add-header",
            "replace-header",
            "replace-value",
            "del-header",
            "set-header",
            "set-log-level",
            "set-path",
            "set-query",
            "set-uri",
            "set-var",
            "send-spoe-group",
            "add-acl",
            "del-acl"
          ],
          "x-nullable": false
        },
        "uri-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-uri"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "id": 0,
        "type": "add-header"
      }
    },
    "http_request_rules": {
      "description": "HAProxy HTTP request rules array (corresponds to http-request directives)",
      "type": "array",
      "title": "HTTP Request Rules Array",
      "items": {
        "$ref": "#/definitions/http_request_rule"
      }
    },
    "http_response_rule": {
      "description": "HAProxy HTTP response rule configuration (corresponds to http-response directives)",
      "type": "object",
      "title": "HTTP Response Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          }
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACK Key Format"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "hdr_format": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code"
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "status": {
          "type": "integer",
          "maximum": 999,
          "minimum": 100,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-status"
            }
          },
          "x-nullable": false
        },
        "status_reason": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "set-status"
            }
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "allow",
            "deny",
            "redirect",
            "add-header",
            "set-header",
            "del-header",
            "set-log-level",
            "set-var",
            "set-status",
            "send-spoe-group",
            "replace-header",
            "replace-value",
            "add-acl",
            "del-acl"
          ],
          "x-nullable": false
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "id": 0,
        "type": "add-header"
      }
    },
    "http_response_rules": {
      "description": "HAProxy HTTP response rules array (corresponds to http-response directives)",
      "type": "array",
      "title": "HTTP Response Rules Array",
      "items": {
        "$ref": "#/definitions/http_response_rule"
      }
    },
    "httpchk": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "HEAD",
            "PUT",
            "POST",
            "GET",
            "TRACE",
            "PATCH"
          ]
        },
        "uri": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "version": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "x-display-name": "HTTP Check"
    },
    "info": {
      "description": "General API, OS and hardware information",
      "type": "object",
      "title": "Information",
      "properties": {
        "api": {
          "type": "object",
          "properties": {
            "build_date": {
              "description": "HAProxy Dataplane API build date",
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "description": "HAProxy Dataplane API version string",
              "type": "string"
            }
          }
        },
        "system": {
          "type": "object",
          "properties": {
            "cpu_info": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "string"
                },
                "num_cpus": {
                  "description": "Number of logical CPUs",
                  "type": "integer"
                }
              }
            },
            "hostname": {
              "description": "Hostname where the HAProxy is running",
              "type": "string"
            },
            "mem_info": {
              "type": "object",
              "properties": {
                "dataplaneapi_memory": {
                  "type": "integer"
                },
                "free_memory": {
                  "type": "integer"
                },
                "total_memory": {
                  "type": "integer"
                }
              }
            },
            "os_string": {
              "description": "OS string",
              "type": "string"
            },
            "time": {
              "description": "Current time in milliseconds since Epoch.",
              "type": "integer"
            },
            "uptime": {
              "description": "System uptime",
              "type": "integer",
              "x-nullable": true
            }
          }
        }
      },
      "example": {
        "api": {
          "build_date": "2019-08-21T17:31:56.000Z",
          "version": "v1.2.1 45a3288.dev"
        },
        "system": {
          "cpu_info": {
            "model": "Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz",
            "num_cpus": 4
          },
          "hostname": "test",
          "mem_info": {
            "dataplaneapi_memory": 44755536,
            "free_memory": 5790642176,
            "total_memory": 16681517056
          },
          "os_string": "Linux 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019",
          "time": 1566401525,
          "uptime": 87340
        }
      }
    },
    "log_target": {
      "description": "Per-instance logging of events and traffic.",
      "type": "object",
      "title": "Log Target",
      "required": [
        "id"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "facility": {
          "type": "string",
          "enum": [
            "kern",
            "user",
            "mail",
            "daemon",
            "auth",
            "syslog",
            "lpr",
            "news",
            "uucp",
            "cron",
            "auth2",
            "ftp",
            "ntp",
            "audit",
            "alert",
            "cron2",
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7"
          ],
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "format": {
          "type": "string",
          "enum": [
            "rfc3164",
            "rfc5424",
            "short",
            "raw"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "global": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "length": {
          "type": "integer",
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "minlevel": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "level": {
              "required": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "nolog": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "log_targets": {
      "description": "HAProxy log target array (corresponds to log directives)",
      "type": "array",
      "title": "Log Target Array",
      "items": {
        "$ref": "#/definitions/log_target"
      }
    },
    "native_stat": {
      "description": "Current stats for one object.",
      "type": "object",
      "title": "Stats",
      "properties": {
        "backend_name": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "name": {
          "type": "string"
        },
        "stats": {
          "type": "object",
          "properties": {
            "act": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "addr": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "agent_code": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_desc": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "agent_duration": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_fall": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_health": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_rise": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "agent_status": {
              "type": "string",
              "enum": [
                "UNK",
                "INI",
                "SOCKERR",
                "L40K",
                "L4TOUT",
                "L4CON",
                "L7OK",
                "L7STS"
              ],
              "x-dependency": {
                "type": "server"
              }
            },
            "algo": {
              "type": "string",
              "x-dependency": {
                "type": "backend"
              }
            },
            "bck": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "bin": {
              "type": "integer",
              "x-nullable": true
            },
            "bout": {
              "type": "integer",
              "x-nullable": true
            },
            "check_code": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_desc": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "check_duration": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_fall": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_health": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_rise": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "check_status": {
              "type": "string",
              "enum": [
                "UNK",
                "INI",
                "SOCKERR",
                "L40K",
                "L4TOUT",
                "L4CON",
                "L6OK",
                "L6TOUT",
                "L6RSP",
                "L7OK",
                "L7OKC",
                "L7TOUT",
                "L7RSP",
                "L7STS"
              ],
              "x-dependency": {
                "type": "server"
              }
            },
            "chkdown": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "chkfail": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "cli_abrt": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_byp": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_in": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_out": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "comp_rsp": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "conn_rate": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "conn_rate_max": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "conn_tot": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "cookie": {
              "type": "string",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              }
            },
            "ctime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "dcon": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "downtime": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "dreq": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "dresp": {
              "type": "integer",
              "x-nullable": true
            },
            "dses": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "econ": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "ereq": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "eresp": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "hanafail": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "hrsp_1xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_2xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_3xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_4xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_5xx": {
              "type": "integer",
              "x-nullable": true
            },
            "hrsp_other": {
              "type": "integer",
              "x-nullable": true
            },
            "iid": {
              "type": "integer",
              "x-nullable": true
            },
            "intercepted": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "lastchg": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "lastsess": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "lbtot": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "mode": {
              "type": "string",
              "enum": [
                "tcp",
                "http",
                "health",
                "unknown"
              ]
            },
            "pid": {
              "type": "integer",
              "x-nullable": true
            },
            "qcur": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "qlimit": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "qmax": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "qtime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "rate": {
              "type": "integer",
              "x-nullable": true
            },
            "rate_lim": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "rate_max": {
              "type": "integer",
              "x-nullable": true
            },
            "req_rate": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "req_rate_max": {
              "type": "integer",
              "x-dependency": {
                "type": "frontend"
              },
              "x-nullable": true
            },
            "req_tot": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "frontend",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "rtime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "scur": {
              "type": "integer",
              "x-nullable": true
            },
            "sid": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "slim": {
              "type": "integer",
              "x-nullable": true
            },
            "smax": {
              "type": "integer",
              "x-nullable": true
            },
            "srv_abrt": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "status": {
              "type": "string",
              "enum": [
                "UP",
                "DOWN",
                "NOLB",
                "MAINT",
                "no check"
              ]
            },
            "stot": {
              "type": "integer",
              "x-nullable": true
            },
            "throttle": {
              "type": "integer",
              "x-dependency": {
                "type": "server"
              },
              "x-nullable": true
            },
            "tracked": {
              "type": "string",
              "x-dependency": {
                "type": "server"
              }
            },
            "ttime": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "weight": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "wredis": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            },
            "wretr": {
              "type": "integer",
              "x-dependency": {
                "type": [
                  "server",
                  "backend"
                ]
              },
              "x-nullable": true
            }
          },
          "x-go-name": "NativeStatStats"
        },
        "type": {
          "type": "string",
          "enum": [
            "backend",
            "server",
            "frontend"
          ]
        }
      },
      "x-go-name": "NativeStat",
      "example": {
        "name": "frontend_test",
        "stats": {
          "bin": 4326578,
          "bout": 889901290,
          "comp_byp": 0,
          "comp_in": 0,
          "comp_out": 0,
          "comp_rsp": 0,
          "conn_rate": 12,
          "conn_rate_max": 456,
          "conn_tot": 45682,
          "dcon": 0,
          "dreq": 4,
          "dresp": 1,
          "dses": 0,
          "ereq": 54,
          "hrsp_1xx": 0,
          "hrsp_2xx": 165,
          "hrsp_3xx": 12,
          "hrsp_4xx": 50,
          "hrsp_5xx": 4,
          "hrsp_other": 0,
          "iid": 0,
          "intercepted": 346,
          "mode": "http",
          "pid": 3204,
          "rate": 64,
          "rate_lim": 20000,
          "rate_max": 4000,
          "req_rate": 49,
          "req_rate_max": 3965,
          "req_total": 1254786,
          "scur": 129,
          "slim": 2000,
          "smax": 2000,
          "status": "UP",
          "stot": 12902
        },
        "type": "frontend"
      }
    },
    "native_stats": {
      "description": "HAProxy stats array",
      "type": "array",
      "title": "Stats Array",
      "items": {
        "description": "Stats from one runtime API",
        "type": "object",
        "title": "Stats collection",
        "properties": {
          "error": {
            "type": "string"
          },
          "runtimeAPI": {
            "type": "string"
          },
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/native_stat"
            }
          }
        },
        "x-go-name": "NativeStatsCollection"
      },
      "x-go-name": "NativeStats"
    },
    "process_infos": {
      "description": "General HAProxy process information",
      "type": "array",
      "title": "HAProxy Information",
      "items": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "active_peers": {
                "type": "integer",
                "x-nullable": true
              },
              "busy_polling": {
                "type": "integer",
                "x-nullable": true
              },
              "bytes_out_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "compress_bps_in": {
                "type": "integer",
                "x-nullable": true
              },
              "compress_bps_out": {
                "type": "integer",
                "x-nullable": true
              },
              "compress_bps_rate_lim": {
                "type": "integer",
                "x-nullable": true
              },
              "conn_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "conn_rate_limit": {
                "type": "integer",
                "x-nullable": true
              },
              "connected_peers": {
                "type": "integer",
                "x-nullable": true
              },
              "cum_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "cum_req": {
                "type": "integer",
                "x-nullable": true
              },
              "cum_ssl_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "curr_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "curr_ssl_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "dropped_logs": {
                "type": "integer",
                "x-nullable": true
              },
              "failed_resolutions": {
                "type": "integer",
                "x-nullable": true
              },
              "hard_max_conn": {
                "type": "integer",
                "x-nullable": true
              },
              "idle_pct": {
                "type": "integer",
                "x-nullable": true
              },
              "jobs": {
                "type": "integer",
                "x-nullable": true
              },
              "listeners": {
                "type": "integer",
                "x-nullable": true
              },
              "max_conn": {
                "type": "integer",
                "x-nullable": true
              },
              "max_conn_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "max_pipes": {
                "type": "integer",
                "x-nullable": true
              },
              "max_sess_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "max_sock": {
                "type": "integer",
                "x-nullable": true
              },
              "max_ssl_conns": {
                "type": "integer",
                "x-nullable": true
              },
              "max_ssl_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "max_zlib_mem_usage": {
                "type": "integer",
                "x-nullable": true
              },
              "mem_max_mb": {
                "type": "integer",
                "x-nullable": true
              },
              "nbthread": {
                "description": "Number of threads",
                "type": "integer",
                "x-display-name": "Number of Threads",
                "x-nullable": true
              },
              "node": {
                "type": "string"
              },
              "pid": {
                "description": "Process id of the replying worker process",
                "type": "integer",
                "x-display-name": "PID",
                "x-nullable": true
              },
              "pipes_free": {
                "type": "integer",
                "x-nullable": true
              },
              "pipes_used": {
                "type": "integer",
                "x-nullable": true
              },
              "pool_alloc_mb": {
                "type": "integer",
                "x-nullable": true
              },
              "pool_failed": {
                "type": "integer",
                "x-nullable": true
              },
              "pool_used_mb": {
                "type": "integer",
                "x-nullable": true
              },
              "process_num": {
                "description": "Process number",
                "type": "integer",
                "x-display-name": "Process Number",
                "x-nullable": true
              },
              "processes": {
                "description": "Number of spawned processes",
                "type": "integer",
                "x-display-name": "Number of processes",
                "x-nullable": true
              },
              "release_date": {
                "description": "HAProxy version release date",
                "type": "string",
                "format": "date"
              },
              "run_queue": {
                "type": "integer",
                "x-nullable": true
              },
              "sess_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "sess_rate_limit": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_backend_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_backend_max_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_cache_lookups": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_cache_misses": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_frontend_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_frontend_max_key_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_frontend_session_reuse": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_rate": {
                "type": "integer",
                "x-nullable": true
              },
              "ssl_rate_limit": {
                "type": "integer",
                "x-nullable": true
              },
              "stopping": {
                "type": "integer",
                "x-nullable": true
              },
              "tasks": {
                "type": "integer",
                "x-nullable": true
              },
              "total_bytes_out": {
                "type": "integer",
                "x-nullable": true
              },
              "ulimit_n": {
                "type": "integer",
                "x-nullable": true
              },
              "unstoppable": {
                "type": "integer",
                "x-nullable": true
              },
              "uptime": {
                "description": "HAProxy uptime in s",
                "type": "integer",
                "x-nullable": true
              },
              "version": {
                "description": "HAProxy version string",
                "type": "string"
              },
              "zlib_mem_usage": {
                "type": "integer",
                "x-nullable": true
              }
            },
            "x-go-name": "ProcessInfoItem"
          },
          "runtimeAPI": {
            "type": "string"
          }
        },
        "x-go-name": "ProcessInfo"
      },
      "example": {
        "haproxy": {
          "address": "127.0.0.1",
          "pid": 1234,
          "processes": 4,
          "release_date": "2016-03-11",
          "time": "2018-07-02T12:00:00.124Z",
          "uptime": 8,
          "version": "1.7-dev1-868ab3-148"
        }
      }
    },
    "redispatch": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "interval": {
          "type": "integer",
          "x-nullable": false
        }
      }
    },
    "reload": {
      "description": "HAProxy reload",
      "type": "object",
      "title": "HAProxy reload",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
        },
        "reload_timestamp": {
          "type": "integer"
        },
        "response": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "succeeded"
          ]
        }
      },
      "example": {
        "id": "2019-01-03-44",
        "status": "in_progress"
      }
    },
    "reloads": {
      "description": "HAProxy reloads array",
      "type": "array",
      "title": "HAProxy Reloads Array",
      "items": {
        "$ref": "#/definitions/reload"
      }
    },
    "runtime_server": {
      "description": "Runtime transient server properties",
      "type": "object",
      "title": "Runtime Server",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false,
          "readOnly": true
        },
        "admin_state": {
          "type": "string",
          "enum": [
            "ready",
            "maint",
            "drain"
          ]
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "operational_state": {
          "type": "string",
          "enum": [
            "up",
            "down",
            "stopping"
          ]
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 0,
          "x-nullable": true,
          "readOnly": true
        }
      },
      "example": {
        "address": "127.0.0.5",
        "admin_state": "up",
        "operational_state": "up",
        "port": 80,
        "server_id": 1,
        "server_name": "web_server"
      }
    },
    "runtime_servers": {
      "description": "HAProxy runtime servers array",
      "type": "array",
      "title": "HAProxy Runtime Servers Array",
      "items": {
        "$ref": "#/definitions/runtime_server"
      }
    },
    "server": {
      "description": "HAProxy backend server configuration",
      "type": "object",
      "title": "Server",
      "required": [
        "name"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "maintenance": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "10.1.1.1",
        "check": "enabled",
        "max-connections": 500,
        "name": "www",
        "port": 8080,
        "weight": 80
      }
    },
    "server_switching_rule": {
      "description": "HAProxy server switching rule configuration (corresponds to use-server directive)",
      "type": "object",
      "title": "Server Switching Rule",
      "required": [
        "id",
        "target_server"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "target_server": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getServers",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "id": 0,
        "target_server": "www"
      }
    },
    "server_switching_rules": {
      "description": "HAProxy backend server switching rules array (corresponds to use-server directives)",
      "type": "array",
      "title": "Server Switching Rules Array",
      "items": {
        "$ref": "#/definitions/server_switching_rule"
      }
    },
    "servers": {
      "description": "HAProxy backend servers array",
      "type": "array",
      "title": "Servers",
      "items": {
        "$ref": "#/definitions/server"
      }
    },
    "site": {
      "description": "Site configuration. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration \nendpoints.\n",
      "type": "object",
      "title": "Site",
      "required": [
        "name"
      ],
      "properties": {
        "farms": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "use_as"
            ],
            "properties": {
              "balance": {
                "$ref": "#/definitions/balance"
              },
              "cond": {
                "type": "string",
                "enum": [
                  "if",
                  "unless"
                ],
                "x-dependency": {
                  "use_as": {
                    "required": true,
                    "value": "conditional"
                  }
                },
                "x-display-name": "Condition"
              },
              "cond_test": {
                "type": "string",
                "x-dependency": {
                  "use_as": {
                    "required": true,
                    "value": "conditional"
                  }
                },
                "x-display-name": "Condition Test"
              },
              "forwardfor": {
                "$ref": "#/definitions/forwardfor"
              },
              "mode": {
                "type": "string",
                "enum": [
                  "http",
                  "tcp"
                ]
              },
              "name": {
                "type": "string",
                "pattern": "^[A-Za-z0-9-_.:]+$",
                "x-nullable": false
              },
              "servers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/server"
                }
              },
              "use_as": {
                "type": "string",
                "enum": [
                  "default",
                  "conditional"
                ],
                "x-nullable": false
              }
            },
            "x-go-name": "SiteFarm"
          }
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "service": {
          "type": "object",
          "properties": {
            "http_connection_mode": {
              "type": "string",
              "enum": [
                "http-tunnel",
                "httpclose",
                "forced-close",
                "http-server-close",
                "http-keep-alive"
              ],
              "x-dependency": {
                "mode": {
                  "value": "http"
                }
              },
              "x-display-name": "HTTP Connection Mode"
            },
            "listeners": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bind"
              }
            },
            "maxconn": {
              "type": "integer",
              "x-display-name": "Max Connections",
              "x-nullable": true
            },
            "mode": {
              "type": "string",
              "enum": [
                "http",
                "tcp"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "farms": [
          {
            "balance": {
              "algorithm": "roundrobin"
            },
            "mode": "http",
            "name": "www_backend",
            "servers": [
              {
                "address": "127.0.1.1",
                "name": "www_server",
                "port": 4567,
                "weight": 30
              },
              {
                "address": "127.0.1.2",
                "name": "www_server_new",
                "port": 4567,
                "weight": 70
              }
            ],
            "use_as": "default"
          }
        ],
        "name": "test_site",
        "service": {
          "http_connection_mode": "httpclose",
          "listeners": [
            {
              "address": "127.0.0.1",
              "name": "test_listener",
              "port": 80
            },
            {
              "address": "127.0.0.1",
              "name": "test_listener_2",
              "port": 8080
            }
          ],
          "maxconn": 2000,
          "mode": "http"
        }
      }
    },
    "sites": {
      "description": "Sites array. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration \nendpoints.\n",
      "type": "array",
      "title": "Sites",
      "items": {
        "$ref": "#/definitions/site"
      }
    },
    "stick_rule": {
      "description": "Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.",
      "type": "object",
      "title": "Stick Rule",
      "required": [
        "id",
        "type",
        "pattern"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "pattern": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "table": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "match",
            "on",
            "store-request",
            "store-response"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "id": 0,
        "pattern": "src",
        "type": "storeonly"
      }
    },
    "stick_rules": {
      "description": "HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)",
      "type": "array",
      "title": "Stick Rules Array",
      "items": {
        "$ref": "#/definitions/stick_rule"
      }
    },
    "stick_table": {
      "description": "Stick Table Information",
      "type": "object",
      "title": "Stick Table",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "enum": [
                  "server_id",
                  "gpc0",
                  "gpc0_rate",
                  "gpc1",
                  "gpc1_rate",
                  "conn_cnt",
                  "conn_cur",
                  "conn_rate",
                  "sess_cnt",
                  "sess_rate",
                  "http_req_cnt",
                  "http_req_rate",
                  "http_err_cnt",
                  "http_err_rate",
                  "bytes_in_cnt",
                  "bytes_in_rate",
                  "bytes_out_cnt",
                  "bytes_out_rate"
                ]
              },
              "period": {
                "type": "integer",
                "x-dependency": {
                  "type": {
                    "value": "rate"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "rate",
                  "counter"
                ]
              }
            },
            "x-go-name": "StickTableField"
          }
        },
        "name": {
          "type": "string"
        },
        "process": {
          "description": "Process number if master-worker mode",
          "type": "integer",
          "x-nullable": true
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "ip",
            "ipv6",
            "integer",
            "string",
            "binary"
          ]
        },
        "used": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "stick_table_entries": {
      "description": "Entries of one runtime stick table",
      "type": "array",
      "title": "Stick Tables Entries",
      "items": {
        "$ref": "#/definitions/stick_table_entry"
      }
    },
    "stick_table_entry": {
      "description": "One entry in stick table",
      "type": "object",
      "title": "Stick Table Entry",
      "properties": {
        "bytes_in_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_in_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cur": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "exp": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "server_id": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "use": {
          "type": "boolean"
        }
      }
    },
    "stick_tables": {
      "description": "Array of runtime stick tables",
      "type": "array",
      "title": "Stick Tables Array",
      "items": {
        "$ref": "#/definitions/stick_table"
      }
    },
    "tcp_request_rule": {
      "description": "HAProxy TCP Request Rule configuration (corresponds to tcp-request)",
      "type": "object",
      "title": "TCP Request Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-nullable": false
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "connection",
            "content",
            "inspect-delay",
            "session"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "id": 0,
        "type": "accept"
      }
    },
    "tcp_request_rules": {
      "description": "HAProxy TCP request rules array (corresponds to tcp-request directive)",
      "type": "array",
      "title": "TCP Request Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_request_rule"
      }
    },
    "tcp_response_rule": {
      "description": "HAProxy TCP Response Rule configuration (corresponds to tcp-response)",
      "type": "object",
      "title": "TCP Response Rule",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "content"
            }
          },
          "x-nullable": false
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "content",
            "inspect-delay"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "id": 0,
        "type": "accept"
      }
    },
    "tcp_response_rules": {
      "description": "HAProxy TCP response rules array (corresponds to tcp-response directive)",
      "type": "array",
      "title": "TCP Response Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_response_rule"
      }
    },
    "transaction": {
      "description": "HAProxy configuration transaction",
      "type": "object",
      "title": "Configuration transaction",
      "properties": {
        "_version": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "success"
          ]
        }
      },
      "example": {
        "_version": 2,
        "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
        "status": "in_progress"
      }
    },
    "transactions": {
      "description": "Configuration transactions array",
      "type": "array",
      "title": "Transactions array",
      "items": {
        "$ref": "#/definitions/transaction"
      }
    }
  },
  "parameters": {
    "force_reload": {
      "type": "boolean",
      "default": false,
      "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
      "name": "force_reload",
      "in": "query"
    },
    "transaction_id": {
      "type": "string",
      "x-nullable": false,
      "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
      "name": "transaction_id",
      "in": "query"
    },
    "version": {
      "type": "integer",
      "x-nullable": false,
      "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
      "name": "version",
      "in": "query"
    }
  },
  "responses": {
    "AlreadyExists": {
      "description": "The specified resource already exists",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    },
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    },
    "DefaultError": {
      "description": "General Error",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "integer",
          "description": "Configuration file version"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic_auth": []
    }
  ],
  "tags": [
    {
      "description": "API autodiscover endpoints",
      "name": "Discovery"
    },
    {
      "name": "Information"
    },
    {
      "name": "Specification"
    },
    {
      "description": "Managing transactions. Configuration changes can be grouped in the transaction. You start the \ntransaction with trasactions POST, and call the configuration changes you need with parameter \ntransaction_id. When you want to commit the transaction, you call the transactions PUT and all changes\nin that transaction is commited. If you call a configuration change without the transaction_id, \ntransaction mechanism is implicitly called with one operation in transaction.\n",
      "name": "Transactions"
    },
    {
      "description": "Checking reload success. To avoid constant reloading we reload in intervals that are configurable when\nwith reload-delay option. When a change to configuration is made and force_reload url query string \nparameter is false we issue a request for reload, and return the reload ID in response header. You can\nthen use reloads endpoints to check the status of that reload ID. If force_reload is true, we override all\nof this and reload immediately.\n",
      "name": "Reloads"
    },
    {
      "description": "Managing sites (simple configuration mode). Sites are considered as one frontend with multiple backends \nconnected to it via default_backend or use-backend directives.\n",
      "name": "Sites"
    },
    {
      "description": "Stats container",
      "name": "Stats"
    },
    {
      "description": "Managing global configuration (advanced mode)",
      "name": "Global"
    },
    {
      "description": "Managing defaults configuration (advanced mode)",
      "name": "Defaults"
    },
    {
      "description": "Managing frontend configuration (advanced mode)",
      "name": "Frontend"
    },
    {
      "description": "Managing backend configurations (advanced mode)",
      "name": "Backend"
    },
    {
      "description": "Managing frontend bind configurations (advanced mode)",
      "name": "Bind"
    },
    {
      "description": "Managing backend server configurations (advanced mode)",
      "name": "Server"
    },
    {
      "description": "Various frontend options (advanced mode)",
      "name": "Frontend options"
    },
    {
      "description": "Various backend options (advanced mode)",
      "name": "Backend options"
    },
    {
      "description": "Raw HAProxy configuration management (advanced mode)",
      "name": "Configuration"
    },
    {
      "description": "Managing advanced haproxy configuration (advanced mode)",
      "name": "HAProxy configuration management"
    },
    {
      "name": "TCPRequestRule"
    },
    {
      "name": "HTTPRequestRule"
    },
    {
      "name": "HTTPResponseRule"
    },
    {
      "name": "BackendSwitchingRule"
    },
    {
      "name": "ServerSwitchingRule"
    },
    {
      "name": "TCPResponseRule"
    },
    {
      "name": "Filter"
    },
    {
      "name": "StickRule"
    },
    {
      "name": "LogTarget"
    },
    {
      "name": "ACL"
    }
  ],
  "externalDocs": {
    "description": "HAProxy Documentation",
    "url": "https://cbonte.github.io/haproxy-dconv/"
  }
}`))
}
