// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dataplaneapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for editing and managing haproxy instances. Provides process information, configuration management,\nhaproxy stats and logs.\n",
    "title": "HAProxy Data Plane API",
    "contact": {
      "name": "HAProxy Support",
      "url": "https://my.haproxy.com/portal/cust/login",
      "email": "support@haproxy.com"
    },
    "version": "2.5"
  },
  "basePath": "/v2",
  "paths": {
    "/": {
      "get": {
        "description": "Returns a list of root endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of root endpoints",
        "operationId": "getAPIEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/cluster": {
      "get": {
        "description": "Returns cluster data",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster"
        ],
        "summary": "Return cluster data",
        "operationId": "getCluster",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Edit cluster settings",
        "tags": [
          "Cluster"
        ],
        "summary": "Edit cluster settings",
        "operationId": "editCluster",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster settings changed",
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Post cluster settings",
        "tags": [
          "Cluster"
        ],
        "summary": "Post cluster settings",
        "operationId": "postCluster",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          {
            "enum": [
              "keep"
            ],
            "type": "string",
            "description": "In case of moving to single mode do we keep or clean configuration",
            "name": "configuration",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Force the advertised address when joining a cluster",
            "name": "advertised_address",
            "in": "query"
          },
          {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "description": "Force the advertised port when joining a cluster",
            "name": "advertised_port",
            "in": "query"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster settings changed",
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Delete cluster settings and move the node back to single mode",
        "tags": [
          "Cluster"
        ],
        "summary": "Delete cluster settings",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "enum": [
              "keep"
            ],
            "type": "string",
            "description": "In case of moving to single mode do we keep or clean configuration",
            "name": "configuration",
            "in": "query"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster settings deleted and node moved to single mode"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/cluster/certificate": {
      "post": {
        "description": "Initiates a certificate refresh",
        "tags": [
          "Cluster"
        ],
        "summary": "Initiates a certificate refresh",
        "operationId": "initiateCertificateRefresh",
        "responses": {
          "200": {
            "description": "refresh activated"
          },
          "403": {
            "description": "refresh not possible"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/info": {
      "get": {
        "description": "Return API, hardware and OS information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return API, hardware and OS information",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/info"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/service_discovery/aws": {
      "get": {
        "description": "Return all configured AWS regions.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return an array of all configured AWS regions",
        "operationId": "getAWSRegions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/awsRegions"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Add a new AWS region.\nCredentials are not required in case Dataplane API is running in an EC2 instance with proper IAM role attached.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Add a new AWS region",
        "operationId": "createAWSRegion",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resource created",
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/service_discovery/aws/{id}": {
      "get": {
        "description": "Return one AWS Region configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return an AWS region",
        "operationId": "getAWSRegion",
        "parameters": [
          {
            "type": "string",
            "description": "AWS region id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/awsRegion"
                }
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replace an AWS region configuration by its id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Replace an AWS region",
        "operationId": "replaceAWSRegion",
        "parameters": [
          {
            "type": "string",
            "description": "AWS Region ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated",
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Delete an AWS region configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Delete an AWS region",
        "operationId": "deleteAWSRegion",
        "parameters": [
          {
            "type": "string",
            "description": "AWS region ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/service_discovery/consul": {
      "get": {
        "description": "Returns all configured Consul servers.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return an array of all configured Consul servers",
        "operationId": "getConsuls",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/consuls"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Consul server.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Add a new Consul server",
        "operationId": "createConsul",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/consul"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Consul created",
            "schema": {
              "$ref": "#/definitions/consul"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/service_discovery/consul/{id}": {
      "get": {
        "description": "Returns one Consul server configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return one Consul server",
        "operationId": "getConsul",
        "parameters": [
          {
            "type": "string",
            "description": "Consul server id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/consul"
                }
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Consul server configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Replace a Consul server",
        "operationId": "replaceConsul",
        "parameters": [
          {
            "type": "string",
            "description": "Consul Index",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/consul"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Consul server replaced",
            "schema": {
              "$ref": "#/definitions/consul"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Consul server configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Delete a Consul server",
        "operationId": "deleteConsul",
        "parameters": [
          {
            "type": "string",
            "description": "Consul server Index",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Consul server deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services": {
      "get": {
        "description": "Returns a list of API managed services endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of service endpoints",
        "operationId": "getServicesEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy": {
      "get": {
        "description": "Returns a list of HAProxy related endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy related endpoints",
        "operationId": "getHaproxyEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced configuration of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced configuration endpoints",
        "operationId": "getConfigurationEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/acls": {
      "get": {
        "description": "Returns all ACL lines that are configured in specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Return an array of all ACL lines",
        "operationId": "getAcls",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "ACL name",
            "name": "acl_name",
            "in": "query"
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acls"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new ACL line of the specified type in the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Add a new ACL line",
        "operationId": "createAcl",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "ACL line created",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/acls/{index}": {
      "get": {
        "description": "Returns one ACL line configuration by it's index in the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Return one ACL line",
        "operationId": "getAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acl"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a ACL line configuration by it's index in the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Replace a ACL line",
        "operationId": "replaceAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "ACL line replaced",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a ACL line configuration by it's index from the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Delete a ACL line",
        "operationId": "deleteAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "ACL line deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Return an array of all Backend Switching Rules",
        "operationId": "getBackendSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Backend Switching Rule of the specified type in the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Add a new Backend Switching Rule",
        "operationId": "createBackendSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend Switching Rule created",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules/{index}": {
      "get": {
        "description": "Returns one Backend Switching Rule configuration by it's index in the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Return one Backend Switching Rule",
        "operationId": "getBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Backend Switching Rule configuration by it's index in the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Replace a Backend Switching Rule",
        "operationId": "replaceBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Backend Switching Rule configuration by it's index from the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Delete a Backend Switching Rule",
        "operationId": "deleteBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend Switching Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backends": {
      "get": {
        "description": "Returns an array of all configured backends.",
        "tags": [
          "Backend"
        ],
        "summary": "Return an array of backends",
        "operationId": "getBackends",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new backend to the configuration file.",
        "tags": [
          "Backend"
        ],
        "summary": "Add a backend",
        "operationId": "createBackend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend created",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/backends/{name}": {
      "get": {
        "description": "Returns one backend configuration by it's name.",
        "tags": [
          "Backend"
        ],
        "summary": "Return a backend",
        "operationId": "getBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a backend configuration by it's name.",
        "tags": [
          "Backend"
        ],
        "summary": "Replace a backend",
        "operationId": "replaceBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend replaced",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a backend from the configuration by it's name.",
        "tags": [
          "Backend"
        ],
        "summary": "Delete a backend",
        "operationId": "deleteBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/binds": {
      "get": {
        "description": "Returns an array of all binds that are configured in specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Return an array of binds",
        "operationId": "getBinds",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/binds"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new bind in the specified frontend in the configuration file.",
        "tags": [
          "Bind"
        ],
        "summary": "Add a new bind",
        "operationId": "createBind",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Bind created",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/binds/{name}": {
      "get": {
        "description": "Returns one bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Return one bind",
        "operationId": "getBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/bind"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Replace a bind",
        "operationId": "replaceBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Bind replaced",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Delete a bind",
        "operationId": "deleteBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Bind deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/caches": {
      "get": {
        "description": "Returns an array of all configured caches.",
        "tags": [
          "Cache"
        ],
        "summary": "Return an array of caches",
        "operationId": "getCaches",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/caches"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new cache section to the configuration file.",
        "tags": [
          "Cache"
        ],
        "summary": "Add a cache",
        "operationId": "createCache",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Cache created",
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/cache"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/caches/{name}": {
      "get": {
        "description": "Returns one cache section configuration by it's name.",
        "tags": [
          "Cache"
        ],
        "summary": "Return a cache",
        "operationId": "getCache",
        "parameters": [
          {
            "type": "string",
            "description": "Cache name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/cache"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a cache configuration by it's name.",
        "tags": [
          "Cache"
        ],
        "summary": "Replace a cache",
        "operationId": "replaceCache",
        "parameters": [
          {
            "type": "string",
            "description": "Cache name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Cache replaced",
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/cache"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a cache from the configuration by it's name.",
        "tags": [
          "Cache"
        ],
        "summary": "Delete a cache",
        "operationId": "deleteCache",
        "parameters": [
          {
            "type": "string",
            "description": "Cache name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Cache deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/captures": {
      "get": {
        "description": "Returns an array of all declare capture records that are configured in specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Return an array of declare captures",
        "operationId": "getDeclareCaptures",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/captures"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new declare capture in the specified frontend in the configuration file.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Add a new declare capture",
        "operationId": "createDeclareCapture",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Declare capture created",
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/capture"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/captures/{index}": {
      "get": {
        "description": "Returns one declare capture configuration by it's index in the specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Return one declare capture",
        "operationId": "getDeclareCapture",
        "parameters": [
          {
            "type": "integer",
            "description": "Declare Capture Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/capture"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a declare capture configuration by it's index in the specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Replace a declare capture",
        "operationId": "replaceDeclareCapture",
        "parameters": [
          {
            "type": "integer",
            "description": "Declare Capture Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Declare Capture replaced",
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/capture"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a declare capture configuration by it's index in the specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Delete a declare capture",
        "operationId": "deleteDeclareCapture",
        "parameters": [
          {
            "type": "integer",
            "description": "Declare Capture Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Declare Capture deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/defaults": {
      "get": {
        "description": "Returns defaults part of configuration.",
        "tags": [
          "Defaults"
        ],
        "summary": "Return defaults part of configuration",
        "operationId": "getDefaults",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/defaults"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replace defaults part of config",
        "tags": [
          "Defaults"
        ],
        "summary": "Replace defaults",
        "operationId": "replaceDefaults",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Defaults replaced",
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/defaults"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/filters": {
      "get": {
        "description": "Returns all Filters that are configured in specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Return an array of all Filters",
        "operationId": "getFilters",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filters"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Filter of the specified type in the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Add a new Filter",
        "operationId": "createFilter",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Filter created",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/filters/{index}": {
      "get": {
        "description": "Returns one Filter configuration by it's index in the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Return one Filter",
        "operationId": "getFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filter"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Filter configuration by it's index in the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Replace a Filter",
        "operationId": "replaceFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Filter replaced",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Filter configuration by it's index from the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Delete a Filter",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Filter deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends": {
      "get": {
        "description": "Returns an array of all configured frontends.",
        "tags": [
          "Frontend"
        ],
        "summary": "Return an array of frontends",
        "operationId": "getFrontends",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new frontend to the configuration file.",
        "tags": [
          "Frontend"
        ],
        "summary": "Add a frontend",
        "operationId": "createFrontend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Frontend created",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends/{name}": {
      "get": {
        "description": "Returns one frontend configuration by it's name.",
        "tags": [
          "Frontend"
        ],
        "summary": "Return a frontend",
        "operationId": "getFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a frontend configuration by it's name.",
        "tags": [
          "Frontend"
        ],
        "summary": "Replace a frontend",
        "operationId": "replaceFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Frontend replaced",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "tags": [
          "Frontend"
        ],
        "summary": "Delete a frontend",
        "operationId": "deleteFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Frontend deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/global": {
      "get": {
        "description": "Returns global part of configuration.",
        "tags": [
          "Global"
        ],
        "summary": "Return a global part of configuration",
        "operationId": "getGlobal",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/global"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replace global part of config",
        "tags": [
          "Global"
        ],
        "summary": "Replace global",
        "operationId": "replaceGlobal",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Global replaced",
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/global"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Return an array of userlist groups",
        "operationId": "getGroups",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/groups"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a new userlist group",
        "operationId": "createGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Group created",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/group"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/groups/{name}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Return one userlist group",
        "operationId": "getGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/group"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Replace a group",
        "operationId": "replaceGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Group replaced",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/group"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Group deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_checks": {
      "get": {
        "description": "Returns all HTTP checks that are configured in specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Return an array of HTTP checks",
        "operationId": "getHTTPChecks",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_checks"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP check of the specified type in the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Add a new HTTP check",
        "operationId": "createHTTPCheck",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP check created",
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_checks/{index}": {
      "get": {
        "description": "Returns one HTTP check configuration by it's index in the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Return one HTTP check",
        "operationId": "getHTTPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_check"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Check configuration by it's index in the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Replace a HTTP check",
        "operationId": "replaceHTTPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP check replaced",
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP check configuration by it's index from the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Delete a HTTP check",
        "operationId": "deleteHTTPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP check deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules": {
      "get": {
        "description": "Returns all HTTP Request Rules that are configured in specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Return an array of all HTTP Request Rules",
        "operationId": "getHTTPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Request Rule of the specified type in the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Add a new HTTP Request Rule",
        "operationId": "createHTTPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Request Rule created",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules/{index}": {
      "get": {
        "description": "Returns one HTTP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Return one HTTP Request Rule",
        "operationId": "getHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Replace a HTTP Request Rule",
        "operationId": "replaceHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Request Rule configuration by it's index from the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Delete a HTTP Request Rule",
        "operationId": "deleteHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Request Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules": {
      "get": {
        "description": "Returns all HTTP Response Rules that are configured in specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Return an array of all HTTP Response Rules",
        "operationId": "getHTTPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Response Rule of the specified type in the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Add a new HTTP Response Rule",
        "operationId": "createHTTPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Response Rule created",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules/{index}": {
      "get": {
        "description": "Returns one HTTP Response Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Return one HTTP Response Rule",
        "operationId": "getHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Response Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Replace a HTTP Response Rule",
        "operationId": "replaceHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Response Rule configuration by it's index from the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Delete a HTTP Response Rule",
        "operationId": "deleteHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Response Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets": {
      "get": {
        "description": "Returns all Log Targets that are configured in specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Return an array of all Log Targets",
        "operationId": "getLogTargets",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_targets"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Log Target of the specified type in the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Add a new Log Target",
        "operationId": "createLogTarget",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Log Target created",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets/{index}": {
      "get": {
        "description": "Returns one Log Target configuration by it's index in the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Return one Log Target",
        "operationId": "getLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_target"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Log Target configuration by it's index in the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Replace a Log Target",
        "operationId": "replaceLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Log Target replaced",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Log Target configuration by it's index from the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Delete a Log Target",
        "operationId": "deleteLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Log Target deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/nameservers": {
      "get": {
        "description": "Returns an array of all configured nameservers.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Return an array of nameservers",
        "operationId": "getNameservers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/nameservers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new nameserver to the resolvers section.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Add a nameserver",
        "operationId": "createNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Nameserver created",
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/nameserver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/nameservers/{name}": {
      "get": {
        "description": "Returns one nameserver configuration by it's name.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Return a nameserver",
        "operationId": "getNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Nameserver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/nameserver"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a nameserver configuration by it's name.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Replace a nameserver",
        "operationId": "replaceNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Nameserver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Nameserver replaced",
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/nameserver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a nameserver from the resolvers section by it's name.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Delete a nameserver",
        "operationId": "deleteNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Nameserver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Nameserver deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_entries": {
      "get": {
        "description": "Returns an array of all peer_entries that are configured in specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Return an array of peer_entries",
        "operationId": "getPeerEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Parent peer section name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_entries"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new peer entry in the specified peer section in the configuration file.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Add a new peer_entry",
        "operationId": "createPeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Parent peer section name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "PeerEntry created",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_entries/{name}": {
      "get": {
        "description": "Returns one peer_entry configuration by it's name in the specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Return one peer_entry",
        "operationId": "getPeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "PeerEntry name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent peers name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_entry"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a peer entry configuration by it's name in the specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Replace a peer_entry",
        "operationId": "replacePeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "PeerEntry name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent peers name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "PeerEntry replaced",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a peer entry configuration by it's name in the specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Delete a peer_entry",
        "operationId": "deletePeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "PeerEntry name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent peers name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "PeerEntry deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_section": {
      "get": {
        "description": "Returns an array of all configured peer_section.",
        "tags": [
          "Peer"
        ],
        "summary": "Return an array of peer_section",
        "operationId": "getPeerSections",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_sections"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new peer to the configuration file.",
        "tags": [
          "Peer"
        ],
        "summary": "Add a peer",
        "operationId": "createPeer",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peer_section"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Peer created",
            "schema": {
              "$ref": "#/definitions/peer_section"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/peer_section"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_section/{name}": {
      "get": {
        "description": "Returns one peer configuration by it's name.",
        "tags": [
          "Peer"
        ],
        "summary": "Return a peer",
        "operationId": "getPeerSection",
        "parameters": [
          {
            "type": "string",
            "description": "Peer name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_section"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a peer from the configuration by it's name.",
        "tags": [
          "Peer"
        ],
        "summary": "Delete a peer",
        "operationId": "deletePeer",
        "parameters": [
          {
            "type": "string",
            "description": "Peer name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Peer deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/raw": {
      "get": {
        "description": "Returns HAProxy configuration file in plain text",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Return HAProxy configuration",
        "operationId": "getHAProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Push a new haproxy configuration file in plain text",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Push new haproxy configuration",
        "operationId": "postHAProxyConfiguration",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no version check will be done and the pushed config will be enforced",
            "name": "skip_version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no reload will be initiated and runtime actions from X-Runtime-Actions will be applied",
            "name": "skip_reload",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, only validates configuration, without applying it",
            "name": "only_validate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of Runtime API commands with parameters separated by ';'",
            "name": "X-Runtime-Actions",
            "in": "header"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "New HAProxy configuration pushed",
            "schema": {
              "type": "string"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/resolvers": {
      "get": {
        "description": "Returns an array of all configured resolvers.",
        "tags": [
          "Resolver"
        ],
        "summary": "Return an array of resolvers",
        "operationId": "getResolvers",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/resolvers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new resolver section to the configuration file.",
        "tags": [
          "Resolver"
        ],
        "summary": "Add a resolver",
        "operationId": "createResolver",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Resolver created",
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/resolver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/resolvers/{name}": {
      "get": {
        "description": "Returns one resolver section configuration by it's name.",
        "tags": [
          "Resolver"
        ],
        "summary": "Return a resolver",
        "operationId": "getResolver",
        "parameters": [
          {
            "type": "string",
            "description": "Resolver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/resolver"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a resolver configuration by it's name.",
        "tags": [
          "Resolver"
        ],
        "summary": "Replace a resolver",
        "operationId": "replaceResolver",
        "parameters": [
          {
            "type": "string",
            "description": "Resolver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Resolver replaced",
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/resolver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a resolver from the configuration by it's name.",
        "tags": [
          "Resolver"
        ],
        "summary": "Delete a resolver",
        "operationId": "deleteResolver",
        "parameters": [
          {
            "type": "string",
            "description": "Resolver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Resolver deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Return an array of all Server Switching Rules",
        "operationId": "getServerSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Server Switching Rule of the specified type in the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Add a new Server Switching Rule",
        "operationId": "createServerSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Server Switching Rule created",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules/{index}": {
      "get": {
        "description": "Returns one Server Switching Rule configuration by it's index in the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Return one Server Switching Rule",
        "operationId": "getServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Server Switching Rule configuration by it's index in the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Replace a Server Switching Rule",
        "operationId": "replaceServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Server Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Server Switching Rule configuration by it's index from the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Delete a Server Switching Rule",
        "operationId": "deleteServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server Switching Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/server_templates": {
      "get": {
        "description": "Returns an array of all server templates that are configured in specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Return an array of server templates",
        "operationId": "getServerTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_templates"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new server template in the specified backend in the configuration file.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Add a new server template",
        "operationId": "createServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Server template created",
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_template"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/server_templates/{prefix}": {
      "get": {
        "description": "Returns one server template configuration by it's prefix in the specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Return one server template",
        "operationId": "getServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Server template prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_template"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a server template configuration by it's prefix in the specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Replace a server template",
        "operationId": "replaceServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Server template prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Server template replaced",
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_template"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a server template configuration by it's prefix in the specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Delete a server template",
        "operationId": "deleteServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Server template prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server template deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/servers": {
      "get": {
        "description": "Returns an array of all servers that are configured in specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Return an array of servers",
        "operationId": "getServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/servers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new server in the specified backend in the configuration file.",
        "tags": [
          "Server"
        ],
        "summary": "Add a new server",
        "operationId": "createServer",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Server created",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/servers/{name}": {
      "get": {
        "description": "Returns one server configuration by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Return one server",
        "operationId": "getServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a server configuration by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Replace a server",
        "operationId": "replaceServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Server replaced",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a server configuration by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Delete a server",
        "operationId": "deleteServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules": {
      "get": {
        "description": "Returns all Stick Rules that are configured in specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Return an array of all Stick Rules",
        "operationId": "getStickRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new Stick Rule of the specified type in the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Add a new Stick Rule",
        "operationId": "createStickRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Stick Rule created",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules/{index}": {
      "get": {
        "description": "Returns one Stick Rule configuration by it's index in the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Return one Stick Rule",
        "operationId": "getStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a Stick Rule configuration by it's index in the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Replace a Stick Rule",
        "operationId": "replaceStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Stick Rule replaced",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a Stick Rule configuration by it's index from the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Delete a Stick Rule",
        "operationId": "deleteStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Stick Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_checks": {
      "get": {
        "description": "Returns all TCP checks that are configured in specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Return an array of TCP checks",
        "operationId": "getTCPChecks",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_checks"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new TCP check of the specified type in the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Add a new TCP check",
        "operationId": "createTCPCheck",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP check created",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_checks/{index}": {
      "get": {
        "description": "Returns one TCP check configuration by it's index in the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Return one TCP check",
        "operationId": "getTCPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_check"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Check configuration by it's index in the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Replace a TCP check",
        "operationId": "replaceTCPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP check replaced",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP check configuration by it's index from the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Delete a TCP check",
        "operationId": "deleteTCPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP check deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules": {
      "get": {
        "description": "Returns all TCP Request Rules that are configured in specified parent and parent type.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Return an array of all TCP Request Rules",
        "operationId": "getTCPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Request Rule of the specified type in the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Add a new TCP Request Rule",
        "operationId": "createTCPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Request Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules/{index}": {
      "get": {
        "description": "Returns one TCP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Return one TCP Request Rule",
        "operationId": "getTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Replace a TCP Request Rule",
        "operationId": "replaceTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Request Rule configuration by it's index from the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Delete a TCP Request Rule",
        "operationId": "deleteTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Request Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules": {
      "get": {
        "description": "Returns all TCP Response Rules that are configured in specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Return an array of all TCP Response Rules",
        "operationId": "getTCPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Response Rule of the specified type in the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Add a new TCP Response Rule",
        "operationId": "createTCPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Response Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules/{index}": {
      "get": {
        "description": "Returns one TCP Response Rule configuration by it's index in the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Return one TCP Response Rule",
        "operationId": "getTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Response Rule configuration by it's Index in the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Replace a TCP Response Rule",
        "operationId": "replaceTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Response Rule configuration by it's index from the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Delete a TCP Response Rule",
        "operationId": "deleteTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Response Rule deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/userlists": {
      "get": {
        "description": "Returns an array of all configured userlists.",
        "tags": [
          "Userlist"
        ],
        "summary": "Return an array of userlists",
        "operationId": "getUserlists",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/userlists"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new userlist to the configuration file.",
        "tags": [
          "Userlist"
        ],
        "summary": "Add a new userlist",
        "operationId": "createUserlist",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userlist"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Userlist created",
            "schema": {
              "$ref": "#/definitions/userlist"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/userlist"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/userlists/{name}": {
      "get": {
        "description": "Returns one userlist configuration by it's name.",
        "tags": [
          "Userlist"
        ],
        "summary": "Return one userlist",
        "operationId": "getUserlist",
        "parameters": [
          {
            "type": "string",
            "description": "Userlist name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/userlist"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a userlist configuration by it's name.",
        "tags": [
          "Userlist"
        ],
        "summary": "Delete a userlist",
        "operationId": "deleteUserlist",
        "parameters": [
          {
            "type": "string",
            "description": "Userlist name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Userlist deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Return an array of userlist users",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/users"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new userlist user",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/user"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/users/{username}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Return one userlist user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "User username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/user"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace a user",
        "operationId": "replaceUser",
        "parameters": [
          {
            "type": "string",
            "description": "User username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "User replaced",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/user"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "User username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "User deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/configuration/version": {
      "get": {
        "description": "Returns configuration version.",
        "tags": [
          "Configuration"
        ],
        "summary": "Return a configuration version",
        "operationId": "getConfigurationVersion",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration version",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/reloads": {
      "get": {
        "description": "Returns a list of HAProxy reloads.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Reloads"
        ],
        "summary": "Return list of HAProxy Reloads.",
        "operationId": "getReloads",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/reloads"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/reloads/{id}": {
      "get": {
        "description": "Returns one HAProxy reload status.",
        "tags": [
          "Reloads"
        ],
        "summary": "Return one HAProxy reload status",
        "operationId": "getReload",
        "parameters": [
          {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$",
            "type": "string",
            "description": "Reload id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/reload"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced runtime settings of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced runtime endpoints",
        "operationId": "getRuntimeEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/acl_file_entries": {
      "get": {
        "description": "Returns an ACL runtime setting using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an ACL entries",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_files_entries"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Adds a new ACL payload.",
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Add a new ACL payload",
        "operationId": "addPayloadRuntimeACL",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl_files_entries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ACL payload added",
            "schema": {
              "$ref": "#/definitions/acl_files_entries"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds an entry into the ACL file using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Add entry to an ACL file",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl_file_entry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ACL entry created",
            "schema": {
              "$ref": "#/definitions/acl_file_entry"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/acl_file_entries/{id}": {
      "get": {
        "description": "Returns the ACL entry by its ID using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an ACL entry",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "File entry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_file_entry"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes the entry from the ACL by its value using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Delete an ACL entry",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "File entry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/acls": {
      "get": {
        "description": "Returns all ACL files using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an array of all ACL files",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_files"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/acls/{id}": {
      "get": {
        "description": "Returns an ACL file by id using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an ACL file",
        "parameters": [
          {
            "type": "string",
            "description": "ACL file entry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_file"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/info": {
      "get": {
        "description": "Return HAProxy process information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return HAProxy process information",
        "operationId": "getHaproxyProcessInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/process_infos"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/maps": {
      "get": {
        "description": "Returns runtime map files.",
        "tags": [
          "Maps"
        ],
        "summary": "Return runtime map files",
        "operationId": "getAllRuntimeMapFiles",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "If true, also show unmanaged map files loaded in haproxy",
            "name": "include_unmanaged",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/maps"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/maps/{name}": {
      "get": {
        "description": "Returns one runtime map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Return one runtime map file",
        "operationId": "getOneRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/map"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Adds a new map payload.",
        "tags": [
          "Maps"
        ],
        "summary": "Add a new map payload",
        "operationId": "addPayloadRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/map_entries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Map payload added",
            "schema": {
              "$ref": "#/definitions/map_entries"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Remove all map entries from the map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Remove all map entries from the map file",
        "operationId": "clearRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If true, deletes file from disk",
            "name": "forceDelete",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "All map entries deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/maps_entries": {
      "get": {
        "description": "Returns an array of all entries in a given runtime map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Return one map runtime entries",
        "operationId": "showRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/map_entries"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds an entry into the map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Adds an entry into the map file",
        "operationId": "addMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Map entry created",
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/maps_entries/{id}": {
      "get": {
        "description": "Returns one map runtime setting by it's id.",
        "tags": [
          "Maps"
        ],
        "summary": "Return one map runtime setting",
        "operationId": "getRuntimeMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Map id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces the value corresponding to each id in a map.",
        "tags": [
          "Maps"
        ],
        "summary": "Replace the value corresponding to each id in a map",
        "operationId": "replaceRuntimeMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Map id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "description": "Map value",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Map value replaced",
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Delete all the map entries from the map by its id.",
        "tags": [
          "Maps"
        ],
        "summary": "Deletes all the map entries from the map by its id",
        "operationId": "deleteRuntimeMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Map id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Map key/value deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/servers": {
      "get": {
        "description": "Returns an array of all servers' runtime settings.",
        "tags": [
          "Server"
        ],
        "summary": "Return an array of runtime servers' settings",
        "operationId": "getRuntimeServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_servers"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/servers/{name}": {
      "get": {
        "description": "Returns one server runtime settings by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Return one server runtime settings",
        "operationId": "getRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a server transient settings by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Replace server transient settings",
        "operationId": "replaceRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server transient settings replaced",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_table_entries": {
      "get": {
        "description": "Returns an array of all entries in a given stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table Entries",
        "operationId": "getStickTableEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "stick_table",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "A list of filters in format data.\u003ctype\u003e \u003coperator\u003e \u003cvalue\u003e separated by comma",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Key which we want the entries for",
            "name": "key",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Max number of entries to be returned for pagination",
            "name": "count",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset which indicates how many items we skip in pagination",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table_entries"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Create or update a stick-table entry in the table.",
        "tags": [
          "StickTable"
        ],
        "summary": "Set Entry to Stick Table",
        "operationId": "setStickTableEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "stick_table",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          },
          {
            "description": "Stick table entry",
            "name": "stick_table_entry",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "key",
                "data_type"
              ],
              "properties": {
                "data_type": {
                  "$ref": "#/definitions/stick_table_entry"
                },
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables": {
      "get": {
        "description": "Returns an array of all stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Tables",
        "operationId": "getStickTables",
        "parameters": [
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not all processes are returned",
            "name": "process",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_tables"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables/{name}": {
      "get": {
        "description": "Returns one stick table from runtime.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table",
        "operationId": "getStickTable",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/sites": {
      "get": {
        "description": "Returns an array of all configured sites.",
        "tags": [
          "Sites"
        ],
        "summary": "Return an array of sites",
        "operationId": "getSites",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/sites"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new site to the configuration file.",
        "tags": [
          "Sites"
        ],
        "summary": "Add a site",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "Site created",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/sites/{name}": {
      "get": {
        "description": "Returns one site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Return a site",
        "operationId": "getSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/site"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Replace a site",
        "operationId": "replaceSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Site replaced",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a site from the configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Delete a site",
        "operationId": "deleteSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe": {
      "get": {
        "description": "Returns a list of endpoints to be used for SPOE settings of HAProxy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy SPOE endpoints",
        "operationId": "getSpoeEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_agents": {
      "get": {
        "description": "Returns an array of all configured spoe agents in one scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of spoe agents in one scope",
        "operationId": "getSpoeAgents",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_agents"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new spoe agent to the spoe scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new spoe agent to scope",
        "operationId": "createSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe agent created",
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_agents/{name}": {
      "get": {
        "description": "Returns one spoe agent configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a spoe agent",
        "operationId": "getSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe agent name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_agent"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a SPOE agent configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Replace a SPOE agent",
        "operationId": "replaceSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe agent name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Spoe agent replaced",
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a SPOE agent from the configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a SPOE agent",
        "operationId": "deleteSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe agent name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe agent deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_files": {
      "get": {
        "description": "Returns all available SPOE files.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return all available SPOE files",
        "operationId": "getAllSpoeFiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/spoe_files"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Creates SPOE file with its entries.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Spoe"
        ],
        "summary": "Creates SPOE file with its entries",
        "operationId": "createSpoe",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "The spoe file to upload",
            "name": "file_upload",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "SPOE file created with its entries",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_files/{name}": {
      "get": {
        "description": "Returns one SPOE file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return one SPOE file",
        "operationId": "getOneSpoeFile",
        "parameters": [
          {
            "type": "string",
            "description": "SPOE file name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes SPOE file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete SPOE file",
        "operationId": "deleteSpoeFile",
        "parameters": [
          {
            "type": "string",
            "description": "SPOE file name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "SPOE file deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_groups": {
      "get": {
        "description": "Returns an array of all configured SPOE groups in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of SPOE groups",
        "operationId": "getSpoeGroups",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_groups"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new SPOE groups to the SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new SPOE groups",
        "operationId": "createSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe groups created",
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_groups/{name}": {
      "get": {
        "description": "Returns one SPOE groups configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a SPOE groups",
        "operationId": "getSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_group"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a SPOE groups configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Replace a SPOE groups",
        "operationId": "replaceSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Spoe groups replaced",
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a SPOE groups from the one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a SPOE groups",
        "operationId": "deleteSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe group deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_messages": {
      "get": {
        "description": "Returns an array of all configured spoe messages in one scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of spoe messages in one scope",
        "operationId": "getSpoeMessages",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_messages"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new spoe message to the spoe scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new spoe message to scope",
        "operationId": "createSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe message created",
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_messages/{name}": {
      "get": {
        "description": "Returns one spoe message configuration in SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a spoe message",
        "operationId": "getSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe message name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_message"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces a spoe message configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Replace a spoe message",
        "operationId": "replaceSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe message name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Spoe message replaced",
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a spoe message from the SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a spoe message",
        "operationId": "deleteSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe message name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe message deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_scopes": {
      "get": {
        "description": "Returns an array of all configured spoe scopes.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of spoe scopes",
        "operationId": "getSpoeScopes",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_scopes"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Adds a new spoe scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new spoe scope",
        "operationId": "createSpoeScope",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_scope"
            }
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe scope created",
            "schema": {
              "$ref": "#/definitions/spoe_scope"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_scopes/{name}": {
      "get": {
        "description": "Returns one SPOE scope in one SPOE file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return one SPOE scope",
        "operationId": "getSpoeScope",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_scope"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a SPOE scope from the configuration file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a SPOE scope",
        "operationId": "deleteSpoeScope",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "$ref": "#/parameters/version"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe scope deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe/version": {
      "get": {
        "description": "Returns SPOE configuration version.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a SPOE configuration version",
        "operationId": "getSpoeConfigurationVersion",
        "parameters": [
          {
            "$ref": "#/parameters/transaction_id"
          },
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SPOE configuration version",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe_transactions": {
      "get": {
        "description": "Returns a list of SPOE configuration transactions. Transactions can be filtered by their status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Return list of SPOE configuration transactions.",
        "operationId": "getSpoeTransactions",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "failed",
              "in_progress"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/spoe_transactions"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Start a new transaction",
        "operationId": "startSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Configuration version on which to work on",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            }
          },
          "429": {
            "description": "Too many open transactions",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                }
              },
              "example": {
                "code": 429,
                "message": "cannot start a new transaction, reached the maximum amount of 20 active transactions available"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/spoe_transactions/{id}": {
      "get": {
        "description": "Returns one SPOE configuration transactions.",
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Return one SPOE configuration transactions",
        "operationId": "getSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Commit transaction",
        "operationId": "commitSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction successfully committed",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a transaction.",
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/stats": {
      "get": {
        "description": "Returns a list of HAProxy stats endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy stats endpoints",
        "operationId": "getStatsEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/stats/native": {
      "get": {
        "description": "Getting stats from the HAProxy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Stats"
        ],
        "summary": "Gets stats",
        "operationId": "getStats",
        "parameters": [
          {
            "enum": [
              "frontend",
              "backend",
              "server"
            ],
            "type": "string",
            "description": "Object type to get stats for (one of frontend, backend, server)",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object name to get stats for",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-dependency": {
              "query.type": "server"
            },
            "description": "Object parent name to get stats for, in case the object is a server",
            "name": "parent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage": {
      "get": {
        "description": "Returns a list of endpoints that use HAProxy storage for persistency, e.g. maps, ssl certificates...",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy storage endpoints",
        "operationId": "getStorageEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage/general": {
      "get": {
        "description": "Returns a list of all managed general use files",
        "tags": [
          "Storage"
        ],
        "summary": "Return a list of all managed general use files",
        "operationId": "getAllStorageGeneralFiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/general_files"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Creates a managed storage general use file with contents.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Creates a managed storage general use file with contents",
        "operationId": "createStorageGeneralFile",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "General use file content",
            "name": "file_upload",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "General use file created with its contents",
            "schema": {
              "$ref": "#/definitions/general_file"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage/general/{name}": {
      "get": {
        "description": "Returns the contents of one managed general use file from disk",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Return the contents of one managed general use file from disk",
        "operationId": "getOneStorageGeneralFile",
        "parameters": [
          {
            "type": "string",
            "description": "General use file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces the contents of a managed general use file on disk",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Replace contents of a managed general use file on disk",
        "operationId": "replaceStorageGeneralFile",
        "parameters": [
          {
            "type": "string",
            "description": "General use file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/parameters/skip_reload"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "General use file replaced"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a managed general use file from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Deletes a managed general use file from disk",
        "operationId": "deleteStorageGeneralFile",
        "parameters": [
          {
            "type": "string",
            "description": "General use file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "General use file deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage/maps": {
      "get": {
        "description": "Returns a list of all managed map files",
        "tags": [
          "Storage"
        ],
        "summary": "Return a list of all managed map files",
        "operationId": "getAllStorageMapFiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/maps"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Creates a managed storage map file with its entries.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Creates a managed storage map file with its entries",
        "operationId": "createStorageMapFile",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "The map file contents",
            "name": "file_upload",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Map file created with its entries",
            "schema": {
              "$ref": "#/definitions/map"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage/maps/{name}": {
      "get": {
        "description": "Returns the contents of one managed map file from disk",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Return the contents of one managed map file from disk",
        "operationId": "getOneStorageMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces the contents of a managed map file on disk",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Replace contents of a managed map file on disk",
        "operationId": "replaceStorageMapFile",
        "parameters": [
          {
            "type": "string",
            "description": "Map file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/parameters/skip_reload"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Map file replaced"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a managed map file from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Deletes a managed map file from disk",
        "operationId": "deleteStorageMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Map file deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage/ssl_certificates": {
      "get": {
        "description": "Returns all available SSL certificates on disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Return all available SSL certificates on disk",
        "operationId": "getAllStorageSSLCertificates",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ssl_certificates"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Creates SSL certificate.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Create SSL certificate",
        "operationId": "createStorageSSLCertificate",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "The SSL certificate to upload",
            "name": "file_upload",
            "in": "formData"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "201": {
            "description": "SSL certificate created",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/storage/ssl_certificates/{name}": {
      "get": {
        "description": "Returns one SSL certificate from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Return one SSL certificate from disk",
        "operationId": "getOneStorageSSLCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "SSL certificate name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Replaces SSL certificate on disk.",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Replace SSL certificates on disk",
        "operationId": "replaceStorageSSLCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "SSL certificate name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/parameters/skip_reload"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "SSL certificate replaced",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            }
          },
          "202": {
            "description": "SSL certificate replaced and reload requested",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes SSL certificate from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Delete SSL certificate from disk",
        "operationId": "deleteStorageSSLCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "SSL certificate name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/skip_reload"
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "SSL certificate deleted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "SSL certificate deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/transactions": {
      "get": {
        "description": "Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Return list of HAProxy configuration transactions.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "enum": [
              "failed",
              "in_progress"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/transactions"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Start a new transaction",
        "operationId": "startTransaction",
        "parameters": [
          {
            "type": "integer",
            "description": "Configuration version on which to work on",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "429": {
            "description": "Too many open transactions",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                }
              },
              "example": {
                "code": 429,
                "message": "cannot start a new transaction, reached the maximum amount of 20 active transactions available"
              }
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/services/haproxy/transactions/{id}": {
      "get": {
        "description": "Returns one HAProxy configuration transactions.",
        "tags": [
          "Transactions"
        ],
        "summary": "Return one HAProxy configuration transactions",
        "operationId": "getTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "tags": [
          "Transactions"
        ],
        "summary": "Commit transaction",
        "operationId": "commitTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction successfully committed",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/transaction"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "406": {
            "$ref": "#/responses/NotAcceptable"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      },
      "delete": {
        "description": "Deletes a transaction.",
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/specification": {
      "get": {
        "description": "Return Data Plane API OpenAPI specification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Specification"
        ],
        "summary": "Data Plane API Specification",
        "operationId": "getSpecification",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    },
    "/specification_openapiv3": {
      "get": {
        "description": "Return Data Plane API OpenAPI v3 specification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SpecificationOpenapiv3"
        ],
        "summary": "Data Plane API v3 Specification",
        "operationId": "getOpenapiv3Specification",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/DefaultError"
          }
        }
      }
    }
  },
  "definitions": {
    "acl": {
      "description": "The use of Access Control Lists (ACL) provides a flexible solution to perform\ncontent switching and generally to take decisions based on content extracted\nfrom the request, the response or any environmental status.\n",
      "type": "object",
      "title": "ACL Lines",
      "required": [
        "index",
        "acl_name",
        "criterion",
        "value"
      ],
      "properties": {
        "acl_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "criterion": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "type": "string",
          "x-nullable": false
        }
      },
      "additionalProperties": false
    },
    "acl_file": {
      "description": "ACL File",
      "type": "object",
      "title": "ACL File",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "acl_file_entry": {
      "description": "One ACL File Entry",
      "type": "object",
      "title": "One ACL File Entry",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string"
        }
      }
    },
    "acl_files": {
      "description": "Array of runtime acl files",
      "type": "array",
      "title": "ACL Files Array",
      "items": {
        "$ref": "#/definitions/acl_file"
      }
    },
    "acl_files_entries": {
      "description": "Array of entries of one runtime acl file",
      "type": "array",
      "title": "ACL Files Entries",
      "items": {
        "$ref": "#/definitions/acl_file_entry"
      }
    },
    "acls": {
      "description": "HAProxy ACL lines array (corresponds to acl directives)",
      "type": "array",
      "title": "ACL Lines Array",
      "items": {
        "$ref": "#/definitions/acl"
      }
    },
    "awsFilters": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "Key to use as filter, using the format specified at https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options",
          "type": "string"
        },
        "value": {
          "description": "Value of the filter to use",
          "type": "string"
        }
      }
    },
    "awsRegion": {
      "description": "AWS region configuration",
      "type": "object",
      "title": "AWS region",
      "required": [
        "name",
        "region",
        "enabled",
        "retry_timeout",
        "ipv4_address"
      ],
      "properties": {
        "access_key_id": {
          "description": "AWS Access Key ID.",
          "type": "string"
        },
        "allowlist": {
          "description": "Specify the AWS filters used to filter the EC2 instances to add",
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsFilters"
          }
        },
        "denylist": {
          "description": "Specify the AWS filters used to filter the EC2 instances to ignore",
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsFilters"
          }
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "description": "Auto generated ID.",
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true,
          "readOnly": true
        },
        "ipv4_address": {
          "description": "Select which IPv4 address the Service Discovery has to use for the backend server entry",
          "type": "string",
          "enum": [
            "private",
            "public"
          ]
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "retry_timeout": {
          "description": "Duration in seconds in-between data pulling requests to the AWS region",
          "type": "integer",
          "minimum": 1
        },
        "secret_access_key": {
          "description": "AWS Secret Access Key.",
          "type": "string"
        },
        "server_slots_base": {
          "type": "integer",
          "default": 10
        },
        "server_slots_growth_increment": {
          "type": "integer"
        },
        "server_slots_growth_type": {
          "type": "string",
          "default": "exponential",
          "enum": [
            "linear",
            "exponential"
          ]
        }
      },
      "example": {
        "access_key_id": "****************L7GT",
        "allowlist": [
          {
            "key": "tag-key",
            "value": "Instance:Having:This:Tag"
          }
        ],
        "denylist": [
          {
            "key": "tag:Environment",
            "value": "development"
          }
        ],
        "enabled": true,
        "id": "0",
        "ipv4_address": "private",
        "name": "frontend-service",
        "region": "us-east-1",
        "retry_timeout": 1,
        "secret_access_key": "****************soLl"
      }
    },
    "awsRegions": {
      "description": "AWS regions array",
      "type": "array",
      "title": "AWS",
      "items": {
        "$ref": "#/definitions/awsRegion"
      }
    },
    "backend": {
      "description": "HAProxy backend configuration",
      "type": "object",
      "title": "Backend",
      "required": [
        "name"
      ],
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "accept_invalid_http_response": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Response"
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check",
            "httpchk"
          ],
          "x-display-name": "Advanced Check"
        },
        "allbackups": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "All Backups"
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "bind_process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "compression": {
          "$ref": "#/definitions/compression"
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "cookie": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/cookie"
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "dynamic_cookie_key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "cookie": {
              "dynamic": {
                "value": true
              }
            }
          }
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "h1_case_adjust_bogus_server": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "H1 Adjust Bogus Server"
        },
        "hash_type": {
          "type": "object",
          "properties": {
            "function": {
              "type": "string",
              "enum": [
                "sdbm",
                "djb2",
                "wt6",
                "crc32"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "map-based",
                "consistent"
              ]
            },
            "modifier": {
              "type": "string",
              "enum": [
                "avalanche"
              ]
            }
          }
        },
        "http-buffer-request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP bufferrequest"
        },
        "http-check": {
          "$ref": "#/definitions/http_check"
        },
        "http-keep-alive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP keep-alive"
        },
        "http-no-delay": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP low interactive delays"
        },
        "http-server-close": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP server close"
        },
        "http-use-htx": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP proxy mode"
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_reuse": {
          "type": "string",
          "enum": [
            "aggressive",
            "always",
            "never",
            "safe"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "httpchk_params": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/httpchk_params"
        },
        "httpclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP connection closing"
        },
        "log_health_checks": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log Health Checks"
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "mysql_check_params": {
          "$ref": "#/definitions/mysql_check_params"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "pgsql_check_params": {
          "$ref": "#/definitions/pgsql_check_params"
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "smtpchk_params": {
          "$ref": "#/definitions/smtpchk_params"
        },
        "srvtcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "Server TCP Keep Alive"
        },
        "stats_options": {
          "$ref": "#/definitions/stats_options"
        },
        "stick_table": {
          "$ref": "#/definitions/config_stick_table"
        },
        "tcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Keep Alive"
        },
        "tunnel_timeout": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "adv_check": "httpchk",
        "balance": {
          "algorithm": "roundrobin"
        },
        "forwardfor": {
          "enabled": "enabled"
        },
        "httpchk_params": {
          "method": "GET",
          "uri": "/check",
          "version": "HTTP/1.1"
        },
        "mode": "http",
        "name": "test_backend"
      }
    },
    "backend_switching_rule": {
      "description": "HAProxy backend switching rule configuration (corresponds to use_backend directive)",
      "type": "object",
      "title": "Backend Switching Rule",
      "required": [
        "index",
        "name"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Backend Name",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "index": 0,
        "name": "test_backend"
      }
    },
    "backend_switching_rules": {
      "description": "HAProxy backend switching rules array (corresponds to use_backend directives)",
      "type": "array",
      "title": "Backend Switching Rules Array",
      "items": {
        "$ref": "#/definitions/backend_switching_rule"
      }
    },
    "backends": {
      "description": "HAProxy backends array",
      "type": "array",
      "title": "Backends",
      "items": {
        "$ref": "#/definitions/backend"
      }
    },
    "balance": {
      "type": "object",
      "required": [
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": [
            "roundrobin",
            "static-rr",
            "leastconn",
            "first",
            "source",
            "uri",
            "url_param",
            "hdr",
            "random",
            "rdp-cookie"
          ]
        },
        "hdr_name": {
          "type": "string",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "hdr"
            }
          },
          "x-display-name": "Header Name"
        },
        "hdr_use_domain_only": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "hdr"
            }
          },
          "x-display-name": "Header Use Domain Only"
        },
        "random_draws": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "random"
            }
          },
          "x-display-name": "Random Draws",
          "x-nullable": false
        },
        "rdp_cookie_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "value": "rdp-cookie"
            }
          },
          "x-display-name": "Rdp Cookie Name"
        },
        "uri_depth": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Depth"
        },
        "uri_len": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Len"
        },
        "uri_path_only": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Path Only"
        },
        "uri_whole": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Whole"
        },
        "url_param": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param"
        },
        "url_param_check_post": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Check Post"
        },
        "url_param_max_wait": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Max Weight"
        }
      }
    },
    "bind": {
      "description": "HAProxy frontend bind configuration",
      "type": "object",
      "title": "Bind",
      "allOf": [
        {
          "$ref": "#/definitions/bind_params"
        }
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "port-range-end": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        }
      }
    },
    "bind_params": {
      "type": "object",
      "properties": {
        "accept_netscaler_cip": {
          "type": "integer"
        },
        "accept_proxy": {
          "type": "boolean"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backlog": {
          "type": "string"
        },
        "ca_ignore_err": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ca_sign_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ca_sign_pass": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          },
          "x-display-name": "Passphrase"
        },
        "ca_verify_file": {
          "type": "string",
          "x-dependency": {
            "ca_file": {
              "value": true
            }
          }
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "crt_ignore_err": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "crt_list": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "curves": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "defer_accept": {
          "type": "boolean"
        },
        "ecdhe": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "expose_fd_listeners": {
          "type": "boolean"
        },
        "force_sslv3": {
          "type": "boolean"
        },
        "force_tlsv10": {
          "type": "boolean"
        },
        "force_tlsv11": {
          "type": "boolean"
        },
        "force_tlsv12": {
          "type": "boolean"
        },
        "force_tlsv13": {
          "type": "boolean"
        },
        "generate_certificates": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "gid": {
          "type": "integer",
          "x-display-name": "Group ID"
        },
        "group": {
          "type": "string",
          "x-display-name": "Group name"
        },
        "id": {
          "type": "string",
          "x-display-name": "Socket ID"
        },
        "interface": {
          "type": "string"
        },
        "level": {
          "type": "string",
          "enum": [
            "user",
            "operator",
            "admin"
          ]
        },
        "maxconn": {
          "type": "integer"
        },
        "mode": {
          "type": "string"
        },
        "mss": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "nice": {
          "type": "integer"
        },
        "no_ca_names": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_sslv3": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tls_tickets": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv10": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv11": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv12": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv13": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "npn": {
          "type": "string"
        },
        "prefer_client_ciphers": {
          "type": "boolean"
        },
        "process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proto": {
          "type": "string",
          "x-display-name": "Protocol name"
        },
        "severity_output": {
          "type": "string",
          "enum": [
            "none",
            "number",
            "string"
          ],
          "x-display-name": "Format"
        },
        "ssl": {
          "type": "boolean"
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "strict_sni": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "tcp_user_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tfo": {
          "type": "boolean"
        },
        "tls_ticket_keys": {
          "type": "string"
        },
        "transparent": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "v4v6": {
          "type": "boolean"
        },
        "v6only": {
          "type": "boolean"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "optional",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "127.0.0.1",
        "name": "http",
        "port": 80
      }
    },
    "binds": {
      "description": "HAProxy frontend binds array (corresponds to bind directives)",
      "type": "array",
      "title": "Binds",
      "items": {
        "$ref": "#/definitions/bind"
      }
    },
    "cache": {
      "description": "HAPRoxy Cache section",
      "type": "object",
      "title": "Cache",
      "required": [
        "name"
      ],
      "properties": {
        "max_age": {
          "type": "integer"
        },
        "max_object_size": {
          "type": "integer"
        },
        "max_secondary_entries": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$"
        },
        "process_vary": {
          "type": "boolean",
          "x-nullable": true
        },
        "total_max_size": {
          "type": "integer",
          "maximum": 4095,
          "minimum": 1
        }
      }
    },
    "caches": {
      "description": "HAProxy caches array",
      "type": "array",
      "title": "Cache Sections",
      "items": {
        "$ref": "#/definitions/cache"
      }
    },
    "capture": {
      "type": "object",
      "title": "Declare Capture",
      "required": [
        "index",
        "type",
        "length"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "length": {
          "type": "integer",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "enum": [
            "request",
            "response"
          ],
          "x-nullable": false
        }
      }
    },
    "captures": {
      "type": "array",
      "title": "Declare capture array",
      "items": {
        "$ref": "#/definitions/capture"
      }
    },
    "cluster_settings": {
      "description": "Settings related to a cluster.",
      "type": "object",
      "title": "Cluster Settings",
      "properties": {
        "bootstrap_key": {
          "type": "string"
        },
        "cluster": {
          "type": "object",
          "title": "Cluster controller information",
          "properties": {
            "address": {
              "type": "string",
              "pattern": "^[^\\s]+$",
              "readOnly": true
            },
            "api_base_path": {
              "type": "string",
              "readOnly": true
            },
            "cluster_id": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "readOnly": true
            },
            "log_targets": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "address",
                  "port",
                  "protocol"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "log_format": {
                    "type": "string"
                  },
                  "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "tcp",
                      "udp"
                    ]
                  }
                },
                "x-go-name": "ClusterLogTarget"
              },
              "x-go-name": "ClusterLogTargets"
            },
            "name": {
              "type": "string",
              "readOnly": true
            },
            "port": {
              "type": "integer",
              "maximum": 65535,
              "minimum": 1,
              "x-nullable": true,
              "readOnly": true
            }
          }
        },
        "mode": {
          "type": "string",
          "enum": [
            "single",
            "cluster"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "unreachable",
            "waiting_approval"
          ],
          "readOnly": true
        }
      }
    },
    "compression": {
      "type": "object",
      "properties": {
        "algorithms": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "identity",
              "gzip",
              "deflate",
              "raw-deflate"
            ]
          }
        },
        "offload": {
          "type": "boolean"
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "config_stick_table": {
      "type": "object",
      "properties": {
        "expire": {
          "type": "integer",
          "x-nullable": true
        },
        "keylen": {
          "type": "integer",
          "x-display-name": "Key Length",
          "x-nullable": true
        },
        "nopurge": {
          "type": "boolean",
          "x-display-name": "No Purge"
        },
        "peers": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "store": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ip",
            "ipv6",
            "integer",
            "string",
            "binary"
          ]
        }
      }
    },
    "consul": {
      "description": "Consul server configuration",
      "type": "object",
      "title": "Consul server",
      "required": [
        "address",
        "port",
        "enabled",
        "retry_timeout"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "description": "Auto generated ID.",
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1
        },
        "retry_timeout": {
          "description": "Duration in seconds in-between data pulling requests to the consul server",
          "type": "integer",
          "minimum": 1
        },
        "server_slots_base": {
          "type": "integer",
          "default": 10
        },
        "server_slots_growth_increment": {
          "type": "integer"
        },
        "server_slots_growth_type": {
          "type": "string",
          "default": "exponential",
          "enum": [
            "linear",
            "exponential"
          ]
        },
        "service-blacklist": {
          "description": "deprecated, use service_denylist",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "service-whitelist": {
          "description": "deprecated, use service_allowlist",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "service_allowlist": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "service_denylist": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "token": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "127.0.0.1",
        "enabled": true,
        "id": "0",
        "port": 90,
        "retry_timeout": 10
      }
    },
    "consuls": {
      "description": "Consuls array",
      "type": "array",
      "title": "Consuls",
      "items": {
        "$ref": "#/definitions/consul"
      }
    },
    "cookie": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "domain": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              }
            },
            "x-go-name": "Domain"
          },
          "x-go-name": "Domains"
        },
        "dynamic": {
          "type": "boolean"
        },
        "httponly": {
          "type": "boolean"
        },
        "indirect": {
          "type": "boolean"
        },
        "maxidle": {
          "type": "integer"
        },
        "maxlife": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "nocache": {
          "type": "boolean"
        },
        "postonly": {
          "type": "boolean"
        },
        "preserve": {
          "type": "boolean"
        },
        "secure": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "rewrite",
            "insert",
            "prefix"
          ]
        }
      }
    },
    "default_server": {
      "type": "object",
      "title": "Default Server",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ca_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check_alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Protocols"
        },
        "check_proto": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Name"
        },
        "check_via_socks4": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "disabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "error_limit": {
          "type": "integer",
          "x-display-name": "Error count"
        },
        "fall": {
          "type": "integer",
          "x-display-name": "Nr. of consecutive failed checks",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "force_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "init-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "log_proto": {
          "type": "string",
          "enum": [
            "legacy",
            "octet-count"
          ]
        },
        "max_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Concurrent Connections",
          "x-nullable": true
        },
        "maxqueue": {
          "type": "integer",
          "x-display-name": "Max Number of Connections",
          "x-nullable": true
        },
        "minconn": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "no_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_verifyhost": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "npn": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "observe": {
          "type": "string",
          "enum": [
            "layer4",
            "layer7"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "pool_low_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_purge_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "proto": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proxy-v2-options": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ssl",
              "cert-cn",
              "ssl-cipher",
              "cert-sig",
              "cert-key",
              "authority",
              "crc32c",
              "unique-id"
            ]
          }
        },
        "redir": {
          "type": "string",
          "x-display-name": "Prefix"
        },
        "resolve-net": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve-prefer": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve_opts": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$"
        },
        "resolvers": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getResolvers",
            "property": "name"
          }
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl_cn": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "slowstart": {
          "type": "integer",
          "x-nullable": true
        },
        "sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "socks4": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "check-via-socks4": {
              "required": true
            }
          }
        },
        "source": {
          "type": "string"
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_reuse": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "stick": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tcp_ut": {
          "type": "integer"
        },
        "tfo": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "track": {
          "type": "string"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verifyhost": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            },
            "verify": {
              "value": "required"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "defaults": {
      "description": "HAProxy defaults configuration",
      "type": "object",
      "title": "Defaults",
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "accept_invalid_http_request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Request"
        },
        "accept_invalid_http_response": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Response"
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check",
            "httpchk"
          ],
          "x-display-name": "Advanced Check"
        },
        "allbackups": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "All Backups"
        },
        "backlog": {
          "type": "integer",
          "x-display-name": "Backlog",
          "x-nullable": true
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "bind_process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clflog": {
          "type": "boolean",
          "x-display-name": "CLF Log"
        },
        "client_fin_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Client TCP Keep Alive"
        },
        "compression": {
          "$ref": "#/definitions/compression"
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continuous Statistics"
        },
        "cookie": {
          "$ref": "#/definitions/cookie"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "disable_h2_upgrade": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Disable HTTP/2 Upgrade"
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "dynamic_cookie_key": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "error_files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorfile"
          },
          "x-go-name": "ErrorFiles"
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "$ref": "#/definitions/forwardfor"
        },
        "h1_case_adjust_bogus_client": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "H1 Adjust Bogus Client"
        },
        "h1_case_adjust_bogus_server": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "H1 Adjust Bogus Server"
        },
        "http-buffer-request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP bufferrequest"
        },
        "http-check": {
          "$ref": "#/definitions/http_check"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ]
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "http_request_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "http_reuse": {
          "type": "string",
          "enum": [
            "aggressive",
            "always",
            "never",
            "safe"
          ]
        },
        "httpchk_params": {
          "$ref": "#/definitions/httpchk_params"
        },
        "httplog": {
          "type": "boolean",
          "x-display-name": "HTTP Log"
        },
        "load_server_state_from_file": {
          "type": "string",
          "enum": [
            "global",
            "local",
            "none"
          ]
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_health_checks": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log Health Checks"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "logasap": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log ASAP"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "tcp",
            "http"
          ]
        },
        "monitor_uri": {
          "$ref": "#/definitions/monitor_uri"
        },
        "mysql_check_params": {
          "$ref": "#/definitions/mysql_check_params"
        },
        "pgsql_check_params": {
          "$ref": "#/definitions/pgsql_check_params"
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_fin_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "smtpchk_params": {
          "$ref": "#/definitions/smtpchk_params"
        },
        "srvtcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Server TCP Keep Alive"
        },
        "stats_options": {
          "$ref": "#/definitions/stats_options"
        },
        "tcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "TCP Keep Alive"
        },
        "tcplog": {
          "type": "boolean",
          "x-display-name": "TCP Log"
        },
        "tunnel_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "unique_id_format": {
          "type": "string",
          "x-display-name": "Unique ID format"
        },
        "unique_id_header": {
          "type": "string",
          "x-dependency": {
            "unique_id_format": {
              "required": true
            }
          },
          "x-display-name": "Unique ID header"
        }
      },
      "additionalProperties": false
    },
    "endpoint": {
      "description": "Endpoint definition",
      "type": "object",
      "title": "Endpoint",
      "properties": {
        "description": {
          "description": "Endpoint description",
          "type": "string"
        },
        "title": {
          "description": "Endpoint title",
          "type": "string"
        },
        "url": {
          "description": "Path to the endpoint",
          "type": "string"
        }
      }
    },
    "endpoints": {
      "description": "Collection of endpoints",
      "type": "array",
      "title": "Endpoints Array",
      "items": {
        "$ref": "#/definitions/endpoint"
      }
    },
    "error": {
      "description": "API Error",
      "type": "object",
      "title": "Error",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "errorfile": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            200,
            400,
            403,
            405,
            408,
            425,
            429,
            500,
            502,
            503,
            504
          ]
        },
        "file": {
          "type": "string"
        }
      },
      "x-display-name": "Error File"
    },
    "filter": {
      "description": "HAProxy filters",
      "type": "object",
      "title": "Filter",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache"
            }
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "spoe_config": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "spoe"
            }
          }
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "spoe"
            }
          }
        },
        "trace_hexdump": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_rnd_forwarding": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Forwarding"
        },
        "trace_rnd_parsing": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Parsing"
        },
        "type": {
          "type": "string",
          "enum": [
            "trace",
            "compression",
            "spoe",
            "cache"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "index": 0,
        "trace_name": "name",
        "trace_rnd_parsing": true,
        "type": "trace"
      }
    },
    "filters": {
      "description": "HAProxy filters array (corresponds to filter directive)",
      "type": "array",
      "title": "Filters Array",
      "items": {
        "$ref": "#/definitions/filter"
      }
    },
    "forwardfor": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "except": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "header": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "ifnone": {
          "type": "boolean"
        }
      },
      "x-display-name": "ForwardFor"
    },
    "frontend": {
      "description": "HAProxy frontend configuration",
      "type": "object",
      "title": "Frontend",
      "required": [
        "name"
      ],
      "properties": {
        "accept_invalid_http_request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Request"
        },
        "backlog": {
          "type": "integer",
          "x-display-name": "Backlog",
          "x-nullable": true
        },
        "bind_process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "clflog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "CLF Log"
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "Client TCP Keep Alive"
        },
        "compression": {
          "$ref": "#/definitions/compression"
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continuous Statistics"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "disable_h2_upgrade": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Disable HTTP/2 Upgrade"
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "h1_case_adjust_bogus_client": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "H1 Adjust Bogus Client"
        },
        "http-buffer-request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP bufferrequest"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "httplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Log"
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$"
        },
        "logasap": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log ASAP"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "monitor_fail": {
          "$ref": "#/definitions/monitor_fail"
        },
        "monitor_uri": {
          "$ref": "#/definitions/monitor_uri"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "stats_options": {
          "$ref": "#/definitions/stats_options"
        },
        "stick_table": {
          "$ref": "#/definitions/config_stick_table"
        },
        "tcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Keep Alive"
        },
        "tcplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Log"
        },
        "unique_id_format": {
          "type": "string",
          "x-display-name": "Unique ID format"
        },
        "unique_id_header": {
          "type": "string",
          "x-dependency": {
            "unique_id_format": {
              "required": true
            }
          },
          "x-display-name": "Unique ID header"
        }
      },
      "additionalProperties": false,
      "example": {
        "default_backend": "test_backend",
        "http_connection_mode": "http-keep-alive",
        "maxconn": 2000,
        "mode": "http",
        "name": "test_frontend"
      }
    },
    "frontends": {
      "description": "HAProxy frontends array",
      "type": "array",
      "title": "Frontends",
      "items": {
        "$ref": "#/definitions/frontend"
      }
    },
    "general_file": {
      "description": "General use file",
      "type": "object",
      "title": "General use file",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "general_files": {
      "description": "Array of general use files",
      "type": "array",
      "title": "General Files Array",
      "items": {
        "$ref": "#/definitions/general_file"
      }
    },
    "global": {
      "description": "HAProxy global configuration",
      "type": "object",
      "title": "Global",
      "properties": {
        "busy_polling": {
          "type": "boolean"
        },
        "ca_base": {
          "type": "string",
          "x-display-name": "SSL CA Certificates Base Directory"
        },
        "chroot": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Chroot"
        },
        "cpu_maps": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "process",
              "cpu_set"
            ],
            "properties": {
              "cpu_set": {
                "type": "string",
                "x-display-name": "CPU Set"
              },
              "process": {
                "type": "string",
                "x-display-name": "Process/Thread Set"
              }
            },
            "x-go-name": "CPUMap"
          },
          "x-display-name": "CPU Maps",
          "x-go-name": "CPUMaps"
        },
        "crt_base": {
          "type": "string",
          "x-display-name": "SSL Certificates Base Directory"
        },
        "daemon": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "external_check": {
          "type": "boolean",
          "x-display-name": "External Check"
        },
        "gid": {
          "type": "integer",
          "x-display-name": "GID"
        },
        "group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Group"
        },
        "h1_case_adjust": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "from",
              "to"
            ],
            "properties": {
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              }
            },
            "x-go-name": "H1CaseAdjust"
          },
          "x-go-name": "H1CaseAdjusts"
        },
        "h1_case_adjust_file": {
          "type": "string"
        },
        "hard_stop_after": {
          "type": "integer",
          "x-display-name": "Hard Stop After",
          "x-nullable": true
        },
        "localpeer": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Local instance's peer name."
        },
        "log_send_hostname": {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "param": {
              "type": "string",
              "pattern": "^[^\\s]+$"
            }
          },
          "x-display-name": "Log Send Hostname"
        },
        "lua_loads": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "file"
            ],
            "properties": {
              "file": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              }
            },
            "x-go-name": "LuaLoad"
          }
        },
        "lua_prepend_path": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "path",
                  "cpath"
                ]
              }
            },
            "x-go-name": "LuaPrependPath"
          }
        },
        "master-worker": {
          "type": "boolean",
          "x-display-name": "Master Worker Mode"
        },
        "max_spread_checks": {
          "type": "integer"
        },
        "maxcompcpuusage": {
          "type": "integer",
          "x-display-name": "Maximum HAProxy CPU usage"
        },
        "maxcomprate": {
          "type": "integer",
          "x-display-name": "Maximum per-process input compression rate"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections"
        },
        "maxconnrate": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of concurrent connections"
        },
        "maxpipes": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of pipes"
        },
        "maxsessrate": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of sessions per second"
        },
        "maxsslconn": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of concurrent SSL connections"
        },
        "maxsslrate": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of SSL sessions per second"
        },
        "maxzlibmem": {
          "type": "integer",
          "x-display-name": "Maximum amount of RAM in megabytes per process usable by the zlib"
        },
        "nbproc": {
          "type": "integer",
          "x-display-name": "Number of Processes"
        },
        "nbthread": {
          "type": "integer",
          "x-display-name": "Number of Threads"
        },
        "noepoll": {
          "type": "boolean",
          "x-display-name": "Disable the use of the \"epoll\" event polling system on Linux"
        },
        "noevports": {
          "type": "boolean",
          "x-display-name": "Disable the use of the event ports event polling system on SunOS system derived from Solaris 10 and later"
        },
        "nogetaddrinfo": {
          "type": "boolean",
          "x-display-name": "Disable the use of getaddrinfo for name resolving"
        },
        "nokqueue": {
          "type": "boolean",
          "x-display-name": "Disable the use of the \"kqueue\" event polling system on BSD"
        },
        "nopoll": {
          "type": "boolean",
          "x-display-name": "Disable the use of the \"poll\" event polling system"
        },
        "noreuseport": {
          "type": "boolean",
          "x-display-name": "Disable the use of SO_REUSEPORT"
        },
        "nosplice": {
          "type": "boolean",
          "x-display-name": "Disable the use of kernel tcp splicing between sockets on Linux"
        },
        "pidfile": {
          "type": "string",
          "x-display-name": "PID File"
        },
        "profiling_tasks": {
          "type": "string",
          "enum": [
            "auto",
            "on",
            "off"
          ],
          "x-display-name": "Enable or disables per-task CPU profiling"
        },
        "runtime_apis": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "address"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/bind_params"
              }
            ],
            "properties": {
              "address": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              }
            },
            "x-go-name": "RuntimeAPI"
          },
          "x-display-name": "Runtime APIs",
          "x-go-name": "RuntimeAPIs"
        },
        "server_state_base": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Server State Base"
        },
        "server_state_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Server State File"
        },
        "spread_checks": {
          "type": "integer",
          "x-display-name": "Add some randomness in the check interval"
        },
        "ssl_default_bind_ciphers": {
          "type": "string",
          "x-display-name": "SSL Default Bind Ciphers"
        },
        "ssl_default_bind_ciphersuites": {
          "type": "string",
          "x-display-name": "SSL Default Bind Ciphersuites"
        },
        "ssl_default_bind_options": {
          "type": "string",
          "x-display-name": "SSL Default Bind Options"
        },
        "ssl_default_server_ciphers": {
          "type": "string",
          "x-display-name": "SSL Default Server Ciphers"
        },
        "ssl_default_server_ciphersuites": {
          "type": "string",
          "x-display-name": "SSL Default Server Ciphersuites"
        },
        "ssl_default_server_options": {
          "type": "string",
          "x-display-name": "SSL Default Server Options"
        },
        "ssl_mode_async": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Asynchronous TLS I/O operations"
        },
        "stats_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tune_options": {
          "type": "object",
          "properties": {
            "buffers_limit": {
              "type": "integer",
              "x-display-name": "Buffers Limit",
              "x-nullable": true
            },
            "buffers_reserve": {
              "type": "integer",
              "minimum": 2,
              "x-display-name": "Buffers Reserve"
            },
            "bufsize": {
              "type": "integer",
              "x-display-name": "Buffer Size"
            },
            "comp_maxlevel": {
              "type": "integer",
              "x-display-name": "Maximum Compression Level"
            },
            "fail_alloc": {
              "type": "boolean",
              "x-display-name": "Failed Allocation Chance"
            },
            "h2_header_table_size": {
              "type": "integer",
              "maximum": 65535,
              "x-display-name": "HTTP/2 Dynamic Header Table Size"
            },
            "h2_initial_window_size": {
              "type": "integer",
              "x-display-name": "HTTP/2 Initial Window Size",
              "x-nullable": true
            },
            "h2_max_concurrent_streams": {
              "type": "integer",
              "x-display-name": "HTTP/2 Maximum Number of Concurrent Streams"
            },
            "h2_max_frame_size": {
              "type": "integer",
              "x-display-name": "HTTP/2 Maximum Frame Size"
            },
            "http_cookielen": {
              "type": "integer",
              "x-display-name": "Maximum Cookie Length"
            },
            "http_logurilen": {
              "type": "integer",
              "x-display-name": "Maximum URI Length"
            },
            "http_maxhdr": {
              "type": "integer",
              "maximum": 32767,
              "minimum": 1,
              "x-display-name": "Maximum Number of Headers"
            },
            "idle_pool_shared": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "Share Idle Connections"
            },
            "idletimer": {
              "type": "integer",
              "maximum": 65535,
              "x-display-name": "Idle Stream Duration",
              "x-nullable": true
            },
            "listener_multi_queue": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "Listener Multi Queue Accept"
            },
            "lua_forced_yield": {
              "type": "integer",
              "x-display-name": "Lua Forced Yield"
            },
            "lua_maxmem": {
              "type": "boolean",
              "x-display-name": "Lua Maximum Memory Usage"
            },
            "lua_service_timeout": {
              "type": "integer",
              "x-display-name": "Lua Service timeout",
              "x-nullable": true
            },
            "lua_session_timeout": {
              "type": "integer",
              "x-display-name": "Lua Session Timeout",
              "x-nullable": true
            },
            "lua_task_timeout": {
              "type": "integer",
              "x-display-name": "Lua Task Timeout",
              "x-nullable": true
            },
            "maxaccept": {
              "type": "integer",
              "x-display-name": "Maximum Accept Events"
            },
            "maxpollevents": {
              "type": "integer",
              "x-display-name": "Maximum Polled Events"
            },
            "maxrewrite": {
              "type": "integer",
              "x-display-name": "Maximum Rewrite Space"
            },
            "pattern_cache_size": {
              "type": "integer",
              "x-display-name": "Pattern Lookup Cache Size",
              "x-nullable": true
            },
            "pipesize": {
              "type": "integer",
              "x-display-name": "Pipe Buffer Size"
            },
            "pool_high_fd_ratio": {
              "type": "integer",
              "x-display-name": "Max Used High FD Ratio"
            },
            "pool_low_fd_ratio": {
              "type": "integer",
              "x-display-name": "Max Used Low FD Ratio"
            },
            "rcvbuf_client": {
              "type": "integer",
              "x-display-name": "Receive Buffer Client Size",
              "x-nullable": true
            },
            "rcvbuf_server": {
              "type": "integer",
              "x-display-name": "Receive Buffer Server Size",
              "x-nullable": true
            },
            "recv_enough": {
              "type": "integer",
              "x-display-name": "Recieve Enough Socket Buffer Size"
            },
            "runqueue_depth": {
              "type": "integer",
              "x-display-name": "Max Tasks in Run Queue"
            },
            "sched_low_latency": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "Low Latency Task Scheduler"
            },
            "sndbuf_client": {
              "type": "integer",
              "x-display-name": "Send Buffer Client Size",
              "x-nullable": true
            },
            "sndbuf_server": {
              "type": "integer",
              "x-display-name": "Send Buffer Server Size",
              "x-nullable": true
            },
            "ssl_cachesize": {
              "type": "integer",
              "x-display-name": "SSL Cache Size",
              "x-nullable": true
            },
            "ssl_capture_buffer_size": {
              "type": "integer",
              "x-display-name": "SSL Maximum Size of Cipherlist Buffer",
              "x-nullable": true
            },
            "ssl_ctx_cache_size": {
              "type": "integer",
              "x-display-name": "SSL Number of Certificates in Cache"
            },
            "ssl_default_dh_param": {
              "type": "integer",
              "x-display-name": "SSL Default DH Parameter Size"
            },
            "ssl_force_private_cache": {
              "type": "boolean",
              "x-display-name": "SSL Force Private Cache"
            },
            "ssl_keylog": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "SSL Log TLS Keys"
            },
            "ssl_lifetime": {
              "type": "integer",
              "x-display-name": "SSL Session Lifetime",
              "x-nullable": true
            },
            "ssl_maxrecord": {
              "type": "integer",
              "x-display-name": "SSL Maximum Size",
              "x-nullable": true
            },
            "vars_global_max_size": {
              "type": "integer",
              "x-display-name": "Variables Global Max Size",
              "x-nullable": true
            },
            "vars_proc_max_size": {
              "type": "integer",
              "x-display-name": "Variables Process Max Size",
              "x-nullable": true
            },
            "vars_reqres_max_size": {
              "type": "integer",
              "x-display-name": "Variables Request/Response Max Size",
              "x-nullable": true
            },
            "vars_sess_max_size": {
              "type": "integer",
              "x-display-name": "Variables Session Max Size",
              "x-nullable": true
            },
            "vars_txn_max_size": {
              "type": "integer",
              "x-display-name": "Variables Transaction Max Size",
              "x-nullable": true
            },
            "zlib_memlevel": {
              "type": "integer",
              "maximum": 9,
              "minimum": 1,
              "x-display-name": "Zlib Memory Level"
            },
            "zlib_windowsize": {
              "type": "integer",
              "maximum": 15,
              "minimum": 8,
              "x-display-name": "Zlib Window Size"
            }
          }
        },
        "tune_ssl_default_dh_param": {
          "type": "integer",
          "x-deprecated": true,
          "x-display-name": "SSL Default DH Parameter Size"
        },
        "uid": {
          "type": "integer",
          "x-display-name": "UID"
        },
        "user": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "User"
        }
      },
      "additionalProperties": false
    },
    "group": {
      "description": "HAProxy userlist group",
      "type": "object",
      "title": "Group",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "users": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "groups": {
      "description": "HAProxy userlist groups array",
      "type": "array",
      "title": "Groups",
      "items": {
        "$ref": "#/definitions/group"
      }
    },
    "http_check": {
      "type": "object",
      "title": "HTTP Check",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-display-name": "ALPN Protocols"
        },
        "body": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "body_log_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "check_comment": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "comment",
                "connect",
                "expect",
                "send"
              ]
            }
          },
          "x-nullable": false
        },
        "default": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "error_status": {
          "type": "string",
          "enum": [
            "L7OKC",
            "L7RSP",
            "L7STS",
            "L6RSP",
            "L4CON"
          ],
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "exclamation_mark": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          },
          "x-display-name": "Expect Exclamation Mark"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/return_header"
          },
          "x-dependency": {
            "type": {
              "value": "send"
            }
          },
          "x-go-name": "CheckHeaders"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "linger": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "status",
            "rstatus",
            "hdr",
            "fhdr",
            "string",
            "rstring"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "expect"
            }
          },
          "x-display-name": "Expect Match"
        },
        "method": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "min_recv": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          },
          "x-nullable": true
        },
        "ok_status": {
          "type": "string",
          "enum": [
            "L7OK",
            "L7OKC",
            "L6OK",
            "L4OK"
          ],
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "on_error": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "on_success": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "pattern": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "expect"
            }
          }
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-nullable": true
        },
        "port_string": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "proto": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "send_proxy": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "sni": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "ssl": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "status-code": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "tout_status": {
          "type": "string",
          "enum": [
            "L7TOUT",
            "L6TOUT",
            "L4TOUT"
          ],
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "comment",
            "connect",
            "disable-on-404",
            "expect",
            "send",
            "send-state",
            "set-var",
            "set-var-fmt",
            "unset-var"
          ],
          "x-nullable": false
        },
        "uri": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "uri_log_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var"
              ]
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var-fmt"
              ]
            }
          },
          "x-display-name": "Var Format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "version": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "via_socks4": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        }
      }
    },
    "http_checks": {
      "type": "array",
      "title": "HTTP Checks Array",
      "items": {
        "$ref": "#/definitions/http_check"
      }
    },
    "http_request_rule": {
      "description": "HAProxy HTTP request rule configuration (corresponds to http-request directives)",
      "type": "object",
      "title": "HTTP Request Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL File"
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL Key Format"
        },
        "auth_realm": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "auth"
            }
          },
          "x-display-name": "Authentication Realm"
        },
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache-use"
            }
          },
          "x-display-name": "Cache Name"
        },
        "capture_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "capture"
            }
          },
          "x-display-name": "Capture SlotID",
          "x-nullable": true
        },
        "capture_len": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "capture"
            }
          },
          "x-display-name": "Capture Len"
        },
        "capture_sample": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "capture"
            }
          },
          "x-display-name": "Capture Sample"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "deny_status": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit"
              ]
            }
          },
          "x-nullable": true
        },
        "expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "do-resolve",
                "set-dst",
                "set-dst-port",
                "set-priority-class",
                "set-priority-offset",
                "set-src",
                "set-src-port"
              ]
            }
          },
          "x-display-name": "Standard HAProxy expression"
        },
        "hdr_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_method": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "del-header"
              ]
            }
          },
          "x-display-name": "Header Match Method"
        },
        "hdr_name": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "hint_format": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "early-hint"
            }
          },
          "x-display-name": "Hint Format"
        },
        "hint_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "early-hint"
            }
          },
          "x-display-name": "Hint Name"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "lua"
            }
          }
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "lua"
            }
          }
        },
        "map_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          }
        },
        "map_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          },
          "x-display-name": "Map Key Format"
        },
        "map_valuefmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-map"
            }
          },
          "x-display-name": "Map Value Format"
        },
        "mark_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-mark"
            }
          },
          "x-display-name": "Mark Value"
        },
        "method_fmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-method"
            }
          }
        },
        "nice_value": {
          "type": "integer",
          "maximum": 1024,
          "minimum": -1024,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-nice"
            }
          },
          "x-display-name": "Nice Value",
          "x-nullable": false
        },
        "normalizer": {
          "type": "string",
          "enum": [
            "fragment-encode",
            "fragment-strip",
            "path-merge-slashes",
            "path-strip-dot",
            "path-strip-dotdot",
            "percent-decode-unreserved",
            "percent-to-upercase",
            "query-sort-by-name"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "normalize-uri"
            }
          }
        },
        "normalizer_full": {
          "type": "boolean",
          "x-dependency": {
            "normalizer": {
              "value": "path-strip-dotdot"
            },
            "type": {
              "value": "normalize-uri"
            }
          }
        },
        "normalizer_strict": {
          "type": "boolean",
          "x-dependency": {
            "normalizer": {
              "value": [
                "percent-decode-unreserved",
                "percent-to-upercase"
              ]
            },
            "type": {
              "value": "normalize-uri"
            }
          }
        },
        "path_fmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-path",
                "set-pathq",
                "replace-path",
                "replace-pathq"
              ]
            }
          }
        },
        "path_match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-path",
                "set-pathq",
                "replace-path",
                "replace-pathq"
              ]
            }
          }
        },
        "protocol": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "type": {
              "required": false,
              "value": "do-resolve"
            }
          },
          "x-display-name": "Protocol"
        },
        "query-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-query"
            }
          }
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303,
            307,
            308
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code",
          "x-nullable": true
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "resolvers": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "do-resolve"
            }
          },
          "x-display-name": "Resolvers"
        },
        "return_content": {
          "type": "string",
          "x-dependency": {
            "return_content_format": {
              "required": true,
              "value": [
                "errofile",
                "errorfiles",
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          }
        },
        "return_content_format": {
          "type": "string",
          "enum": [
            "default-errorfile",
            "errorfile",
            "errorfiles",
            "file",
            "lf-file",
            "string",
            "lf-string"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit",
                "return"
              ]
            }
          }
        },
        "return_content_type": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit",
                "return"
              ]
            }
          },
          "x-display-name": "Return content type",
          "x-nullable": true
        },
        "return_hdrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/return_header"
          },
          "x-dependency": {
            "return_content_format": {
              "value": [
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          },
          "x-go-name": "ReturnHeaders"
        },
        "return_status_code": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": "return"
            }
          },
          "x-display-name": "Return Error Code",
          "x-nullable": true
        },
        "sc_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Expression Value"
        },
        "sc_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "sc-inc-gpc0",
                "sc-inc-gpc1",
                "sc-set-gpt0"
              ]
            }
          }
        },
        "sc_int": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Integer Value",
          "x-nullable": true
        },
        "service_name": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "use-service"
            }
          }
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Engine"
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Group"
        },
        "strict_mode": {
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "strict-mode"
            }
          }
        },
        "timeout": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-timeout"
            }
          }
        },
        "timeout_type": {
          "type": "string",
          "enum": [
            "server",
            "tunnel"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-timeout"
            }
          }
        },
        "tos_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-tos"
            }
          },
          "x-display-name": "Tos Value"
        },
        "track-sc0-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Key"
        },
        "track-sc0-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Table"
        },
        "track-sc1-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Key"
        },
        "track-sc1-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Table"
        },
        "track-sc2-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Key"
        },
        "track-sc2-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Table"
        },
        "type": {
          "type": "string",
          "enum": [
            "add-acl",
            "add-header",
            "allow",
            "auth",
            "cache-use",
            "capture",
            "del-acl",
            "del-header",
            "del-map",
            "deny",
            "disable-l7-retry",
            "do-resolve",
            "early-hint",
            "normalize-uri",
            "redirect",
            "reject",
            "replace-header",
            "replace-path",
            "replace-pathq",
            "replace-uri",
            "replace-value",
            "return",
            "sc-inc-gpc0",
            "sc-inc-gpc1",
            "sc-set-gpt0",
            "send-spoe-group",
            "set-dst",
            "set-dst-port",
            "set-header",
            "set-log-level",
            "set-map",
            "set-mark",
            "set-method",
            "set-nice",
            "set-path",
            "set-pathq",
            "set-priority-class",
            "set-priority-offset",
            "set-query",
            "set-src",
            "set-src-port",
            "set-timeout",
            "set-tos",
            "set-uri",
            "set-var",
            "silent-drop",
            "strict-mode",
            "tarpit",
            "track-sc0",
            "track-sc1",
            "track-sc2",
            "unset-var",
            "use-service",
            "wait-for-body",
            "wait-for-handshake"
          ],
          "x-nullable": false
        },
        "uri-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-uri",
                "replace-uri"
              ]
            }
          }
        },
        "uri-match": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "replace-uri"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var-fmt"
            }
          },
          "x-display-name": "Var Format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "do-resolve",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "wait_at_least": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        },
        "wait_time": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "index": 0,
        "type": "add-header"
      }
    },
    "http_request_rules": {
      "description": "HAProxy HTTP request rules array (corresponds to http-request directives)",
      "type": "array",
      "title": "HTTP Request Rules Array",
      "items": {
        "$ref": "#/definitions/http_request_rule"
      }
    },
    "http_response_rule": {
      "description": "HAProxy HTTP response rule configuration (corresponds to http-response directives)",
      "type": "object",
      "title": "HTTP Response Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          }
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACK Key Format"
        },
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache-store"
            }
          },
          "x-display-name": "Cache Name"
        },
        "capture_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "capture"
            }
          },
          "x-display-name": "Capture SlotID",
          "x-nullable": true
        },
        "capture_sample": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "capture"
            }
          },
          "x-display-name": "Capture Sample"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "deny_status": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": "deny"
            }
          },
          "x-nullable": true
        },
        "hdr_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_method": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "del-header"
              ]
            }
          },
          "x-display-name": "Header Match Method"
        },
        "hdr_name": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "lua"
            }
          }
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "lua"
            }
          }
        },
        "map_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          }
        },
        "map_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          },
          "x-display-name": "Map Key Format"
        },
        "map_valuefmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-map"
            }
          },
          "x-display-name": "Map Value Format"
        },
        "mark_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-mark"
            }
          },
          "x-display-name": "Mark Value"
        },
        "nice_value": {
          "type": "integer",
          "maximum": 1024,
          "minimum": -1024,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-nice"
            }
          },
          "x-display-name": "Nice Value",
          "x-nullable": false
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303,
            307,
            308
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code",
          "x-nullable": true
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "return_content": {
          "type": "string",
          "x-dependency": {
            "return_content_format": {
              "required": true,
              "value": [
                "errofile",
                "errorfiles",
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          }
        },
        "return_content_format": {
          "type": "string",
          "enum": [
            "default-errorfile",
            "errorfile",
            "errorfiles",
            "file",
            "lf-file",
            "string",
            "lf-string"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "return"
              ]
            }
          }
        },
        "return_content_type": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "return"
              ]
            }
          },
          "x-display-name": "Return content type",
          "x-nullable": true
        },
        "return_hdrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/return_header"
          },
          "x-dependency": {
            "return_content_format": {
              "value": [
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          },
          "x-go-name": "ReturnHeaders"
        },
        "return_status_code": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": "return"
            }
          },
          "x-display-name": "Return Error Code",
          "x-nullable": true
        },
        "sc_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Expression Value"
        },
        "sc_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "sc-inc-gpc0",
                "sc-inc-gpc1",
                "sc-set-gpt0"
              ]
            }
          }
        },
        "sc_int": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Integer Value",
          "x-nullable": true
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "status": {
          "type": "integer",
          "maximum": 999,
          "minimum": 100,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-status"
            }
          },
          "x-nullable": false
        },
        "status_reason": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "set-status"
            }
          }
        },
        "strict_mode": {
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "strict-mode"
            }
          }
        },
        "tos_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-tos"
            }
          },
          "x-display-name": "Tos Value"
        },
        "track-sc0-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Key"
        },
        "track-sc0-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Table"
        },
        "track-sc1-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Key"
        },
        "track-sc1-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Table"
        },
        "track-sc2-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Key"
        },
        "track-sc2-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Table"
        },
        "type": {
          "type": "string",
          "enum": [
            "add-acl",
            "add-header",
            "allow",
            "cache-store",
            "capture",
            "del-acl",
            "del-header",
            "del-map",
            "deny",
            "redirect",
            "replace-header",
            "replace-value",
            "return",
            "sc-inc-gpc0",
            "sc-inc-gpc1",
            "sc-set-gpt0",
            "send-spoe-group",
            "set-header",
            "set-log-level",
            "set-map",
            "set-mark",
            "set-nice",
            "set-status",
            "set-tos",
            "set-var",
            "set-var-fmt",
            "silent-drop",
            "strict-mode",
            "track-sc0",
            "track-sc1",
            "track-sc2",
            "unset-var",
            "wait-for-body"
          ],
          "x-nullable": false
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var-fmt"
            }
          },
          "x-display-name": "Var Format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "wait_at_least": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        },
        "wait_time": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "index": 0,
        "type": "add-header"
      }
    },
    "http_response_rules": {
      "description": "HAProxy HTTP response rules array (corresponds to http-response directives)",
      "type": "array",
      "title": "HTTP Response Rules Array",
      "items": {
        "$ref": "#/definitions/http_response_rule"
      }
    },
    "httpchk_params": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "HEAD",
            "PUT",
            "POST",
            "GET",
            "TRACE",
            "PATCH"
          ]
        },
        "uri": {
          "type": "string",
          "pattern": "^[^ ]*$"
        },
        "version": {
          "type": "string"
        }
      },
      "x-display-name": "HTTP Check"
    },
    "info": {
      "description": "General API, OS and hardware information",
      "type": "object",
      "title": "Information",
      "properties": {
        "api": {
          "type": "object",
          "properties": {
            "build_date": {
              "description": "HAProxy Dataplane API build date",
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "description": "HAProxy Dataplane API version string",
              "type": "string"
            }
          }
        },
        "system": {
          "type": "object",
          "properties": {
            "cpu_info": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "string"
                },
                "num_cpus": {
                  "description": "Number of logical CPUs",
                  "type": "integer"
                }
              }
            },
            "hostname": {
              "description": "Hostname where the HAProxy is running",
              "type": "string"
            },
            "mem_info": {
              "type": "object",
              "properties": {
                "dataplaneapi_memory": {
                  "type": "integer"
                },
                "free_memory": {
                  "type": "integer"
                },
                "total_memory": {
                  "type": "integer"
                }
              }
            },
            "os_string": {
              "description": "OS string",
              "type": "string"
            },
            "time": {
              "description": "Current time in milliseconds since Epoch.",
              "type": "integer"
            },
            "uptime": {
              "description": "System uptime",
              "type": "integer",
              "x-nullable": true
            }
          }
        }
      },
      "example": {
        "api": {
          "build_date": "2019-08-21T17:31:56.000Z",
          "version": "v1.2.1 45a3288.dev"
        },
        "system": {
          "cpu_info": {
            "model": "Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz",
            "num_cpus": 4
          },
          "hostname": "test",
          "mem_info": {
            "dataplaneapi_memory": 44755536,
            "free_memory": 5790642176,
            "total_memory": 16681517056
          },
          "os_string": "Linux 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019",
          "time": 1566401525,
          "uptime": 87340
        }
      }
    },
    "log_target": {
      "description": "Per-instance logging of events and traffic.",
      "type": "object",
      "title": "Log Target",
      "required": [
        "index"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "facility": {
          "type": "string",
          "enum": [
            "kern",
            "user",
            "mail",
            "daemon",
            "auth",
            "syslog",
            "lpr",
            "news",
            "uucp",
            "cron",
            "auth2",
            "ftp",
            "ntp",
            "audit",
            "alert",
            "cron2",
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7"
          ],
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "format": {
          "type": "string",
          "enum": [
            "rfc3164",
            "rfc5424",
            "short",
            "raw"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "global": {
          "type": "boolean"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "length": {
          "type": "integer",
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "minlevel": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "level": {
              "required": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "nolog": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "log_targets": {
      "description": "HAProxy log target array (corresponds to log directives)",
      "type": "array",
      "title": "Log Target Array",
      "items": {
        "$ref": "#/definitions/log_target"
      }
    },
    "map": {
      "description": "Map File",
      "type": "object",
      "title": "Map File",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "map_entries": {
      "description": "Entries of one runtime map",
      "type": "array",
      "title": "Maps Entries",
      "items": {
        "$ref": "#/definitions/map_entry"
      }
    },
    "map_entry": {
      "description": "One Map Entry",
      "type": "object",
      "title": "One Map Entry",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "maps": {
      "description": "Array of runtime map files",
      "type": "array",
      "title": "Map Files Array",
      "items": {
        "$ref": "#/definitions/map"
      }
    },
    "monitor_fail": {
      "type": "object",
      "required": [
        "cond",
        "cond_test"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test"
        }
      }
    },
    "monitor_uri": {
      "type": "string"
    },
    "mysql_check_params": {
      "type": "object",
      "properties": {
        "client_version": {
          "type": "string",
          "enum": [
            "pre-41",
            "post-41"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "nameserver": {
      "description": "Nameserver used in Runtime DNS configuration",
      "type": "object",
      "title": "Nameserver",
      "required": [
        "name",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        }
      },
      "example": {
        "address": "10.0.0.1",
        "name": "ns1",
        "port": 53
      }
    },
    "nameservers": {
      "description": "Nameservers array",
      "type": "array",
      "title": "Nameservers",
      "items": {
        "$ref": "#/definitions/nameserver"
      }
    },
    "native_stat": {
      "description": "Current stats for one object.",
      "type": "object",
      "title": "Stats",
      "properties": {
        "backend_name": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "name": {
          "type": "string"
        },
        "stats": {
          "$ref": "#/definitions/native_stat_stats"
        },
        "type": {
          "type": "string",
          "enum": [
            "backend",
            "server",
            "frontend"
          ]
        }
      }
    },
    "native_stat_stats": {
      "type": "object",
      "properties": {
        "act": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "addr": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "agent_code": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_desc": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "agent_duration": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_fall": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_health": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_rise": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_status": {
          "type": "string",
          "enum": [
            "UNK",
            "INI",
            "SOCKERR",
            "L40K",
            "L4TOUT",
            "L4CON",
            "L7OK",
            "L7STS"
          ],
          "x-dependency": {
            "type": "server"
          }
        },
        "algo": {
          "type": "string",
          "x-dependency": {
            "type": "backend"
          }
        },
        "bck": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "bin": {
          "type": "integer",
          "x-nullable": true
        },
        "bout": {
          "type": "integer",
          "x-nullable": true
        },
        "check_code": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_desc": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "check_duration": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_fall": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_health": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_rise": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_status": {
          "type": "string",
          "enum": [
            "UNK",
            "INI",
            "SOCKERR",
            "L40K",
            "L4TOUT",
            "L4CON",
            "L6OK",
            "L6TOUT",
            "L6RSP",
            "L7OK",
            "L7OKC",
            "L7TOUT",
            "L7RSP",
            "L7STS"
          ],
          "x-dependency": {
            "type": "server"
          }
        },
        "chkdown": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "chkfail": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "cli_abrt": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_byp": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_in": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_out": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_rsp": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "conn_rate_max": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "conn_tot": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "cookie": {
          "type": "string",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          }
        },
        "ctime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "dcon": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "downtime": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "dreq": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "dresp": {
          "type": "integer",
          "x-nullable": true
        },
        "dses": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "econ": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "ereq": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "eresp": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "hanafail": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "hrsp_1xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_2xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_3xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_4xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_5xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_other": {
          "type": "integer",
          "x-nullable": true
        },
        "iid": {
          "type": "integer",
          "x-nullable": true
        },
        "intercepted": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "lastchg": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "lastsess": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "lbtot": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "tcp",
            "http",
            "health",
            "unknown"
          ]
        },
        "pid": {
          "type": "integer",
          "x-nullable": true
        },
        "qcur": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "qlimit": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "qmax": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "qtime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "rate": {
          "type": "integer",
          "x-nullable": true
        },
        "rate_lim": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "rate_max": {
          "type": "integer",
          "x-nullable": true
        },
        "req_rate": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "req_rate_max": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "req_tot": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "rtime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "scur": {
          "type": "integer",
          "x-nullable": true
        },
        "sid": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "slim": {
          "type": "integer",
          "x-nullable": true
        },
        "smax": {
          "type": "integer",
          "x-nullable": true
        },
        "srv_abrt": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": [
            "UP",
            "DOWN",
            "NOLB",
            "MAINT",
            "no check"
          ]
        },
        "stot": {
          "type": "integer",
          "x-nullable": true
        },
        "throttle": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "tracked": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "ttime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "weight": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "wredis": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "wretr": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        }
      },
      "example": {
        "bin": 4326578,
        "bout": 889901290,
        "comp_byp": 0,
        "comp_in": 0,
        "comp_out": 0,
        "comp_rsp": 0,
        "conn_rate": 12,
        "conn_rate_max": 456,
        "conn_tot": 45682,
        "dcon": 0,
        "dreq": 4,
        "dresp": 1,
        "dses": 0,
        "ereq": 54,
        "hrsp_1xx": 0,
        "hrsp_2xx": 165,
        "hrsp_3xx": 12,
        "hrsp_4xx": 50,
        "hrsp_5xx": 4,
        "hrsp_other": 0,
        "iid": 0,
        "intercepted": 346,
        "mode": "http",
        "pid": 3204,
        "rate": 64,
        "rate_lim": 20000,
        "rate_max": 4000,
        "req_rate": 49,
        "req_rate_max": 3965,
        "req_total": 1254786,
        "scur": 129,
        "slim": 2000,
        "smax": 2000,
        "status": "UP",
        "stot": 12902
      }
    },
    "native_stats": {
      "description": "HAProxy stats array",
      "type": "array",
      "title": "Stats Array",
      "items": {
        "$ref": "#/definitions/native_stats_collection"
      }
    },
    "native_stats_collection": {
      "description": "Stats from one runtime API",
      "type": "object",
      "title": "Stats collection",
      "properties": {
        "error": {
          "type": "string"
        },
        "runtimeAPI": {
          "type": "string"
        },
        "stats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/native_stat"
          }
        }
      }
    },
    "peer_entries": {
      "description": "HAProxy peer entries array",
      "type": "array",
      "title": "Peer entries",
      "items": {
        "$ref": "#/definitions/peer_entry"
      }
    },
    "peer_entry": {
      "description": "Peer Entry from peers table",
      "type": "object",
      "title": "Peer Entry",
      "required": [
        "name",
        "address",
        "port"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        }
      }
    },
    "peer_section": {
      "description": "HAProxy peer_section configuration",
      "type": "object",
      "title": "Peer Section",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        }
      },
      "additionalProperties": false
    },
    "peer_sections": {
      "description": "HAProxy peer_section array",
      "type": "array",
      "title": "Peer_Section",
      "items": {
        "$ref": "#/definitions/peer_section"
      }
    },
    "pgsql_check_params": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "process_info": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/process_info_item"
        },
        "runtimeAPI": {
          "type": "string"
        }
      }
    },
    "process_info_item": {
      "type": "object",
      "properties": {
        "active_peers": {
          "type": "integer",
          "x-nullable": true
        },
        "busy_polling": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "compress_bps_in": {
          "type": "integer",
          "x-nullable": true
        },
        "compress_bps_out": {
          "type": "integer",
          "x-nullable": true
        },
        "compress_bps_rate_lim": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "connected_peers": {
          "type": "integer",
          "x-nullable": true
        },
        "cum_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "cum_req": {
          "type": "integer",
          "x-nullable": true
        },
        "cum_ssl_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "curr_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "curr_ssl_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "dropped_logs": {
          "type": "integer",
          "x-nullable": true
        },
        "failed_resolutions": {
          "type": "integer",
          "x-nullable": true
        },
        "hard_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "idle_pct": {
          "type": "integer",
          "x-nullable": true
        },
        "jobs": {
          "type": "integer",
          "x-nullable": true
        },
        "listeners": {
          "type": "integer",
          "x-nullable": true
        },
        "max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "max_conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "max_pipes": {
          "type": "integer",
          "x-nullable": true
        },
        "max_sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "max_sock": {
          "type": "integer",
          "x-nullable": true
        },
        "max_ssl_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "max_ssl_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "max_zlib_mem_usage": {
          "type": "integer",
          "x-nullable": true
        },
        "mem_max_mb": {
          "type": "integer",
          "x-nullable": true
        },
        "nbthread": {
          "description": "Number of threads",
          "type": "integer",
          "x-display-name": "Number of Threads",
          "x-nullable": true
        },
        "node": {
          "type": "string"
        },
        "pid": {
          "description": "Process id of the replying worker process",
          "type": "integer",
          "x-display-name": "PID",
          "x-nullable": true
        },
        "pipes_free": {
          "type": "integer",
          "x-nullable": true
        },
        "pipes_used": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_alloc_mb": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_failed": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_used_mb": {
          "type": "integer",
          "x-nullable": true
        },
        "process_num": {
          "description": "Process number",
          "type": "integer",
          "x-display-name": "Process Number",
          "x-nullable": true
        },
        "processes": {
          "description": "Number of spawned processes",
          "type": "integer",
          "x-display-name": "Number of processes",
          "x-nullable": true
        },
        "release_date": {
          "description": "HAProxy version release date",
          "type": "string",
          "format": "date"
        },
        "run_queue": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_backend_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_backend_max_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_cache_lookups": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_cache_misses": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_frontend_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_frontend_max_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_frontend_session_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_rate_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "stopping": {
          "type": "integer",
          "x-nullable": true
        },
        "tasks": {
          "type": "integer",
          "x-nullable": true
        },
        "total_bytes_out": {
          "type": "integer",
          "x-nullable": true
        },
        "ulimit_n": {
          "type": "integer",
          "x-nullable": true
        },
        "unstoppable": {
          "type": "integer",
          "x-nullable": true
        },
        "uptime": {
          "description": "HAProxy uptime in s",
          "type": "integer",
          "x-nullable": true
        },
        "version": {
          "description": "HAProxy version string",
          "type": "string"
        },
        "zlib_mem_usage": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "process_infos": {
      "description": "General HAProxy process information",
      "type": "array",
      "title": "HAProxy Information",
      "items": {
        "$ref": "#/definitions/process_info"
      }
    },
    "redispatch": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "interval": {
          "type": "integer",
          "x-nullable": false
        }
      }
    },
    "reload": {
      "description": "HAProxy reload",
      "type": "object",
      "title": "HAProxy reload",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
        },
        "reload_timestamp": {
          "type": "integer"
        },
        "response": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "succeeded"
          ]
        }
      },
      "example": {
        "id": "2019-01-03-44",
        "status": "in_progress"
      }
    },
    "reloads": {
      "description": "HAProxy reloads array",
      "type": "array",
      "title": "HAProxy Reloads Array",
      "items": {
        "$ref": "#/definitions/reload"
      }
    },
    "resolver": {
      "description": "Runtime DNS configuration",
      "type": "object",
      "title": "Resolver",
      "required": [
        "name"
      ],
      "properties": {
        "accepted_payload_size": {
          "type": "integer",
          "maximum": 8192,
          "minimum": 512
        },
        "hold_nx": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_obsolete": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_other": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_refused": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_valid": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "parse-resolv-conf": {
          "type": "boolean"
        },
        "resolve_retries": {
          "type": "integer",
          "minimum": 1
        },
        "timeout_resolve": {
          "type": "integer",
          "x-nullable": false
        },
        "timeout_retry": {
          "type": "integer",
          "x-nullable": false
        }
      }
    },
    "resolvers": {
      "description": "HAProxy resolvers array",
      "type": "array",
      "title": "Resolvers",
      "items": {
        "$ref": "#/definitions/resolver"
      }
    },
    "return_header": {
      "type": "object",
      "required": [
        "name",
        "fmt"
      ],
      "properties": {
        "fmt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "x-go-name": "ReturnHeader"
    },
    "runtime_server": {
      "description": "Runtime transient server properties",
      "type": "object",
      "title": "Runtime Server",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false,
          "readOnly": true
        },
        "admin_state": {
          "type": "string",
          "enum": [
            "ready",
            "maint",
            "drain"
          ]
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "operational_state": {
          "type": "string",
          "enum": [
            "up",
            "down",
            "stopping"
          ]
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true,
          "readOnly": true
        }
      },
      "example": {
        "address": "127.0.0.5",
        "admin_state": "ready",
        "operational_state": "up",
        "port": 80,
        "server_id": 1,
        "server_name": "web_server"
      }
    },
    "runtime_servers": {
      "description": "HAProxy runtime servers array",
      "type": "array",
      "title": "HAProxy Runtime Servers Array",
      "items": {
        "$ref": "#/definitions/runtime_server"
      }
    },
    "server": {
      "description": "HAProxy backend server configuration",
      "type": "object",
      "title": "Server",
      "required": [
        "name",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check_alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Protocols"
        },
        "check_proto": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Name"
        },
        "check_via_socks4": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "error_limit": {
          "type": "integer",
          "x-display-name": "Error count"
        },
        "fall": {
          "type": "integer",
          "x-display-name": "Nr. of consecutive failed checks",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "force_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "init-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "log_proto": {
          "type": "string",
          "enum": [
            "legacy",
            "octet-count"
          ]
        },
        "maintenance": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "max_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Concurrent Connections",
          "x-nullable": true
        },
        "maxqueue": {
          "type": "integer",
          "x-display-name": "Max Number of Connections",
          "x-nullable": true
        },
        "minconn": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "no_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_verifyhost": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "npn": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "observe": {
          "type": "string",
          "enum": [
            "layer4",
            "layer7"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "pool_low_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_purge_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "proto": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proxy-v2-options": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ssl",
              "cert-cn",
              "ssl-cipher",
              "cert-sig",
              "cert-key",
              "authority",
              "crc32c",
              "unique-id"
            ]
          }
        },
        "redir": {
          "type": "string",
          "x-display-name": "Prefix"
        },
        "resolve-net": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$",
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve-prefer": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve_opts": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$"
        },
        "resolvers": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getResolvers",
            "property": "name"
          }
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl_cn": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "slowstart": {
          "type": "integer",
          "x-nullable": true
        },
        "sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "socks4": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "check-via-socks4": {
              "required": true
            }
          }
        },
        "source": {
          "type": "string"
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_reuse": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "stick": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tcp_ut": {
          "type": "integer"
        },
        "tfo": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "track": {
          "type": "string"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verifyhost": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            },
            "verify": {
              "value": "required"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "10.1.1.1",
        "check": "enabled",
        "name": "www",
        "port": 8080,
        "weight": 80
      }
    },
    "server_switching_rule": {
      "description": "HAProxy server switching rule configuration (corresponds to use-server directive)",
      "type": "object",
      "title": "Server Switching Rule",
      "required": [
        "index",
        "target_server"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "target_server": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getServers",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "index": 0,
        "target_server": "www"
      }
    },
    "server_switching_rules": {
      "description": "HAProxy backend server switching rules array (corresponds to use-server directives)",
      "type": "array",
      "title": "Server Switching Rules Array",
      "items": {
        "$ref": "#/definitions/server_switching_rule"
      }
    },
    "server_template": {
      "description": "Set a template to initialize servers with shared parameters.",
      "type": "object",
      "title": "Server template",
      "required": [
        "prefix",
        "num_or_range",
        "fqdn"
      ],
      "properties": {
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check_alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Protocols"
        },
        "check_proto": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Name"
        },
        "check_via_socks4": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "error_limit": {
          "type": "integer",
          "x-display-name": "Error count"
        },
        "fall": {
          "type": "integer",
          "x-display-name": "Nr. of consecutive failed checks",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "force_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "fqdn": {
          "type": "string",
          "x-nullable": false
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "init-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "log_proto": {
          "type": "string",
          "enum": [
            "legacy",
            "octet-count"
          ]
        },
        "maintenance": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "max_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Concurrent Connections",
          "x-nullable": true
        },
        "maxqueue": {
          "type": "integer",
          "x-display-name": "Max Number of Connections",
          "x-nullable": true
        },
        "minconn": {
          "type": "integer",
          "x-nullable": true
        },
        "namespace": {
          "type": "string"
        },
        "no_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_verifyhost": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "npn": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "num_or_range": {
          "type": "string",
          "x-nullable": false
        },
        "observe": {
          "type": "string",
          "enum": [
            "layer4",
            "layer7"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "pool_low_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_purge_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "prefix": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "proto": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proxy-v2-options": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ssl",
              "cert-cn",
              "ssl-cipher",
              "cert-sig",
              "cert-key",
              "authority",
              "crc32c",
              "unique-id"
            ]
          }
        },
        "redir": {
          "type": "string",
          "x-display-name": "Prefix"
        },
        "resolve-net": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$",
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve-prefer": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve_opts": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$"
        },
        "resolvers": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getResolvers",
            "property": "name"
          }
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl_cn": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "slowstart": {
          "type": "integer",
          "x-nullable": true
        },
        "sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "socks4": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "check-via-socks4": {
              "required": true
            }
          }
        },
        "source": {
          "type": "string"
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_reuse": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "stick": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tcp_ut": {
          "type": "integer"
        },
        "tfo": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "track": {
          "type": "string"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verifyhost": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            },
            "verify": {
              "value": "required"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "fqdn": "google.com",
        "num_or_range": "1-3",
        "port": 80,
        "prefix": "srv"
      }
    },
    "server_templates": {
      "description": "HAProxy backend server templates array",
      "type": "array",
      "title": "Server templates",
      "items": {
        "$ref": "#/definitions/server_template"
      }
    },
    "servers": {
      "description": "HAProxy backend servers array",
      "type": "array",
      "title": "Servers",
      "items": {
        "$ref": "#/definitions/server"
      }
    },
    "site": {
      "description": "Site configuration. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration\nendpoints.\n",
      "type": "object",
      "title": "Site",
      "required": [
        "name"
      ],
      "properties": {
        "farms": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "use_as"
            ],
            "properties": {
              "balance": {
                "$ref": "#/definitions/balance"
              },
              "cond": {
                "type": "string",
                "enum": [
                  "if",
                  "unless"
                ],
                "x-dependency": {
                  "use_as": {
                    "required": true,
                    "value": "conditional"
                  }
                },
                "x-display-name": "Condition"
              },
              "cond_test": {
                "type": "string",
                "x-dependency": {
                  "use_as": {
                    "required": true,
                    "value": "conditional"
                  }
                },
                "x-display-name": "Condition Test"
              },
              "forwardfor": {
                "$ref": "#/definitions/forwardfor"
              },
              "mode": {
                "type": "string",
                "enum": [
                  "http",
                  "tcp"
                ]
              },
              "name": {
                "type": "string",
                "pattern": "^[A-Za-z0-9-_.:]+$",
                "x-nullable": false
              },
              "servers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/server"
                }
              },
              "use_as": {
                "type": "string",
                "enum": [
                  "default",
                  "conditional"
                ],
                "x-nullable": false
              }
            },
            "x-go-name": "SiteFarm"
          }
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "service": {
          "type": "object",
          "properties": {
            "http_connection_mode": {
              "type": "string",
              "enum": [
                "http-tunnel",
                "httpclose",
                "forced-close",
                "http-server-close",
                "http-keep-alive"
              ],
              "x-dependency": {
                "mode": {
                  "value": "http"
                }
              },
              "x-display-name": "HTTP Connection Mode"
            },
            "listeners": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bind"
              }
            },
            "maxconn": {
              "type": "integer",
              "x-display-name": "Max Connections",
              "x-nullable": true
            },
            "mode": {
              "type": "string",
              "enum": [
                "http",
                "tcp"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "farms": [
          {
            "balance": {
              "algorithm": "roundrobin"
            },
            "mode": "http",
            "name": "www_backend",
            "servers": [
              {
                "address": "127.0.1.1",
                "name": "www_server",
                "port": 4567,
                "weight": 30
              },
              {
                "address": "127.0.1.2",
                "name": "www_server_new",
                "port": 4567,
                "weight": 70
              }
            ],
            "use_as": "default"
          }
        ],
        "name": "test_site",
        "service": {
          "http_connection_mode": "httpclose",
          "listeners": [
            {
              "address": "127.0.0.1",
              "name": "test_listener",
              "port": 80
            },
            {
              "address": "127.0.0.1",
              "name": "test_listener_2",
              "port": 8080
            }
          ],
          "maxconn": 2000,
          "mode": "http"
        }
      }
    },
    "sites": {
      "description": "Sites array. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration\nendpoints.\n",
      "type": "array",
      "title": "Sites",
      "items": {
        "$ref": "#/definitions/site"
      }
    },
    "smtpchk_params": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "hello": {
          "type": "string"
        }
      }
    },
    "spoe_agent": {
      "description": "SPOE agent configuration",
      "type": "object",
      "title": "SPOE agent",
      "required": [
        "name"
      ],
      "properties": {
        "async": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "continue-on-error": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "dontlog-normal": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "engine-name": {
          "type": "string"
        },
        "force-set-var": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "groups": {
          "type": "string"
        },
        "hello_timeout": {
          "type": "integer"
        },
        "idle_timeout": {
          "type": "integer"
        },
        "log": {
          "$ref": "#/definitions/log_targets"
        },
        "max-frame-size": {
          "type": "integer"
        },
        "max-waiting-frames": {
          "type": "integer"
        },
        "maxconnrate": {
          "type": "integer"
        },
        "maxerrrate": {
          "type": "integer"
        },
        "messages": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "option_set-on-error": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "option_set-process-time": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "option_set-total-time": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "option_var-prefix": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "pipelining": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "processing_timeout": {
          "type": "integer"
        },
        "register-var-names": {
          "type": "string"
        },
        "send-frag-payload": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "use-backend": {
          "type": "string"
        }
      }
    },
    "spoe_agents": {
      "description": "SPOE Agents of one scope in SPOE file",
      "type": "array",
      "title": "SPOE Agents",
      "items": {
        "$ref": "#/definitions/spoe_agent"
      }
    },
    "spoe_files": {
      "description": "SPOE files",
      "type": "array",
      "title": "SPOE files",
      "items": {
        "type": "string"
      }
    },
    "spoe_group": {
      "description": "SPOE group section configuration",
      "type": "object",
      "title": "SPOE group",
      "required": [
        "name"
      ],
      "properties": {
        "messages": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "spoe_groups": {
      "description": "SPOE Groups of one scope in SPOE file",
      "type": "array",
      "title": "SPOE Groups",
      "items": {
        "$ref": "#/definitions/spoe_group"
      }
    },
    "spoe_message": {
      "description": "SPOE message section configuration",
      "type": "object",
      "title": "SPOE message",
      "required": [
        "name"
      ],
      "properties": {
        "acl": {
          "$ref": "#/definitions/acls"
        },
        "args": {
          "type": "string"
        },
        "event": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "cond": {
              "type": "string",
              "enum": [
                "if",
                "unless"
              ],
              "x-display-name": "Condition"
            },
            "cond_test": {
              "type": "string",
              "x-dependency": {
                "cond": {
                  "required": true
                }
              },
              "x-display-name": "Condition Test"
            },
            "name": {
              "type": "string",
              "enum": [
                "on-client-session",
                "on-server-session",
                "on-frontend-tcp-request",
                "on-backend-tcp-request",
                "on-tcp-response",
                "on-frontend-http-request",
                "on-backend-http-request",
                "on-http-response"
              ]
            }
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "spoe_messages": {
      "description": "SPOE Messages of one scope in SPOE file",
      "type": "array",
      "title": "SPOE Messages",
      "items": {
        "$ref": "#/definitions/spoe_message"
      }
    },
    "spoe_scope": {
      "description": "SPOE scope name",
      "type": "string",
      "title": "SPOE scope"
    },
    "spoe_scopes": {
      "description": "All SPOE Scopes",
      "type": "array",
      "title": "SPOE Scopes",
      "items": {
        "$ref": "#/definitions/spoe_scope"
      }
    },
    "spoe_transaction": {
      "description": "SPOE configuration transaction",
      "type": "object",
      "title": "SPOE configuration transaction",
      "properties": {
        "_version": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "success"
          ]
        }
      },
      "example": {
        "_version": 2,
        "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
        "status": "in_progress"
      }
    },
    "spoe_transactions": {
      "description": "SPOE Configuration transactions array",
      "type": "array",
      "title": "SPOE Transactions array",
      "items": {
        "$ref": "#/definitions/spoe_transaction"
      }
    },
    "ssl_cert_entry": {
      "description": "One SSL/TLS certificate",
      "type": "object",
      "title": "One SSL Certificate Entry",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "chain_issuer": {
          "type": "string"
        },
        "chain_subject": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "not_after": {
          "type": "string",
          "format": "date"
        },
        "not_before": {
          "type": "string",
          "format": "date"
        },
        "serial": {
          "type": "string"
        },
        "sha1_finger_print": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "subject_alternative_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ssl_certificate": {
      "description": "A file containing one or more SSL/TLS certificates and keys",
      "type": "object",
      "title": "SSL File",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "ssl_certificates": {
      "description": "Array of ssl certificate files",
      "type": "array",
      "title": "SSL Files Array",
      "items": {
        "$ref": "#/definitions/ssl_certificate"
      }
    },
    "stats_options": {
      "type": "object",
      "properties": {
        "stats_admin": {
          "type": "boolean",
          "x-display-name": "Stats Admin"
        },
        "stats_admin_cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "stats_admin": {
              "required": true,
              "value": true
            }
          },
          "x-display-name": "Stats Admin Condition"
        },
        "stats_admin_cond_test": {
          "type": "string",
          "x-dependency": {
            "stats_admin_cond": {
              "required": true
            }
          },
          "x-display-name": "Stats Admin Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "stats_enable": {
          "type": "boolean",
          "x-display-name": "Stats Enable"
        },
        "stats_hide_version": {
          "type": "boolean",
          "x-display-name": "Stats Hide Version"
        },
        "stats_maxconn": {
          "type": "integer",
          "minimum": 1
        },
        "stats_refresh_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "stats_show_desc": {
          "type": "string",
          "x-nullable": true
        },
        "stats_show_legends": {
          "type": "boolean",
          "x-display-name": "Stats Show Legends"
        },
        "stats_show_node_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "stats_uri_prefix": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      }
    },
    "stick_rule": {
      "description": "Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.",
      "type": "object",
      "title": "Stick Rule",
      "required": [
        "index",
        "type",
        "pattern"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "pattern": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "table": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "match",
            "on",
            "store-request",
            "store-response"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "index": 0,
        "pattern": "src",
        "type": "match"
      }
    },
    "stick_rules": {
      "description": "HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)",
      "type": "array",
      "title": "Stick Rules Array",
      "items": {
        "$ref": "#/definitions/stick_rule"
      }
    },
    "stick_table": {
      "description": "Stick Table Information",
      "type": "object",
      "title": "Stick Table",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "enum": [
                  "server_id",
                  "gpc0",
                  "gpc0_rate",
                  "gpc1",
                  "gpc1_rate",
                  "gpt0",
                  "conn_cnt",
                  "conn_cur",
                  "conn_rate",
                  "sess_cnt",
                  "sess_rate",
                  "http_req_cnt",
                  "http_req_rate",
                  "http_err_cnt",
                  "http_err_rate",
                  "bytes_in_cnt",
                  "bytes_in_rate",
                  "bytes_out_cnt",
                  "bytes_out_rate"
                ]
              },
              "period": {
                "type": "integer",
                "x-dependency": {
                  "type": {
                    "value": "rate"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "rate",
                  "counter"
                ]
              }
            },
            "x-go-name": "StickTableField"
          }
        },
        "name": {
          "type": "string"
        },
        "process": {
          "description": "Process number if master-worker mode",
          "type": "integer",
          "x-nullable": true
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "ip",
            "ipv6",
            "integer",
            "string",
            "binary"
          ]
        },
        "used": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "stick_table_entries": {
      "description": "Entries of one runtime stick table",
      "type": "array",
      "title": "Stick Tables Entries",
      "items": {
        "$ref": "#/definitions/stick_table_entry"
      }
    },
    "stick_table_entry": {
      "description": "One entry in stick table",
      "type": "object",
      "title": "Stick Table Entry",
      "properties": {
        "bytes_in_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_in_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cur": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "exp": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "gpt0": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "server_id": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "use": {
          "type": "boolean"
        }
      }
    },
    "stick_tables": {
      "description": "Array of runtime stick tables",
      "type": "array",
      "title": "Stick Tables Array",
      "items": {
        "$ref": "#/definitions/stick_table"
      }
    },
    "tcp_check": {
      "type": "object",
      "title": "TCP Check",
      "required": [
        "index",
        "action"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "comment",
            "connect",
            "expect",
            "send",
            "send-lf",
            "send-binary",
            "send-binary-lf",
            "set-var",
            "set-var-fmt",
            "unset-var"
          ],
          "x-nullable": false
        },
        "addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-display-name": "ALPN Protocols",
          "x-nullable": false
        },
        "check_comment": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": [
                "connect",
                "expect",
                "send",
                "send-lf",
                "send-binary",
                "send-binary-lf"
              ]
            }
          },
          "x-nullable": false
        },
        "data": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send"
            }
          }
        },
        "default": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "error_status": {
          "type": "string",
          "enum": [
            "L7OKC",
            "L7RSP",
            "L7STS",
            "L6RSP",
            "L4CON"
          ],
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "exclamation_mark": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          },
          "x-display-name": "Expect Exclamation Mark"
        },
        "fmt": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-lf"
            }
          }
        },
        "hex_fmt": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-binary-lf"
            }
          }
        },
        "hex_string": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-binary"
            }
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "linger": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "log_message": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "comment"
            }
          }
        },
        "match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "string",
            "rstring",
            "string-lf",
            "binary",
            "rbinary",
            "binary-lf"
          ],
          "x-dependency": {
            "action": {
              "required": true,
              "value": "expect"
            }
          },
          "x-display-name": "Expect Match"
        },
        "min_recv": {
          "type": "integer",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "ok_status": {
          "type": "string",
          "enum": [
            "L7OK",
            "L7OKC",
            "L6OK",
            "L4OK"
          ],
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "on_error": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "on_success": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "pattern": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "expect"
            }
          }
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": true
        },
        "port_string": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "proto": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "send_proxy": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "sni": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "ssl": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "status-code": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "tout_status": {
          "type": "string",
          "enum": [
            "L7TOUT",
            "L6TOUT",
            "L4TOUT"
          ],
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var"
              ]
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_fmt": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var-fmt"
              ]
            }
          },
          "x-display-name": "Var Log format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "via_socks4": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        }
      }
    },
    "tcp_checks": {
      "type": "array",
      "title": "TCP Checks Array",
      "items": {
        "$ref": "#/definitions/tcp_check"
      }
    },
    "tcp_request_rule": {
      "description": "HAProxy TCP Request Rule configuration (corresponds to tcp-request)",
      "type": "object",
      "title": "TCP Request Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "capture",
            "do-resolve",
            "expect-netscaler-cip",
            "expect-proxy",
            "reject",
            "sc-inc-gpc0",
            "sc-inc-gpc1",
            "sc-set-gpt0",
            "send-spoe-group",
            "set-dst-port",
            "set-dst",
            "set-priority",
            "set-src",
            "set-var",
            "silent-drop",
            "track-sc0",
            "track-sc1",
            "track-sc2",
            "unset-var",
            "use-service",
            "lua"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-nullable": false
        },
        "capture_len": {
          "type": "integer",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "capture"
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Capture Length"
        },
        "capture_sample": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "capture"
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Capture Sample"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "expr": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "do-resolve",
                "set-var",
                "set-src",
                "set-priority",
                "set-dst",
                "set-dst-port"
              ]
            },
            "type": {
              "value": [
                "session",
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Standard HAProxy expression"
        },
        "gpt_value": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "sc-set-gpt0"
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Sticky counter value"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "lua"
            },
            "type": {
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Lua action name"
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "lua"
            },
            "type": {
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Lua action params"
        },
        "priority_type": {
          "type": "string",
          "enum": [
            "class",
            "offset"
          ],
          "x-dependency": {
            "action": {
              "required": true,
              "value": "set-priority"
            },
            "type": {
              "value": [
                "content"
              ]
            }
          }
        },
        "resolve_protocol": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "action": {
              "required": false,
              "value": "do-resolve"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Protocol"
        },
        "resolve_resolvers": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "do-resolve"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Resolvers"
        },
        "resolve_var": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "do-resolve"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Variable name"
        },
        "sc_inc_id": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "sc-inc-gpc0",
                "sc-inc-gpc1",
                "sc-set-gpt0"
              ]
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Sticky counter ID"
        },
        "service_name": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "use-service"
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Service name"
        },
        "spoe_engine_name": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-spoe-group"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Engine name"
        },
        "spoe_group_name": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-spoe-group"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Group name"
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "track_key": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "track-sc0",
                "track-sc1",
                "track-sc2"
              ]
            },
            "type": {
              "value": [
                "session",
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Sample expression rule"
        },
        "track_table": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": false,
              "value": [
                "track-sc0",
                "track-sc1",
                "track-sc2"
              ]
            },
            "type": {
              "value": [
                "session",
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Optional table name"
        },
        "type": {
          "type": "string",
          "enum": [
            "connection",
            "content",
            "inspect-delay",
            "session"
          ],
          "x-nullable": false
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "unset-var"
              ]
            },
            "type": {
              "value": [
                "session",
                "content"
              ]
            }
          },
          "x-display-name": "Variable name"
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "unset-var"
              ]
            },
            "type": {
              "value": [
                "session",
                "content"
              ]
            }
          },
          "x-display-name": "Variable scope"
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "index": 0,
        "type": "connection"
      }
    },
    "tcp_request_rules": {
      "description": "HAProxy TCP request rules array (corresponds to tcp-request directive)",
      "type": "array",
      "title": "TCP Request Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_request_rule"
      }
    },
    "tcp_response_rule": {
      "description": "HAProxy TCP Response Rule configuration (corresponds to tcp-response)",
      "type": "object",
      "title": "TCP Response Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject",
            "lua"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "content"
            }
          },
          "x-nullable": false
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "lua"
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Lua action name"
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "lua"
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Lua action params"
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "content",
            "inspect-delay"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "index": 0,
        "type": "content"
      }
    },
    "tcp_response_rules": {
      "description": "HAProxy TCP response rules array (corresponds to tcp-response directive)",
      "type": "array",
      "title": "TCP Response Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_response_rule"
      }
    },
    "transaction": {
      "description": "HAProxy configuration transaction",
      "type": "object",
      "title": "Configuration transaction",
      "properties": {
        "_version": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "outdated",
            "in_progress",
            "success"
          ]
        }
      },
      "example": {
        "_version": 2,
        "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
        "status": "in_progress"
      }
    },
    "transactions": {
      "description": "Configuration transactions array",
      "type": "array",
      "title": "Transactions array",
      "items": {
        "$ref": "#/definitions/transaction"
      }
    },
    "user": {
      "description": "HAProxy userlist user",
      "title": "User",
      "required": [
        "username",
        "secure_password",
        "password"
      ],
      "properties": {
        "groups": {
          "type": "string",
          "x-nullable": false
        },
        "password": {
          "type": "string",
          "x-nullable": false
        },
        "secure_password": {
          "type": "boolean"
        },
        "username": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        }
      }
    },
    "userlist": {
      "description": "HAProxy configuration of access control",
      "type": "object",
      "title": "Userlist",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        }
      }
    },
    "userlists": {
      "description": "HAProxy userlists array",
      "type": "array",
      "title": "Userlists",
      "items": {
        "$ref": "#/definitions/userlist"
      }
    },
    "users": {
      "description": "HAProxy userlist users array",
      "type": "array",
      "title": "Users",
      "items": {
        "$ref": "#/definitions/user"
      }
    }
  },
  "parameters": {
    "force_reload": {
      "type": "boolean",
      "default": false,
      "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
      "name": "force_reload",
      "in": "query"
    },
    "skip_reload": {
      "type": "boolean",
      "default": false,
      "description": "If set, no reload will be initiated after update",
      "name": "skip_reload",
      "in": "query"
    },
    "transaction_id": {
      "type": "string",
      "x-nullable": false,
      "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
      "name": "transaction_id",
      "in": "query"
    },
    "version": {
      "type": "integer",
      "x-nullable": false,
      "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
      "name": "version",
      "in": "query"
    }
  },
  "responses": {
    "AlreadyExists": {
      "description": "The specified resource already exists",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "DefaultError": {
      "description": "General Error",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "NotAcceptable": {
      "description": "The specified resource cannot be handled",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic_auth": []
    }
  ],
  "tags": [
    {
      "name": "ACL"
    },
    {
      "description": "Managing backend configurations (advanced mode)",
      "name": "Backend"
    },
    {
      "name": "BackendSwitchingRule"
    },
    {
      "description": "Managing frontend bind configurations (advanced mode)",
      "name": "Bind"
    },
    {
      "name": "Cache"
    },
    {
      "name": "Cluster"
    },
    {
      "description": "Raw HAProxy configuration management (advanced mode)",
      "name": "Configuration"
    },
    {
      "name": "DeclareCapture"
    },
    {
      "description": "Managing defaults configuration (advanced mode)",
      "name": "Defaults"
    },
    {
      "description": "API autodiscover endpoints",
      "name": "Discovery"
    },
    {
      "name": "Filter"
    },
    {
      "description": "Managing frontend configuration (advanced mode)",
      "name": "Frontend"
    },
    {
      "description": "Managing global configuration (advanced mode)",
      "name": "Global"
    },
    {
      "name": "HTTPCheck"
    },
    {
      "name": "HTTPRequestRule"
    },
    {
      "name": "HTTPResponseRule"
    },
    {
      "name": "Information"
    },
    {
      "name": "LogTarget"
    },
    {
      "name": "Maps"
    },
    {
      "name": "Nameserver"
    },
    {
      "name": "Peer"
    },
    {
      "name": "PeerEntry"
    },
    {
      "description": "Checking reload success. To avoid constant reloading we reload in intervals that are configurable when\nwith reload-delay option. When a change to configuration is made and force_reload url query string\nparameter is false we issue a request for reload, and return the reload ID in response header. You can\nthen use reloads endpoints to check the status of that reload ID. If force_reload is true, we override all\nof this and reload immediately.\n",
      "name": "Reloads"
    },
    {
      "name": "Resolver"
    },
    {
      "description": "Managing backend server configurations (advanced mode)",
      "name": "Server"
    },
    {
      "name": "ServerSwitchingRule"
    },
    {
      "name": "ServerTemplate"
    },
    {
      "name": "ServiceDiscovery"
    },
    {
      "description": "Managing sites (simple configuration mode). Sites are considered as one frontend with multiple backends\nconnected to it via default_backend or use-backend directives.\n",
      "name": "Sites"
    },
    {
      "name": "Specification"
    },
    {
      "name": "SpecificationOpenapiv3"
    },
    {
      "name": "Spoe"
    },
    {
      "name": "SpoeTransactions"
    },
    {
      "description": "Stats container",
      "name": "Stats"
    },
    {
      "name": "StickRule"
    },
    {
      "name": "StickTable"
    },
    {
      "name": "Storage"
    },
    {
      "name": "TCPCheck"
    },
    {
      "name": "TCPRequestRule"
    },
    {
      "name": "TCPResponseRule"
    },
    {
      "description": "Managing transactions. Configuration changes can be grouped in the transaction. You start the\ntransaction with trasactions POST, and call the configuration changes you need with parameter\ntransaction_id. When you want to commit the transaction, you call the transactions PUT and all changes\nin that transaction is commited. If you call a configuration change without the transaction_id,\ntransaction mechanism is implicitly called with one operation in transaction.\n",
      "name": "Transactions"
    },
    {
      "name": "Userlist"
    }
  ],
  "externalDocs": {
    "description": "HAProxy Documentation",
    "url": "https://cbonte.github.io/haproxy-dconv/"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for editing and managing haproxy instances. Provides process information, configuration management,\nhaproxy stats and logs.\n",
    "title": "HAProxy Data Plane API",
    "contact": {
      "name": "HAProxy Support",
      "url": "https://my.haproxy.com/portal/cust/login",
      "email": "support@haproxy.com"
    },
    "version": "2.5"
  },
  "basePath": "/v2",
  "paths": {
    "/": {
      "get": {
        "description": "Returns a list of root endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of root endpoints",
        "operationId": "getAPIEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/cluster": {
      "get": {
        "description": "Returns cluster data",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster"
        ],
        "summary": "Return cluster data",
        "operationId": "getCluster",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Edit cluster settings",
        "tags": [
          "Cluster"
        ],
        "summary": "Edit cluster settings",
        "operationId": "editCluster",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster settings changed",
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Post cluster settings",
        "tags": [
          "Cluster"
        ],
        "summary": "Post cluster settings",
        "operationId": "postCluster",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          {
            "enum": [
              "keep"
            ],
            "type": "string",
            "description": "In case of moving to single mode do we keep or clean configuration",
            "name": "configuration",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Force the advertised address when joining a cluster",
            "name": "advertised_address",
            "in": "query"
          },
          {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "description": "Force the advertised port when joining a cluster",
            "name": "advertised_port",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster settings changed",
            "schema": {
              "$ref": "#/definitions/cluster_settings"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete cluster settings and move the node back to single mode",
        "tags": [
          "Cluster"
        ],
        "summary": "Delete cluster settings",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "enum": [
              "keep"
            ],
            "type": "string",
            "description": "In case of moving to single mode do we keep or clean configuration",
            "name": "configuration",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster settings deleted and node moved to single mode"
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/cluster/certificate": {
      "post": {
        "description": "Initiates a certificate refresh",
        "tags": [
          "Cluster"
        ],
        "summary": "Initiates a certificate refresh",
        "operationId": "initiateCertificateRefresh",
        "responses": {
          "200": {
            "description": "refresh activated"
          },
          "403": {
            "description": "refresh not possible"
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "description": "Return API, hardware and OS information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return API, hardware and OS information",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/info"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/service_discovery/aws": {
      "get": {
        "description": "Return all configured AWS regions.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return an array of all configured AWS regions",
        "operationId": "getAWSRegions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/awsRegions"
                }
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Add a new AWS region.\nCredentials are not required in case Dataplane API is running in an EC2 instance with proper IAM role attached.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Add a new AWS region",
        "operationId": "createAWSRegion",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resource created",
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/service_discovery/aws/{id}": {
      "get": {
        "description": "Return one AWS Region configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return an AWS region",
        "operationId": "getAWSRegion",
        "parameters": [
          {
            "type": "string",
            "description": "AWS region id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/awsRegion"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replace an AWS region configuration by its id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Replace an AWS region",
        "operationId": "replaceAWSRegion",
        "parameters": [
          {
            "type": "string",
            "description": "AWS Region ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated",
            "schema": {
              "$ref": "#/definitions/awsRegion"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an AWS region configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Delete an AWS region",
        "operationId": "deleteAWSRegion",
        "parameters": [
          {
            "type": "string",
            "description": "AWS region ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/service_discovery/consul": {
      "get": {
        "description": "Returns all configured Consul servers.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return an array of all configured Consul servers",
        "operationId": "getConsuls",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/consuls"
                }
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Consul server.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Add a new Consul server",
        "operationId": "createConsul",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/consul"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Consul created",
            "schema": {
              "$ref": "#/definitions/consul"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/service_discovery/consul/{id}": {
      "get": {
        "description": "Returns one Consul server configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Return one Consul server",
        "operationId": "getConsul",
        "parameters": [
          {
            "type": "string",
            "description": "Consul server id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/consul"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Consul server configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Replace a Consul server",
        "operationId": "replaceConsul",
        "parameters": [
          {
            "type": "string",
            "description": "Consul Index",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/consul"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Consul server replaced",
            "schema": {
              "$ref": "#/definitions/consul"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Consul server configuration by it's id.",
        "tags": [
          "ServiceDiscovery"
        ],
        "summary": "Delete a Consul server",
        "operationId": "deleteConsul",
        "parameters": [
          {
            "type": "string",
            "description": "Consul server Index",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Consul server deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "description": "Returns a list of API managed services endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of service endpoints",
        "operationId": "getServicesEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy": {
      "get": {
        "description": "Returns a list of HAProxy related endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy related endpoints",
        "operationId": "getHaproxyEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced configuration of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced configuration endpoints",
        "operationId": "getConfigurationEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/acls": {
      "get": {
        "description": "Returns all ACL lines that are configured in specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Return an array of all ACL lines",
        "operationId": "getAcls",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "ACL name",
            "name": "acl_name",
            "in": "query"
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acls"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new ACL line of the specified type in the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Add a new ACL line",
        "operationId": "createAcl",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "ACL line created",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/acls/{index}": {
      "get": {
        "description": "Returns one ACL line configuration by it's index in the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Return one ACL line",
        "operationId": "getAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/acl"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a ACL line configuration by it's index in the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Replace a ACL line",
        "operationId": "replaceAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ACL line replaced",
            "schema": {
              "$ref": "#/definitions/acl"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/acl"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a ACL line configuration by it's index from the specified parent.",
        "tags": [
          "ACL"
        ],
        "summary": "Delete a ACL line",
        "operationId": "deleteAcl",
        "parameters": [
          {
            "type": "integer",
            "description": "ACL line Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "ACL line deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Return an array of all Backend Switching Rules",
        "operationId": "getBackendSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Backend Switching Rule of the specified type in the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Add a new Backend Switching Rule",
        "operationId": "createBackendSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend Switching Rule created",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backend_switching_rules/{index}": {
      "get": {
        "description": "Returns one Backend Switching Rule configuration by it's index in the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Return one Backend Switching Rule",
        "operationId": "getBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Backend Switching Rule configuration by it's index in the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Replace a Backend Switching Rule",
        "operationId": "replaceBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Backend Switching Rule configuration by it's index from the specified frontend.",
        "tags": [
          "BackendSwitchingRule"
        ],
        "summary": "Delete a Backend Switching Rule",
        "operationId": "deleteBackendSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend Switching Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backends": {
      "get": {
        "description": "Returns an array of all configured backends.",
        "tags": [
          "Backend"
        ],
        "summary": "Return an array of backends",
        "operationId": "getBackends",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new backend to the configuration file.",
        "tags": [
          "Backend"
        ],
        "summary": "Add a backend",
        "operationId": "createBackend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend created",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/backends/{name}": {
      "get": {
        "description": "Returns one backend configuration by it's name.",
        "tags": [
          "Backend"
        ],
        "summary": "Return a backend",
        "operationId": "getBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/backend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a backend configuration by it's name.",
        "tags": [
          "Backend"
        ],
        "summary": "Replace a backend",
        "operationId": "replaceBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Backend replaced",
            "schema": {
              "$ref": "#/definitions/backend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/backend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a backend from the configuration by it's name.",
        "tags": [
          "Backend"
        ],
        "summary": "Delete a backend",
        "operationId": "deleteBackend",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Backend deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/binds": {
      "get": {
        "description": "Returns an array of all binds that are configured in specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Return an array of binds",
        "operationId": "getBinds",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/binds"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new bind in the specified frontend in the configuration file.",
        "tags": [
          "Bind"
        ],
        "summary": "Add a new bind",
        "operationId": "createBind",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Bind created",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/binds/{name}": {
      "get": {
        "description": "Returns one bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Return one bind",
        "operationId": "getBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/bind"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Replace a bind",
        "operationId": "replaceBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Bind replaced",
            "schema": {
              "$ref": "#/definitions/bind"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/bind"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a bind configuration by it's name in the specified frontend.",
        "tags": [
          "Bind"
        ],
        "summary": "Delete a bind",
        "operationId": "deleteBind",
        "parameters": [
          {
            "type": "string",
            "description": "Bind name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Bind deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/caches": {
      "get": {
        "description": "Returns an array of all configured caches.",
        "tags": [
          "Cache"
        ],
        "summary": "Return an array of caches",
        "operationId": "getCaches",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/caches"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new cache section to the configuration file.",
        "tags": [
          "Cache"
        ],
        "summary": "Add a cache",
        "operationId": "createCache",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Cache created",
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/cache"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/caches/{name}": {
      "get": {
        "description": "Returns one cache section configuration by it's name.",
        "tags": [
          "Cache"
        ],
        "summary": "Return a cache",
        "operationId": "getCache",
        "parameters": [
          {
            "type": "string",
            "description": "Cache name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/cache"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a cache configuration by it's name.",
        "tags": [
          "Cache"
        ],
        "summary": "Replace a cache",
        "operationId": "replaceCache",
        "parameters": [
          {
            "type": "string",
            "description": "Cache name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cache replaced",
            "schema": {
              "$ref": "#/definitions/cache"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/cache"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a cache from the configuration by it's name.",
        "tags": [
          "Cache"
        ],
        "summary": "Delete a cache",
        "operationId": "deleteCache",
        "parameters": [
          {
            "type": "string",
            "description": "Cache name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Cache deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/captures": {
      "get": {
        "description": "Returns an array of all declare capture records that are configured in specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Return an array of declare captures",
        "operationId": "getDeclareCaptures",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/captures"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new declare capture in the specified frontend in the configuration file.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Add a new declare capture",
        "operationId": "createDeclareCapture",
        "parameters": [
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Declare capture created",
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/capture"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/captures/{index}": {
      "get": {
        "description": "Returns one declare capture configuration by it's index in the specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Return one declare capture",
        "operationId": "getDeclareCapture",
        "parameters": [
          {
            "type": "integer",
            "description": "Declare Capture Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/capture"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a declare capture configuration by it's index in the specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Replace a declare capture",
        "operationId": "replaceDeclareCapture",
        "parameters": [
          {
            "type": "integer",
            "description": "Declare Capture Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Declare Capture replaced",
            "schema": {
              "$ref": "#/definitions/capture"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/capture"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a declare capture configuration by it's index in the specified frontend.",
        "tags": [
          "DeclareCapture"
        ],
        "summary": "Delete a declare capture",
        "operationId": "deleteDeclareCapture",
        "parameters": [
          {
            "type": "integer",
            "description": "Declare Capture Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent frontend name",
            "name": "frontend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Declare Capture deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/defaults": {
      "get": {
        "description": "Returns defaults part of configuration.",
        "tags": [
          "Defaults"
        ],
        "summary": "Return defaults part of configuration",
        "operationId": "getDefaults",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/defaults"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replace defaults part of config",
        "tags": [
          "Defaults"
        ],
        "summary": "Replace defaults",
        "operationId": "replaceDefaults",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Defaults replaced",
            "schema": {
              "$ref": "#/definitions/defaults"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/defaults"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/filters": {
      "get": {
        "description": "Returns all Filters that are configured in specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Return an array of all Filters",
        "operationId": "getFilters",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filters"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Filter of the specified type in the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Add a new Filter",
        "operationId": "createFilter",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Filter created",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/filters/{index}": {
      "get": {
        "description": "Returns one Filter configuration by it's index in the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Return one Filter",
        "operationId": "getFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/filter"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Filter configuration by it's index in the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Replace a Filter",
        "operationId": "replaceFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Filter replaced",
            "schema": {
              "$ref": "#/definitions/filter"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/filter"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Filter configuration by it's index from the specified parent.",
        "tags": [
          "Filter"
        ],
        "summary": "Delete a Filter",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "type": "integer",
            "description": "Filter Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Filter deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends": {
      "get": {
        "description": "Returns an array of all configured frontends.",
        "tags": [
          "Frontend"
        ],
        "summary": "Return an array of frontends",
        "operationId": "getFrontends",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontends"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new frontend to the configuration file.",
        "tags": [
          "Frontend"
        ],
        "summary": "Add a frontend",
        "operationId": "createFrontend",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Frontend created",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/frontends/{name}": {
      "get": {
        "description": "Returns one frontend configuration by it's name.",
        "tags": [
          "Frontend"
        ],
        "summary": "Return a frontend",
        "operationId": "getFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/frontend"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a frontend configuration by it's name.",
        "tags": [
          "Frontend"
        ],
        "summary": "Replace a frontend",
        "operationId": "replaceFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Frontend replaced",
            "schema": {
              "$ref": "#/definitions/frontend"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/frontend"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "tags": [
          "Frontend"
        ],
        "summary": "Delete a frontend",
        "operationId": "deleteFrontend",
        "parameters": [
          {
            "type": "string",
            "description": "Frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Frontend deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/global": {
      "get": {
        "description": "Returns global part of configuration.",
        "tags": [
          "Global"
        ],
        "summary": "Return a global part of configuration",
        "operationId": "getGlobal",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/global"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replace global part of config",
        "tags": [
          "Global"
        ],
        "summary": "Replace global",
        "operationId": "replaceGlobal",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Global replaced",
            "schema": {
              "$ref": "#/definitions/global"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/global"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Return an array of userlist groups",
        "operationId": "getGroups",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/groups"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a new userlist group",
        "operationId": "createGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Group created",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/group"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/groups/{name}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Return one userlist group",
        "operationId": "getGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/group"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Replace a group",
        "operationId": "replaceGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Group replaced",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/group"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Group deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_checks": {
      "get": {
        "description": "Returns all HTTP checks that are configured in specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Return an array of HTTP checks",
        "operationId": "getHTTPChecks",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_checks"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP check of the specified type in the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Add a new HTTP check",
        "operationId": "createHTTPCheck",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP check created",
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_checks/{index}": {
      "get": {
        "description": "Returns one HTTP check configuration by it's index in the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Return one HTTP check",
        "operationId": "getHTTPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_check"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Check configuration by it's index in the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Replace a HTTP check",
        "operationId": "replaceHTTPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP check replaced",
            "schema": {
              "$ref": "#/definitions/http_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP check configuration by it's index from the specified parent.",
        "tags": [
          "HTTPCheck"
        ],
        "summary": "Delete a HTTP check",
        "operationId": "deleteHTTPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP check deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules": {
      "get": {
        "description": "Returns all HTTP Request Rules that are configured in specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Return an array of all HTTP Request Rules",
        "operationId": "getHTTPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Request Rule of the specified type in the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Add a new HTTP Request Rule",
        "operationId": "createHTTPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Request Rule created",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_request_rules/{index}": {
      "get": {
        "description": "Returns one HTTP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Return one HTTP Request Rule",
        "operationId": "getHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Replace a HTTP Request Rule",
        "operationId": "replaceHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Request Rule configuration by it's index from the specified parent.",
        "tags": [
          "HTTPRequestRule"
        ],
        "summary": "Delete a HTTP Request Rule",
        "operationId": "deleteHTTPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Request Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules": {
      "get": {
        "description": "Returns all HTTP Response Rules that are configured in specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Return an array of all HTTP Response Rules",
        "operationId": "getHTTPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new HTTP Response Rule of the specified type in the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Add a new HTTP Response Rule",
        "operationId": "createHTTPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Response Rule created",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/http_response_rules/{index}": {
      "get": {
        "description": "Returns one HTTP Response Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Return one HTTP Response Rule",
        "operationId": "getHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/http_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a HTTP Response Rule configuration by it's index in the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Replace a HTTP Response Rule",
        "operationId": "replaceHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HTTP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/http_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a HTTP Response Rule configuration by it's index from the specified parent.",
        "tags": [
          "HTTPResponseRule"
        ],
        "summary": "Delete a HTTP Response Rule",
        "operationId": "deleteHTTPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "HTTP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "HTTP Response Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets": {
      "get": {
        "description": "Returns all Log Targets that are configured in specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Return an array of all Log Targets",
        "operationId": "getLogTargets",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_targets"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Log Target of the specified type in the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Add a new Log Target",
        "operationId": "createLogTarget",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Log Target created",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/log_targets/{index}": {
      "get": {
        "description": "Returns one Log Target configuration by it's index in the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Return one Log Target",
        "operationId": "getLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/log_target"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Log Target configuration by it's index in the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Replace a Log Target",
        "operationId": "replaceLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Log Target replaced",
            "schema": {
              "$ref": "#/definitions/log_target"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/log_target"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Log Target configuration by it's index from the specified parent.",
        "tags": [
          "LogTarget"
        ],
        "summary": "Delete a Log Target",
        "operationId": "deleteLogTarget",
        "parameters": [
          {
            "type": "integer",
            "description": "Log Target Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "frontend",
              "backend",
              "defaults",
              "global"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Log Target deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/nameservers": {
      "get": {
        "description": "Returns an array of all configured nameservers.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Return an array of nameservers",
        "operationId": "getNameservers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/nameservers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new nameserver to the resolvers section.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Add a nameserver",
        "operationId": "createNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Nameserver created",
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/nameserver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/nameservers/{name}": {
      "get": {
        "description": "Returns one nameserver configuration by it's name.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Return a nameserver",
        "operationId": "getNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Nameserver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/nameserver"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a nameserver configuration by it's name.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Replace a nameserver",
        "operationId": "replaceNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Nameserver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Nameserver replaced",
            "schema": {
              "$ref": "#/definitions/nameserver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/nameserver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a nameserver from the resolvers section by it's name.",
        "tags": [
          "Nameserver"
        ],
        "summary": "Delete a nameserver",
        "operationId": "deleteNameserver",
        "parameters": [
          {
            "type": "string",
            "description": "Nameserver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent resolver name",
            "name": "resolver",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Nameserver deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_entries": {
      "get": {
        "description": "Returns an array of all peer_entries that are configured in specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Return an array of peer_entries",
        "operationId": "getPeerEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Parent peer section name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_entries"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new peer entry in the specified peer section in the configuration file.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Add a new peer_entry",
        "operationId": "createPeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Parent peer section name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "PeerEntry created",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_entries/{name}": {
      "get": {
        "description": "Returns one peer_entry configuration by it's name in the specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Return one peer_entry",
        "operationId": "getPeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "PeerEntry name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent peers name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_entry"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a peer entry configuration by it's name in the specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Replace a peer_entry",
        "operationId": "replacePeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "PeerEntry name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent peers name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "PeerEntry replaced",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/peer_entry"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a peer entry configuration by it's name in the specified peer section.",
        "tags": [
          "PeerEntry"
        ],
        "summary": "Delete a peer_entry",
        "operationId": "deletePeerEntry",
        "parameters": [
          {
            "type": "string",
            "description": "PeerEntry name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent peers name",
            "name": "peer_section",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "PeerEntry deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_section": {
      "get": {
        "description": "Returns an array of all configured peer_section.",
        "tags": [
          "Peer"
        ],
        "summary": "Return an array of peer_section",
        "operationId": "getPeerSections",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_sections"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new peer to the configuration file.",
        "tags": [
          "Peer"
        ],
        "summary": "Add a peer",
        "operationId": "createPeer",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peer_section"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Peer created",
            "schema": {
              "$ref": "#/definitions/peer_section"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/peer_section"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/peer_section/{name}": {
      "get": {
        "description": "Returns one peer configuration by it's name.",
        "tags": [
          "Peer"
        ],
        "summary": "Return a peer",
        "operationId": "getPeerSection",
        "parameters": [
          {
            "type": "string",
            "description": "Peer name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/peer_section"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a peer from the configuration by it's name.",
        "tags": [
          "Peer"
        ],
        "summary": "Delete a peer",
        "operationId": "deletePeer",
        "parameters": [
          {
            "type": "string",
            "description": "Peer name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Peer deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/raw": {
      "get": {
        "description": "Returns HAProxy configuration file in plain text",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Return HAProxy configuration",
        "operationId": "getHAProxyConfiguration",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Push a new haproxy configuration file in plain text",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Push new haproxy configuration",
        "operationId": "postHAProxyConfiguration",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no version check will be done and the pushed config will be enforced",
            "name": "skip_version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no reload will be initiated and runtime actions from X-Runtime-Actions will be applied",
            "name": "skip_reload",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, only validates configuration, without applying it",
            "name": "only_validate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of Runtime API commands with parameters separated by ';'",
            "name": "X-Runtime-Actions",
            "in": "header"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "New HAProxy configuration pushed",
            "schema": {
              "type": "string"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/resolvers": {
      "get": {
        "description": "Returns an array of all configured resolvers.",
        "tags": [
          "Resolver"
        ],
        "summary": "Return an array of resolvers",
        "operationId": "getResolvers",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/resolvers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new resolver section to the configuration file.",
        "tags": [
          "Resolver"
        ],
        "summary": "Add a resolver",
        "operationId": "createResolver",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Resolver created",
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/resolver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/resolvers/{name}": {
      "get": {
        "description": "Returns one resolver section configuration by it's name.",
        "tags": [
          "Resolver"
        ],
        "summary": "Return a resolver",
        "operationId": "getResolver",
        "parameters": [
          {
            "type": "string",
            "description": "Resolver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/resolver"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a resolver configuration by it's name.",
        "tags": [
          "Resolver"
        ],
        "summary": "Replace a resolver",
        "operationId": "replaceResolver",
        "parameters": [
          {
            "type": "string",
            "description": "Resolver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Resolver replaced",
            "schema": {
              "$ref": "#/definitions/resolver"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/resolver"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a resolver from the configuration by it's name.",
        "tags": [
          "Resolver"
        ],
        "summary": "Delete a resolver",
        "operationId": "deleteResolver",
        "parameters": [
          {
            "type": "string",
            "description": "Resolver name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Resolver deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Return an array of all Server Switching Rules",
        "operationId": "getServerSwitchingRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Server Switching Rule of the specified type in the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Add a new Server Switching Rule",
        "operationId": "createServerSwitchingRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Server Switching Rule created",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/server_switching_rules/{index}": {
      "get": {
        "description": "Returns one Server Switching Rule configuration by it's index in the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Return one Server Switching Rule",
        "operationId": "getServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_switching_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Server Switching Rule configuration by it's index in the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Replace a Server Switching Rule",
        "operationId": "replaceServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Server Switching Rule replaced",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_switching_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Server Switching Rule configuration by it's index from the specified backend.",
        "tags": [
          "ServerSwitchingRule"
        ],
        "summary": "Delete a Server Switching Rule",
        "operationId": "deleteServerSwitchingRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Switching Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server Switching Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/server_templates": {
      "get": {
        "description": "Returns an array of all server templates that are configured in specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Return an array of server templates",
        "operationId": "getServerTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_templates"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new server template in the specified backend in the configuration file.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Add a new server template",
        "operationId": "createServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Server template created",
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_template"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/server_templates/{prefix}": {
      "get": {
        "description": "Returns one server template configuration by it's prefix in the specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Return one server template",
        "operationId": "getServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Server template prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server_template"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "integer",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a server template configuration by it's prefix in the specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Replace a server template",
        "operationId": "replaceServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Server template prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Server template replaced",
            "schema": {
              "$ref": "#/definitions/server_template"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server_template"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a server template configuration by it's prefix in the specified backend.",
        "tags": [
          "ServerTemplate"
        ],
        "summary": "Delete a server template",
        "operationId": "deleteServerTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Server template prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server template deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/servers": {
      "get": {
        "description": "Returns an array of all servers that are configured in specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Return an array of servers",
        "operationId": "getServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/servers"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new server in the specified backend in the configuration file.",
        "tags": [
          "Server"
        ],
        "summary": "Add a new server",
        "operationId": "createServer",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Server created",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/servers/{name}": {
      "get": {
        "description": "Returns one server configuration by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Return one server",
        "operationId": "getServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/server"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a server configuration by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Replace a server",
        "operationId": "replaceServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Server replaced",
            "schema": {
              "$ref": "#/definitions/server"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/server"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a server configuration by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Delete a server",
        "operationId": "deleteServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Server deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules": {
      "get": {
        "description": "Returns all Stick Rules that are configured in specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Return an array of all Stick Rules",
        "operationId": "getStickRules",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new Stick Rule of the specified type in the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Add a new Stick Rule",
        "operationId": "createStickRule",
        "parameters": [
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Stick Rule created",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/stick_rules/{index}": {
      "get": {
        "description": "Returns one Stick Rule configuration by it's index in the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Return one Stick Rule",
        "operationId": "getStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/stick_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a Stick Rule configuration by it's index in the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Replace a Stick Rule",
        "operationId": "replaceStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Stick Rule replaced",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/stick_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a Stick Rule configuration by it's index from the specified backend.",
        "tags": [
          "StickRule"
        ],
        "summary": "Delete a Stick Rule",
        "operationId": "deleteStickRule",
        "parameters": [
          {
            "type": "integer",
            "description": "Stick Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Stick Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_checks": {
      "get": {
        "description": "Returns all TCP checks that are configured in specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Return an array of TCP checks",
        "operationId": "getTCPChecks",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_checks"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new TCP check of the specified type in the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Add a new TCP check",
        "operationId": "createTCPCheck",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP check created",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_checks/{index}": {
      "get": {
        "description": "Returns one TCP check configuration by it's index in the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Return one TCP check",
        "operationId": "getTCPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_check"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Check configuration by it's index in the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Replace a TCP check",
        "operationId": "replaceTCPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP check replaced",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_check"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP check configuration by it's index from the specified parent.",
        "tags": [
          "TCPCheck"
        ],
        "summary": "Delete a TCP check",
        "operationId": "deleteTCPCheck",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP check Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query"
          },
          {
            "enum": [
              "backend",
              "defaults"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP check deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules": {
      "get": {
        "description": "Returns all TCP Request Rules that are configured in specified parent and parent type.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Return an array of all TCP Request Rules",
        "operationId": "getTCPRequestRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Request Rule of the specified type in the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Add a new TCP Request Rule",
        "operationId": "createTCPRequestRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Request Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_request_rules/{index}": {
      "get": {
        "description": "Returns one TCP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Return one TCP Request Rule",
        "operationId": "getTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_request_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Request Rule configuration by it's index in the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Replace a TCP Request Rule",
        "operationId": "replaceTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Request Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_request_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Request Rule configuration by it's index from the specified parent.",
        "tags": [
          "TCPRequestRule"
        ],
        "summary": "Delete a TCP Request Rule",
        "operationId": "deleteTCPRequestRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Request Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent name",
            "name": "parent_name",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "frontend",
              "backend"
            ],
            "type": "string",
            "description": "Parent type",
            "name": "parent_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Request Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules": {
      "get": {
        "description": "Returns all TCP Response Rules that are configured in specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Return an array of all TCP Response Rules",
        "operationId": "getTCPResponseRules",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rules"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new TCP Response Rule of the specified type in the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Add a new TCP Response Rule",
        "operationId": "createTCPResponseRule",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "TCP Response Rule created",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/tcp_response_rules/{index}": {
      "get": {
        "description": "Returns one TCP Response Rule configuration by it's index in the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Return one TCP Response Rule",
        "operationId": "getTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/tcp_response_rule"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a TCP Response Rule configuration by it's Index in the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Replace a TCP Response Rule",
        "operationId": "replaceTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "TCP Response Rule replaced",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/tcp_response_rule"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a TCP Response Rule configuration by it's index from the specified backend.",
        "tags": [
          "TCPResponseRule"
        ],
        "summary": "Delete a TCP Response Rule",
        "operationId": "deleteTCPResponseRule",
        "parameters": [
          {
            "type": "integer",
            "description": "TCP Response Rule Index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "TCP Response Rule deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/userlists": {
      "get": {
        "description": "Returns an array of all configured userlists.",
        "tags": [
          "Userlist"
        ],
        "summary": "Return an array of userlists",
        "operationId": "getUserlists",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/userlists"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new userlist to the configuration file.",
        "tags": [
          "Userlist"
        ],
        "summary": "Add a new userlist",
        "operationId": "createUserlist",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userlist"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Userlist created",
            "schema": {
              "$ref": "#/definitions/userlist"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/userlist"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/userlists/{name}": {
      "get": {
        "description": "Returns one userlist configuration by it's name.",
        "tags": [
          "Userlist"
        ],
        "summary": "Return one userlist",
        "operationId": "getUserlist",
        "parameters": [
          {
            "type": "string",
            "description": "Userlist name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/userlist"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a userlist configuration by it's name.",
        "tags": [
          "Userlist"
        ],
        "summary": "Delete a userlist",
        "operationId": "deleteUserlist",
        "parameters": [
          {
            "type": "string",
            "description": "Userlist name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Userlist deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Return an array of userlist users",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/users"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new userlist user",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/user"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/users/{username}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Return one userlist user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "User username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/user"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace a user",
        "operationId": "replaceUser",
        "parameters": [
          {
            "type": "string",
            "description": "User username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User replaced",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/user"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "User username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent userlist name",
            "name": "userlist",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/configuration/version": {
      "get": {
        "description": "Returns configuration version.",
        "tags": [
          "Configuration"
        ],
        "summary": "Return a configuration version",
        "operationId": "getConfigurationVersion",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration version",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/reloads": {
      "get": {
        "description": "Returns a list of HAProxy reloads.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Reloads"
        ],
        "summary": "Return list of HAProxy Reloads.",
        "operationId": "getReloads",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/reloads"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/reloads/{id}": {
      "get": {
        "description": "Returns one HAProxy reload status.",
        "tags": [
          "Reloads"
        ],
        "summary": "Return one HAProxy reload status",
        "operationId": "getReload",
        "parameters": [
          {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$",
            "type": "string",
            "description": "Reload id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/reload"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced runtime settings of HAProxy objects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy advanced runtime endpoints",
        "operationId": "getRuntimeEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/acl_file_entries": {
      "get": {
        "description": "Returns an ACL runtime setting using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an ACL entries",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_files_entries"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Adds a new ACL payload.",
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Add a new ACL payload",
        "operationId": "addPayloadRuntimeACL",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl_files_entries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ACL payload added",
            "schema": {
              "$ref": "#/definitions/acl_files_entries"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds an entry into the ACL file using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Add entry to an ACL file",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acl_file_entry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ACL entry created",
            "schema": {
              "$ref": "#/definitions/acl_file_entry"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/acl_file_entries/{id}": {
      "get": {
        "description": "Returns the ACL entry by its ID using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an ACL entry",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "File entry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_file_entry"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the entry from the ACL by its value using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Delete an ACL entry",
        "parameters": [
          {
            "type": "string",
            "description": "ACL ID",
            "name": "acl_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "File entry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/acls": {
      "get": {
        "description": "Returns all ACL files using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an array of all ACL files",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_files"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/acls/{id}": {
      "get": {
        "description": "Returns an ACL file by id using the runtime socket.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL Runtime"
        ],
        "summary": "Return an ACL file",
        "parameters": [
          {
            "type": "string",
            "description": "ACL file entry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/acl_file"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/info": {
      "get": {
        "description": "Return HAProxy process information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Information"
        ],
        "summary": "Return HAProxy process information",
        "operationId": "getHaproxyProcessInfo",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/process_infos"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/maps": {
      "get": {
        "description": "Returns runtime map files.",
        "tags": [
          "Maps"
        ],
        "summary": "Return runtime map files",
        "operationId": "getAllRuntimeMapFiles",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "If true, also show unmanaged map files loaded in haproxy",
            "name": "include_unmanaged",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/maps"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/maps/{name}": {
      "get": {
        "description": "Returns one runtime map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Return one runtime map file",
        "operationId": "getOneRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/map"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Adds a new map payload.",
        "tags": [
          "Maps"
        ],
        "summary": "Add a new map payload",
        "operationId": "addPayloadRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/map_entries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Map payload added",
            "schema": {
              "$ref": "#/definitions/map_entries"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Remove all map entries from the map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Remove all map entries from the map file",
        "operationId": "clearRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If true, deletes file from disk",
            "name": "forceDelete",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "All map entries deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/maps_entries": {
      "get": {
        "description": "Returns an array of all entries in a given runtime map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Return one map runtime entries",
        "operationId": "showRuntimeMap",
        "parameters": [
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/map_entries"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds an entry into the map file.",
        "tags": [
          "Maps"
        ],
        "summary": "Adds an entry into the map file",
        "operationId": "addMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Map entry created",
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/maps_entries/{id}": {
      "get": {
        "description": "Returns one map runtime setting by it's id.",
        "tags": [
          "Maps"
        ],
        "summary": "Return one map runtime setting",
        "operationId": "getRuntimeMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Map id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces the value corresponding to each id in a map.",
        "tags": [
          "Maps"
        ],
        "summary": "Replace the value corresponding to each id in a map",
        "operationId": "replaceRuntimeMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Map id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "description": "Map value",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Map value replaced",
            "schema": {
              "$ref": "#/definitions/map_entry"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete all the map entries from the map by its id.",
        "tags": [
          "Maps"
        ],
        "summary": "Deletes all the map entries from the map by its id",
        "operationId": "deleteRuntimeMapEntry",
        "parameters": [
          {
            "type": "string",
            "description": "Map id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Mapfile attribute storage_name",
            "name": "map",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, immediately syncs changes to disk",
            "name": "force_sync",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Map key/value deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/servers": {
      "get": {
        "description": "Returns an array of all servers' runtime settings.",
        "tags": [
          "Server"
        ],
        "summary": "Return an array of runtime servers' settings",
        "operationId": "getRuntimeServers",
        "parameters": [
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_servers"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/servers/{name}": {
      "get": {
        "description": "Returns one server runtime settings by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Return one server runtime settings",
        "operationId": "getRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a server transient settings by it's name in the specified backend.",
        "tags": [
          "Server"
        ],
        "summary": "Replace server transient settings",
        "operationId": "replaceRuntimeServer",
        "parameters": [
          {
            "type": "string",
            "description": "Server name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Parent backend name",
            "name": "backend",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server transient settings replaced",
            "schema": {
              "$ref": "#/definitions/runtime_server"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_table_entries": {
      "get": {
        "description": "Returns an array of all entries in a given stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table Entries",
        "operationId": "getStickTableEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "stick_table",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "A list of filters in format data.\u003ctype\u003e \u003coperator\u003e \u003cvalue\u003e separated by comma",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Key which we want the entries for",
            "name": "key",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Max number of entries to be returned for pagination",
            "name": "count",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset which indicates how many items we skip in pagination",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table_entries"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create or update a stick-table entry in the table.",
        "tags": [
          "StickTable"
        ],
        "summary": "Set Entry to Stick Table",
        "operationId": "setStickTableEntries",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "stick_table",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          },
          {
            "description": "Stick table entry",
            "name": "stick_table_entry",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "key",
                "data_type"
              ],
              "properties": {
                "data_type": {
                  "$ref": "#/definitions/stick_table_entry"
                },
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables": {
      "get": {
        "description": "Returns an array of all stick tables.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Tables",
        "operationId": "getStickTables",
        "parameters": [
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not all processes are returned",
            "name": "process",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_tables"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/runtime/stick_tables/{name}": {
      "get": {
        "description": "Returns one stick table from runtime.",
        "tags": [
          "StickTable"
        ],
        "summary": "Return Stick Table",
        "operationId": "getStickTable",
        "parameters": [
          {
            "type": "string",
            "description": "Stick table name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Process number if master-worker mode, if not only first process is returned",
            "name": "process",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stick_table"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/sites": {
      "get": {
        "description": "Returns an array of all configured sites.",
        "tags": [
          "Sites"
        ],
        "summary": "Return an array of sites",
        "operationId": "getSites",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/sites"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new site to the configuration file.",
        "tags": [
          "Sites"
        ],
        "summary": "Add a site",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Site created",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/sites/{name}": {
      "get": {
        "description": "Returns one site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Return a site",
        "operationId": "getSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/site"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a site configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Replace a site",
        "operationId": "replaceSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Site replaced",
            "schema": {
              "$ref": "#/definitions/site"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/site"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a site from the configuration by it's name.",
        "tags": [
          "Sites"
        ],
        "summary": "Delete a site",
        "operationId": "deleteSite",
        "parameters": [
          {
            "type": "string",
            "description": "Site frontend name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe": {
      "get": {
        "description": "Returns a list of endpoints to be used for SPOE settings of HAProxy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy SPOE endpoints",
        "operationId": "getSpoeEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_agents": {
      "get": {
        "description": "Returns an array of all configured spoe agents in one scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of spoe agents in one scope",
        "operationId": "getSpoeAgents",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_agents"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new spoe agent to the spoe scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new spoe agent to scope",
        "operationId": "createSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe agent created",
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_agents/{name}": {
      "get": {
        "description": "Returns one spoe agent configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a spoe agent",
        "operationId": "getSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe agent name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_agent"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a SPOE agent configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Replace a SPOE agent",
        "operationId": "replaceSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe agent name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Spoe agent replaced",
            "schema": {
              "$ref": "#/definitions/spoe_agent"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a SPOE agent from the configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a SPOE agent",
        "operationId": "deleteSpoeAgent",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe agent name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe agent deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_files": {
      "get": {
        "description": "Returns all available SPOE files.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return all available SPOE files",
        "operationId": "getAllSpoeFiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/spoe_files"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates SPOE file with its entries.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Spoe"
        ],
        "summary": "Creates SPOE file with its entries",
        "operationId": "createSpoe",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "The spoe file to upload",
            "name": "file_upload",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "SPOE file created with its entries",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_files/{name}": {
      "get": {
        "description": "Returns one SPOE file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return one SPOE file",
        "operationId": "getOneSpoeFile",
        "parameters": [
          {
            "type": "string",
            "description": "SPOE file name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes SPOE file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete SPOE file",
        "operationId": "deleteSpoeFile",
        "parameters": [
          {
            "type": "string",
            "description": "SPOE file name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "SPOE file deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_groups": {
      "get": {
        "description": "Returns an array of all configured SPOE groups in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of SPOE groups",
        "operationId": "getSpoeGroups",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_groups"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new SPOE groups to the SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new SPOE groups",
        "operationId": "createSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe groups created",
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_groups/{name}": {
      "get": {
        "description": "Returns one SPOE groups configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a SPOE groups",
        "operationId": "getSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_group"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a SPOE groups configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Replace a SPOE groups",
        "operationId": "replaceSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Spoe groups replaced",
            "schema": {
              "$ref": "#/definitions/spoe_group"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a SPOE groups from the one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a SPOE groups",
        "operationId": "deleteSpoeGroup",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe group deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_messages": {
      "get": {
        "description": "Returns an array of all configured spoe messages in one scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of spoe messages in one scope",
        "operationId": "getSpoeMessages",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_messages"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new spoe message to the spoe scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new spoe message to scope",
        "operationId": "createSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe message created",
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_messages/{name}": {
      "get": {
        "description": "Returns one spoe message configuration in SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a spoe message",
        "operationId": "getSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe message name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_message"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces a spoe message configuration in one SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Replace a spoe message",
        "operationId": "replaceSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe message name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Spoe message replaced",
            "schema": {
              "$ref": "#/definitions/spoe_message"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a spoe message from the SPOE scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a spoe message",
        "operationId": "deleteSpoeMessage",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "scope",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe message name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe message deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_scopes": {
      "get": {
        "description": "Returns an array of all configured spoe scopes.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return an array of spoe scopes",
        "operationId": "getSpoeScopes",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_scopes"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds a new spoe scope.",
        "tags": [
          "Spoe"
        ],
        "summary": "Add a new spoe scope",
        "operationId": "createSpoeScope",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/spoe_scope"
            }
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Spoe scope created",
            "schema": {
              "$ref": "#/definitions/spoe_scope"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/spoe_scopes/{name}": {
      "get": {
        "description": "Returns one SPOE scope in one SPOE file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return one SPOE scope",
        "operationId": "getSpoeScope",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "_version": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/spoe_scope"
                }
              }
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Spoe configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a SPOE scope from the configuration file.",
        "tags": [
          "Spoe"
        ],
        "summary": "Delete a SPOE scope",
        "operationId": "deleteSpoeScope",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Spoe scope name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "integer",
            "x-nullable": false,
            "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Spoe scope deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe/version": {
      "get": {
        "description": "Returns SPOE configuration version.",
        "tags": [
          "Spoe"
        ],
        "summary": "Return a SPOE configuration version",
        "operationId": "getSpoeConfigurationVersion",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
            "name": "transaction_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SPOE configuration version",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe_transactions": {
      "get": {
        "description": "Returns a list of SPOE configuration transactions. Transactions can be filtered by their status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Return list of SPOE configuration transactions.",
        "operationId": "getSpoeTransactions",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "failed",
              "in_progress"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/spoe_transactions"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Start a new transaction",
        "operationId": "startSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Configuration version on which to work on",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            }
          },
          "429": {
            "description": "Too many open transactions",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                }
              },
              "example": {
                "code": 429,
                "message": "cannot start a new transaction, reached the maximum amount of 20 active transactions available"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/spoe_transactions/{id}": {
      "get": {
        "description": "Returns one SPOE configuration transactions.",
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Return one SPOE configuration transactions",
        "operationId": "getSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Commit transaction",
        "operationId": "commitSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction successfully committed",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/spoe_transaction"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a transaction.",
        "tags": [
          "SpoeTransactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteSpoeTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Spoe file name",
            "name": "spoe",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/stats": {
      "get": {
        "description": "Returns a list of HAProxy stats endpoints.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy stats endpoints",
        "operationId": "getStatsEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/stats/native": {
      "get": {
        "description": "Getting stats from the HAProxy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Stats"
        ],
        "summary": "Gets stats",
        "operationId": "getStats",
        "parameters": [
          {
            "enum": [
              "frontend",
              "backend",
              "server"
            ],
            "type": "string",
            "description": "Object type to get stats for (one of frontend, backend, server)",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object name to get stats for",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-dependency": {
              "query.type": "server"
            },
            "description": "Object parent name to get stats for, in case the object is a server",
            "name": "parent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/native_stats"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage": {
      "get": {
        "description": "Returns a list of endpoints that use HAProxy storage for persistency, e.g. maps, ssl certificates...",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Discovery"
        ],
        "summary": "Return list of HAProxy storage endpoints",
        "operationId": "getStorageEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage/general": {
      "get": {
        "description": "Returns a list of all managed general use files",
        "tags": [
          "Storage"
        ],
        "summary": "Return a list of all managed general use files",
        "operationId": "getAllStorageGeneralFiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/general_files"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a managed storage general use file with contents.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Creates a managed storage general use file with contents",
        "operationId": "createStorageGeneralFile",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "General use file content",
            "name": "file_upload",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "General use file created with its contents",
            "schema": {
              "$ref": "#/definitions/general_file"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage/general/{name}": {
      "get": {
        "description": "Returns the contents of one managed general use file from disk",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Return the contents of one managed general use file from disk",
        "operationId": "getOneStorageGeneralFile",
        "parameters": [
          {
            "type": "string",
            "description": "General use file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces the contents of a managed general use file on disk",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Replace contents of a managed general use file on disk",
        "operationId": "replaceStorageGeneralFile",
        "parameters": [
          {
            "type": "string",
            "description": "General use file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no reload will be initiated after update",
            "name": "skip_reload",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "General use file replaced"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a managed general use file from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Deletes a managed general use file from disk",
        "operationId": "deleteStorageGeneralFile",
        "parameters": [
          {
            "type": "string",
            "description": "General use file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "General use file deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage/maps": {
      "get": {
        "description": "Returns a list of all managed map files",
        "tags": [
          "Storage"
        ],
        "summary": "Return a list of all managed map files",
        "operationId": "getAllStorageMapFiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/maps"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a managed storage map file with its entries.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Creates a managed storage map file with its entries",
        "operationId": "createStorageMapFile",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "The map file contents",
            "name": "file_upload",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Map file created with its entries",
            "schema": {
              "$ref": "#/definitions/map"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage/maps/{name}": {
      "get": {
        "description": "Returns the contents of one managed map file from disk",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Return the contents of one managed map file from disk",
        "operationId": "getOneStorageMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces the contents of a managed map file on disk",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Replace contents of a managed map file on disk",
        "operationId": "replaceStorageMapFile",
        "parameters": [
          {
            "type": "string",
            "description": "Map file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no reload will be initiated after update",
            "name": "skip_reload",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "Map file replaced"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a managed map file from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Deletes a managed map file from disk",
        "operationId": "deleteStorageMap",
        "parameters": [
          {
            "type": "string",
            "description": "Map file storage_name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Map file deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage/ssl_certificates": {
      "get": {
        "description": "Returns all available SSL certificates on disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Return all available SSL certificates on disk",
        "operationId": "getAllStorageSSLCertificates",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ssl_certificates"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates SSL certificate.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Create SSL certificate",
        "operationId": "createStorageSSLCertificate",
        "parameters": [
          {
            "type": "file",
            "x-mimetype": "text/plain",
            "description": "The SSL certificate to upload",
            "name": "file_upload",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "SSL certificate created",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "409": {
            "description": "The specified resource already exists",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/storage/ssl_certificates/{name}": {
      "get": {
        "description": "Returns one SSL certificate from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Return one SSL certificate from disk",
        "operationId": "getOneStorageSSLCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "SSL certificate name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Replaces SSL certificate on disk.",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Replace SSL certificates on disk",
        "operationId": "replaceStorageSSLCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "SSL certificate name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no reload will be initiated after update",
            "name": "skip_reload",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "SSL certificate replaced",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            }
          },
          "202": {
            "description": "SSL certificate replaced and reload requested",
            "schema": {
              "$ref": "#/definitions/ssl_certificate"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes SSL certificate from disk.",
        "tags": [
          "Storage"
        ],
        "summary": "Delete SSL certificate from disk",
        "operationId": "deleteStorageSSLCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "SSL certificate name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, no reload will be initiated after update",
            "name": "skip_reload",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "SSL certificate deleted and reload requested",
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "204": {
            "description": "SSL certificate deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/transactions": {
      "get": {
        "description": "Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Return list of HAProxy configuration transactions.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "enum": [
              "failed",
              "in_progress"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/transactions"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Start a new transaction",
        "operationId": "startTransaction",
        "parameters": [
          {
            "type": "integer",
            "description": "Configuration version on which to work on",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "429": {
            "description": "Too many open transactions",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                }
              },
              "example": {
                "code": 429,
                "message": "cannot start a new transaction, reached the maximum amount of 20 active transactions available"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/services/haproxy/transactions/{id}": {
      "get": {
        "description": "Returns one HAProxy configuration transactions.",
        "tags": [
          "Transactions"
        ],
        "summary": "Return one HAProxy configuration transactions",
        "operationId": "getTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "tags": [
          "Transactions"
        ],
        "summary": "Commit transaction",
        "operationId": "commitTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
            "name": "force_reload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction successfully committed",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "schema": {
              "$ref": "#/definitions/transaction"
            },
            "headers": {
              "Reload-ID": {
                "type": "string",
                "description": "ID of the requested reload"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "406": {
            "description": "The specified resource cannot be handled",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a transaction.",
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/specification": {
      "get": {
        "description": "Return Data Plane API OpenAPI specification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Specification"
        ],
        "summary": "Data Plane API Specification",
        "operationId": "getSpecification",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    },
    "/specification_openapiv3": {
      "get": {
        "description": "Return Data Plane API OpenAPI v3 specification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SpecificationOpenapiv3"
        ],
        "summary": "Data Plane API v3 Specification",
        "operationId": "getOpenapiv3Specification",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "General Error",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Configuration-Version": {
                "type": "string",
                "description": "Configuration file version"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BackendHashType": {
      "type": "object",
      "properties": {
        "function": {
          "type": "string",
          "enum": [
            "sdbm",
            "djb2",
            "wt6",
            "crc32"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "map-based",
            "consistent"
          ]
        },
        "modifier": {
          "type": "string",
          "enum": [
            "avalanche"
          ]
        }
      }
    },
    "ClusterSettingsCluster": {
      "type": "object",
      "title": "Cluster controller information",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "readOnly": true
        },
        "api_base_path": {
          "type": "string",
          "readOnly": true
        },
        "cluster_id": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "log_targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterSettingsClusterLogTargetsItems0"
          },
          "x-go-name": "ClusterLogTargets"
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true,
          "readOnly": true
        }
      }
    },
    "ClusterSettingsClusterLogTargetsItems0": {
      "type": "object",
      "required": [
        "address",
        "port",
        "protocol"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "log_format": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1
        },
        "protocol": {
          "type": "string",
          "enum": [
            "tcp",
            "udp"
          ]
        }
      },
      "x-go-name": "ClusterLogTarget"
    },
    "CookieDomainItems0": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "x-go-name": "Domain"
    },
    "GlobalCPUMapsItems0": {
      "type": "object",
      "required": [
        "process",
        "cpu_set"
      ],
      "properties": {
        "cpu_set": {
          "type": "string",
          "x-display-name": "CPU Set"
        },
        "process": {
          "type": "string",
          "x-display-name": "Process/Thread Set"
        }
      },
      "x-go-name": "CPUMap"
    },
    "GlobalH1CaseAdjustItems0": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      },
      "x-go-name": "H1CaseAdjust"
    },
    "GlobalLogSendHostname": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "param": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "x-display-name": "Log Send Hostname"
    },
    "GlobalLuaLoadsItems0": {
      "type": "object",
      "required": [
        "file"
      ],
      "properties": {
        "file": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "x-go-name": "LuaLoad"
    },
    "GlobalLuaPrependPathItems0": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "path",
            "cpath"
          ]
        }
      },
      "x-go-name": "LuaPrependPath"
    },
    "GlobalRuntimeApisItems0": {
      "type": "object",
      "required": [
        "address"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/bind_params"
        }
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "x-go-name": "RuntimeAPI"
    },
    "GlobalTuneOptions": {
      "type": "object",
      "properties": {
        "buffers_limit": {
          "type": "integer",
          "x-display-name": "Buffers Limit",
          "x-nullable": true
        },
        "buffers_reserve": {
          "type": "integer",
          "minimum": 2,
          "x-display-name": "Buffers Reserve"
        },
        "bufsize": {
          "type": "integer",
          "x-display-name": "Buffer Size"
        },
        "comp_maxlevel": {
          "type": "integer",
          "x-display-name": "Maximum Compression Level"
        },
        "fail_alloc": {
          "type": "boolean",
          "x-display-name": "Failed Allocation Chance"
        },
        "h2_header_table_size": {
          "type": "integer",
          "maximum": 65535,
          "x-display-name": "HTTP/2 Dynamic Header Table Size"
        },
        "h2_initial_window_size": {
          "type": "integer",
          "x-display-name": "HTTP/2 Initial Window Size",
          "x-nullable": true
        },
        "h2_max_concurrent_streams": {
          "type": "integer",
          "x-display-name": "HTTP/2 Maximum Number of Concurrent Streams"
        },
        "h2_max_frame_size": {
          "type": "integer",
          "x-display-name": "HTTP/2 Maximum Frame Size"
        },
        "http_cookielen": {
          "type": "integer",
          "x-display-name": "Maximum Cookie Length"
        },
        "http_logurilen": {
          "type": "integer",
          "x-display-name": "Maximum URI Length"
        },
        "http_maxhdr": {
          "type": "integer",
          "maximum": 32767,
          "minimum": 1,
          "x-display-name": "Maximum Number of Headers"
        },
        "idle_pool_shared": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Share Idle Connections"
        },
        "idletimer": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 0,
          "x-display-name": "Idle Stream Duration",
          "x-nullable": true
        },
        "listener_multi_queue": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Listener Multi Queue Accept"
        },
        "lua_forced_yield": {
          "type": "integer",
          "x-display-name": "Lua Forced Yield"
        },
        "lua_maxmem": {
          "type": "boolean",
          "x-display-name": "Lua Maximum Memory Usage"
        },
        "lua_service_timeout": {
          "type": "integer",
          "x-display-name": "Lua Service timeout",
          "x-nullable": true
        },
        "lua_session_timeout": {
          "type": "integer",
          "x-display-name": "Lua Session Timeout",
          "x-nullable": true
        },
        "lua_task_timeout": {
          "type": "integer",
          "x-display-name": "Lua Task Timeout",
          "x-nullable": true
        },
        "maxaccept": {
          "type": "integer",
          "x-display-name": "Maximum Accept Events"
        },
        "maxpollevents": {
          "type": "integer",
          "x-display-name": "Maximum Polled Events"
        },
        "maxrewrite": {
          "type": "integer",
          "x-display-name": "Maximum Rewrite Space"
        },
        "pattern_cache_size": {
          "type": "integer",
          "x-display-name": "Pattern Lookup Cache Size",
          "x-nullable": true
        },
        "pipesize": {
          "type": "integer",
          "x-display-name": "Pipe Buffer Size"
        },
        "pool_high_fd_ratio": {
          "type": "integer",
          "x-display-name": "Max Used High FD Ratio"
        },
        "pool_low_fd_ratio": {
          "type": "integer",
          "x-display-name": "Max Used Low FD Ratio"
        },
        "rcvbuf_client": {
          "type": "integer",
          "x-display-name": "Receive Buffer Client Size",
          "x-nullable": true
        },
        "rcvbuf_server": {
          "type": "integer",
          "x-display-name": "Receive Buffer Server Size",
          "x-nullable": true
        },
        "recv_enough": {
          "type": "integer",
          "x-display-name": "Recieve Enough Socket Buffer Size"
        },
        "runqueue_depth": {
          "type": "integer",
          "x-display-name": "Max Tasks in Run Queue"
        },
        "sched_low_latency": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Low Latency Task Scheduler"
        },
        "sndbuf_client": {
          "type": "integer",
          "x-display-name": "Send Buffer Client Size",
          "x-nullable": true
        },
        "sndbuf_server": {
          "type": "integer",
          "x-display-name": "Send Buffer Server Size",
          "x-nullable": true
        },
        "ssl_cachesize": {
          "type": "integer",
          "x-display-name": "SSL Cache Size",
          "x-nullable": true
        },
        "ssl_capture_buffer_size": {
          "type": "integer",
          "x-display-name": "SSL Maximum Size of Cipherlist Buffer",
          "x-nullable": true
        },
        "ssl_ctx_cache_size": {
          "type": "integer",
          "x-display-name": "SSL Number of Certificates in Cache"
        },
        "ssl_default_dh_param": {
          "type": "integer",
          "x-display-name": "SSL Default DH Parameter Size"
        },
        "ssl_force_private_cache": {
          "type": "boolean",
          "x-display-name": "SSL Force Private Cache"
        },
        "ssl_keylog": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "SSL Log TLS Keys"
        },
        "ssl_lifetime": {
          "type": "integer",
          "x-display-name": "SSL Session Lifetime",
          "x-nullable": true
        },
        "ssl_maxrecord": {
          "type": "integer",
          "x-display-name": "SSL Maximum Size",
          "x-nullable": true
        },
        "vars_global_max_size": {
          "type": "integer",
          "x-display-name": "Variables Global Max Size",
          "x-nullable": true
        },
        "vars_proc_max_size": {
          "type": "integer",
          "x-display-name": "Variables Process Max Size",
          "x-nullable": true
        },
        "vars_reqres_max_size": {
          "type": "integer",
          "x-display-name": "Variables Request/Response Max Size",
          "x-nullable": true
        },
        "vars_sess_max_size": {
          "type": "integer",
          "x-display-name": "Variables Session Max Size",
          "x-nullable": true
        },
        "vars_txn_max_size": {
          "type": "integer",
          "x-display-name": "Variables Transaction Max Size",
          "x-nullable": true
        },
        "zlib_memlevel": {
          "type": "integer",
          "maximum": 9,
          "minimum": 1,
          "x-display-name": "Zlib Memory Level"
        },
        "zlib_windowsize": {
          "type": "integer",
          "maximum": 15,
          "minimum": 8,
          "x-display-name": "Zlib Window Size"
        }
      }
    },
    "InfoAPI": {
      "type": "object",
      "properties": {
        "build_date": {
          "description": "HAProxy Dataplane API build date",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "description": "HAProxy Dataplane API version string",
          "type": "string"
        }
      }
    },
    "InfoSystem": {
      "type": "object",
      "properties": {
        "cpu_info": {
          "type": "object",
          "properties": {
            "model": {
              "type": "string"
            },
            "num_cpus": {
              "description": "Number of logical CPUs",
              "type": "integer"
            }
          }
        },
        "hostname": {
          "description": "Hostname where the HAProxy is running",
          "type": "string"
        },
        "mem_info": {
          "type": "object",
          "properties": {
            "dataplaneapi_memory": {
              "type": "integer"
            },
            "free_memory": {
              "type": "integer"
            },
            "total_memory": {
              "type": "integer"
            }
          }
        },
        "os_string": {
          "description": "OS string",
          "type": "string"
        },
        "time": {
          "description": "Current time in milliseconds since Epoch.",
          "type": "integer"
        },
        "uptime": {
          "description": "System uptime",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "InfoSystemCPUInfo": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string"
        },
        "num_cpus": {
          "description": "Number of logical CPUs",
          "type": "integer"
        }
      }
    },
    "InfoSystemMemInfo": {
      "type": "object",
      "properties": {
        "dataplaneapi_memory": {
          "type": "integer"
        },
        "free_memory": {
          "type": "integer"
        },
        "total_memory": {
          "type": "integer"
        }
      }
    },
    "SiteFarmsItems0": {
      "type": "object",
      "required": [
        "name",
        "use_as"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "use_as": {
              "required": true,
              "value": "conditional"
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "use_as": {
              "required": true,
              "value": "conditional"
            }
          },
          "x-display-name": "Condition Test"
        },
        "forwardfor": {
          "$ref": "#/definitions/forwardfor"
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/server"
          }
        },
        "use_as": {
          "type": "string",
          "enum": [
            "default",
            "conditional"
          ],
          "x-nullable": false
        }
      },
      "x-go-name": "SiteFarm"
    },
    "SiteService": {
      "type": "object",
      "properties": {
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "http-tunnel",
            "httpclose",
            "forced-close",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Connection Mode"
        },
        "listeners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bind"
          }
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        }
      }
    },
    "SpoeMessageEvent": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test"
        },
        "name": {
          "type": "string",
          "enum": [
            "on-client-session",
            "on-server-session",
            "on-frontend-tcp-request",
            "on-backend-tcp-request",
            "on-tcp-response",
            "on-frontend-http-request",
            "on-backend-http-request",
            "on-http-response"
          ]
        }
      }
    },
    "StickTableFieldsItems0": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "enum": [
            "server_id",
            "gpc0",
            "gpc0_rate",
            "gpc1",
            "gpc1_rate",
            "gpt0",
            "conn_cnt",
            "conn_cur",
            "conn_rate",
            "sess_cnt",
            "sess_rate",
            "http_req_cnt",
            "http_req_rate",
            "http_err_cnt",
            "http_err_rate",
            "bytes_in_cnt",
            "bytes_in_rate",
            "bytes_out_cnt",
            "bytes_out_rate"
          ]
        },
        "period": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "rate"
            }
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "rate",
            "counter"
          ]
        }
      },
      "x-go-name": "StickTableField"
    },
    "acl": {
      "description": "The use of Access Control Lists (ACL) provides a flexible solution to perform\ncontent switching and generally to take decisions based on content extracted\nfrom the request, the response or any environmental status.\n",
      "type": "object",
      "title": "ACL Lines",
      "required": [
        "index",
        "acl_name",
        "criterion",
        "value"
      ],
      "properties": {
        "acl_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "criterion": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "type": "string",
          "x-nullable": false
        }
      },
      "additionalProperties": false
    },
    "acl_file": {
      "description": "ACL File",
      "type": "object",
      "title": "ACL File",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "acl_file_entry": {
      "description": "One ACL File Entry",
      "type": "object",
      "title": "One ACL File Entry",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string"
        }
      }
    },
    "acl_files": {
      "description": "Array of runtime acl files",
      "type": "array",
      "title": "ACL Files Array",
      "items": {
        "$ref": "#/definitions/acl_file"
      }
    },
    "acl_files_entries": {
      "description": "Array of entries of one runtime acl file",
      "type": "array",
      "title": "ACL Files Entries",
      "items": {
        "$ref": "#/definitions/acl_file_entry"
      }
    },
    "acls": {
      "description": "HAProxy ACL lines array (corresponds to acl directives)",
      "type": "array",
      "title": "ACL Lines Array",
      "items": {
        "$ref": "#/definitions/acl"
      }
    },
    "awsFilters": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "Key to use as filter, using the format specified at https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options",
          "type": "string"
        },
        "value": {
          "description": "Value of the filter to use",
          "type": "string"
        }
      }
    },
    "awsRegion": {
      "description": "AWS region configuration",
      "type": "object",
      "title": "AWS region",
      "required": [
        "name",
        "region",
        "enabled",
        "retry_timeout",
        "ipv4_address"
      ],
      "properties": {
        "access_key_id": {
          "description": "AWS Access Key ID.",
          "type": "string"
        },
        "allowlist": {
          "description": "Specify the AWS filters used to filter the EC2 instances to add",
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsFilters"
          }
        },
        "denylist": {
          "description": "Specify the AWS filters used to filter the EC2 instances to ignore",
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsFilters"
          }
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "description": "Auto generated ID.",
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true,
          "readOnly": true
        },
        "ipv4_address": {
          "description": "Select which IPv4 address the Service Discovery has to use for the backend server entry",
          "type": "string",
          "enum": [
            "private",
            "public"
          ]
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "retry_timeout": {
          "description": "Duration in seconds in-between data pulling requests to the AWS region",
          "type": "integer",
          "minimum": 1
        },
        "secret_access_key": {
          "description": "AWS Secret Access Key.",
          "type": "string"
        },
        "server_slots_base": {
          "type": "integer",
          "default": 10
        },
        "server_slots_growth_increment": {
          "type": "integer"
        },
        "server_slots_growth_type": {
          "type": "string",
          "default": "exponential",
          "enum": [
            "linear",
            "exponential"
          ]
        }
      },
      "example": {
        "access_key_id": "****************L7GT",
        "allowlist": [
          {
            "key": "tag-key",
            "value": "Instance:Having:This:Tag"
          }
        ],
        "denylist": [
          {
            "key": "tag:Environment",
            "value": "development"
          }
        ],
        "enabled": true,
        "id": "0",
        "ipv4_address": "private",
        "name": "frontend-service",
        "region": "us-east-1",
        "retry_timeout": 1,
        "secret_access_key": "****************soLl"
      }
    },
    "awsRegions": {
      "description": "AWS regions array",
      "type": "array",
      "title": "AWS",
      "items": {
        "$ref": "#/definitions/awsRegion"
      }
    },
    "backend": {
      "description": "HAProxy backend configuration",
      "type": "object",
      "title": "Backend",
      "required": [
        "name"
      ],
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "accept_invalid_http_response": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Response"
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check",
            "httpchk"
          ],
          "x-display-name": "Advanced Check"
        },
        "allbackups": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "All Backups"
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "bind_process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "compression": {
          "$ref": "#/definitions/compression"
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "cookie": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/cookie"
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "dynamic_cookie_key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "cookie": {
              "dynamic": {
                "value": true
              }
            }
          }
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "h1_case_adjust_bogus_server": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "H1 Adjust Bogus Server"
        },
        "hash_type": {
          "type": "object",
          "properties": {
            "function": {
              "type": "string",
              "enum": [
                "sdbm",
                "djb2",
                "wt6",
                "crc32"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "map-based",
                "consistent"
              ]
            },
            "modifier": {
              "type": "string",
              "enum": [
                "avalanche"
              ]
            }
          }
        },
        "http-buffer-request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP bufferrequest"
        },
        "http-check": {
          "$ref": "#/definitions/http_check"
        },
        "http-keep-alive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP keep-alive"
        },
        "http-no-delay": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP low interactive delays"
        },
        "http-server-close": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP server close"
        },
        "http-use-htx": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP proxy mode"
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_reuse": {
          "type": "string",
          "enum": [
            "aggressive",
            "always",
            "never",
            "safe"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "httpchk_params": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/httpchk_params"
        },
        "httpclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP connection closing"
        },
        "log_health_checks": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log Health Checks"
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "mysql_check_params": {
          "$ref": "#/definitions/mysql_check_params"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "pgsql_check_params": {
          "$ref": "#/definitions/pgsql_check_params"
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "smtpchk_params": {
          "$ref": "#/definitions/smtpchk_params"
        },
        "srvtcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "Server TCP Keep Alive"
        },
        "stats_options": {
          "$ref": "#/definitions/stats_options"
        },
        "stick_table": {
          "$ref": "#/definitions/config_stick_table"
        },
        "tcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Keep Alive"
        },
        "tunnel_timeout": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "adv_check": "httpchk",
        "balance": {
          "algorithm": "roundrobin"
        },
        "forwardfor": {
          "enabled": "enabled"
        },
        "httpchk_params": {
          "method": "GET",
          "uri": "/check",
          "version": "HTTP/1.1"
        },
        "mode": "http",
        "name": "test_backend"
      }
    },
    "backend_switching_rule": {
      "description": "HAProxy backend switching rule configuration (corresponds to use_backend directive)",
      "type": "object",
      "title": "Backend Switching Rule",
      "required": [
        "index",
        "name"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Backend Name",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "index": 0,
        "name": "test_backend"
      }
    },
    "backend_switching_rules": {
      "description": "HAProxy backend switching rules array (corresponds to use_backend directives)",
      "type": "array",
      "title": "Backend Switching Rules Array",
      "items": {
        "$ref": "#/definitions/backend_switching_rule"
      }
    },
    "backends": {
      "description": "HAProxy backends array",
      "type": "array",
      "title": "Backends",
      "items": {
        "$ref": "#/definitions/backend"
      }
    },
    "balance": {
      "type": "object",
      "required": [
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": [
            "roundrobin",
            "static-rr",
            "leastconn",
            "first",
            "source",
            "uri",
            "url_param",
            "hdr",
            "random",
            "rdp-cookie"
          ]
        },
        "hdr_name": {
          "type": "string",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "hdr"
            }
          },
          "x-display-name": "Header Name"
        },
        "hdr_use_domain_only": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "hdr"
            }
          },
          "x-display-name": "Header Use Domain Only"
        },
        "random_draws": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "random"
            }
          },
          "x-display-name": "Random Draws",
          "x-nullable": false
        },
        "rdp_cookie_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "value": "rdp-cookie"
            }
          },
          "x-display-name": "Rdp Cookie Name"
        },
        "uri_depth": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Depth"
        },
        "uri_len": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Len"
        },
        "uri_path_only": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Path Only"
        },
        "uri_whole": {
          "type": "boolean",
          "x-dependency": {
            "algorithm": {
              "value": "uri"
            }
          },
          "x-display-name": "Uri Whole"
        },
        "url_param": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "algorithm": {
              "required": true,
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param"
        },
        "url_param_check_post": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Check Post"
        },
        "url_param_max_wait": {
          "type": "integer",
          "x-dependency": {
            "algorithm": {
              "value": "url_param"
            }
          },
          "x-display-name": "Url Param Max Weight"
        }
      }
    },
    "bind": {
      "description": "HAProxy frontend bind configuration",
      "type": "object",
      "title": "Bind",
      "allOf": [
        {
          "$ref": "#/definitions/bind_params"
        }
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "port-range-end": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        }
      }
    },
    "bind_params": {
      "type": "object",
      "properties": {
        "accept_netscaler_cip": {
          "type": "integer"
        },
        "accept_proxy": {
          "type": "boolean"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backlog": {
          "type": "string"
        },
        "ca_ignore_err": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ca_sign_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ca_sign_pass": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          },
          "x-display-name": "Passphrase"
        },
        "ca_verify_file": {
          "type": "string",
          "x-dependency": {
            "ca_file": {
              "value": true
            }
          }
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "crt_ignore_err": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "crt_list": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "curves": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "defer_accept": {
          "type": "boolean"
        },
        "ecdhe": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "expose_fd_listeners": {
          "type": "boolean"
        },
        "force_sslv3": {
          "type": "boolean"
        },
        "force_tlsv10": {
          "type": "boolean"
        },
        "force_tlsv11": {
          "type": "boolean"
        },
        "force_tlsv12": {
          "type": "boolean"
        },
        "force_tlsv13": {
          "type": "boolean"
        },
        "generate_certificates": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "gid": {
          "type": "integer",
          "x-display-name": "Group ID"
        },
        "group": {
          "type": "string",
          "x-display-name": "Group name"
        },
        "id": {
          "type": "string",
          "x-display-name": "Socket ID"
        },
        "interface": {
          "type": "string"
        },
        "level": {
          "type": "string",
          "enum": [
            "user",
            "operator",
            "admin"
          ]
        },
        "maxconn": {
          "type": "integer"
        },
        "mode": {
          "type": "string"
        },
        "mss": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "nice": {
          "type": "integer"
        },
        "no_ca_names": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_sslv3": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tls_tickets": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv10": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv11": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv12": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "no_tlsv13": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "npn": {
          "type": "string"
        },
        "prefer_client_ciphers": {
          "type": "boolean"
        },
        "process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proto": {
          "type": "string",
          "x-display-name": "Protocol name"
        },
        "severity_output": {
          "type": "string",
          "enum": [
            "none",
            "number",
            "string"
          ],
          "x-display-name": "Format"
        },
        "ssl": {
          "type": "boolean"
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "strict_sni": {
          "type": "boolean",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "tcp_user_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tfo": {
          "type": "boolean"
        },
        "tls_ticket_keys": {
          "type": "string"
        },
        "transparent": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "v4v6": {
          "type": "boolean"
        },
        "v6only": {
          "type": "boolean"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "optional",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "127.0.0.1",
        "name": "http",
        "port": 80
      }
    },
    "binds": {
      "description": "HAProxy frontend binds array (corresponds to bind directives)",
      "type": "array",
      "title": "Binds",
      "items": {
        "$ref": "#/definitions/bind"
      }
    },
    "cache": {
      "description": "HAPRoxy Cache section",
      "type": "object",
      "title": "Cache",
      "required": [
        "name"
      ],
      "properties": {
        "max_age": {
          "type": "integer"
        },
        "max_object_size": {
          "type": "integer"
        },
        "max_secondary_entries": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$"
        },
        "process_vary": {
          "type": "boolean",
          "x-nullable": true
        },
        "total_max_size": {
          "type": "integer",
          "maximum": 4095,
          "minimum": 1
        }
      }
    },
    "caches": {
      "description": "HAProxy caches array",
      "type": "array",
      "title": "Cache Sections",
      "items": {
        "$ref": "#/definitions/cache"
      }
    },
    "capture": {
      "type": "object",
      "title": "Declare Capture",
      "required": [
        "index",
        "type",
        "length"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "length": {
          "type": "integer",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "enum": [
            "request",
            "response"
          ],
          "x-nullable": false
        }
      }
    },
    "captures": {
      "type": "array",
      "title": "Declare capture array",
      "items": {
        "$ref": "#/definitions/capture"
      }
    },
    "cluster_settings": {
      "description": "Settings related to a cluster.",
      "type": "object",
      "title": "Cluster Settings",
      "properties": {
        "bootstrap_key": {
          "type": "string"
        },
        "cluster": {
          "type": "object",
          "title": "Cluster controller information",
          "properties": {
            "address": {
              "type": "string",
              "pattern": "^[^\\s]+$",
              "readOnly": true
            },
            "api_base_path": {
              "type": "string",
              "readOnly": true
            },
            "cluster_id": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "readOnly": true
            },
            "log_targets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterSettingsClusterLogTargetsItems0"
              },
              "x-go-name": "ClusterLogTargets"
            },
            "name": {
              "type": "string",
              "readOnly": true
            },
            "port": {
              "type": "integer",
              "maximum": 65535,
              "minimum": 1,
              "x-nullable": true,
              "readOnly": true
            }
          }
        },
        "mode": {
          "type": "string",
          "enum": [
            "single",
            "cluster"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "unreachable",
            "waiting_approval"
          ],
          "readOnly": true
        }
      }
    },
    "compression": {
      "type": "object",
      "properties": {
        "algorithms": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "identity",
              "gzip",
              "deflate",
              "raw-deflate"
            ]
          }
        },
        "offload": {
          "type": "boolean"
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "config_stick_table": {
      "type": "object",
      "properties": {
        "expire": {
          "type": "integer",
          "x-nullable": true
        },
        "keylen": {
          "type": "integer",
          "x-display-name": "Key Length",
          "x-nullable": true
        },
        "nopurge": {
          "type": "boolean",
          "x-display-name": "No Purge"
        },
        "peers": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "store": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ip",
            "ipv6",
            "integer",
            "string",
            "binary"
          ]
        }
      }
    },
    "consul": {
      "description": "Consul server configuration",
      "type": "object",
      "title": "Consul server",
      "required": [
        "address",
        "port",
        "enabled",
        "retry_timeout"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "description": "Auto generated ID.",
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1
        },
        "retry_timeout": {
          "description": "Duration in seconds in-between data pulling requests to the consul server",
          "type": "integer",
          "minimum": 1
        },
        "server_slots_base": {
          "type": "integer",
          "default": 10
        },
        "server_slots_growth_increment": {
          "type": "integer"
        },
        "server_slots_growth_type": {
          "type": "string",
          "default": "exponential",
          "enum": [
            "linear",
            "exponential"
          ]
        },
        "service-blacklist": {
          "description": "deprecated, use service_denylist",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "service-whitelist": {
          "description": "deprecated, use service_allowlist",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "service_allowlist": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "service_denylist": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[^\\s]+$"
          }
        },
        "token": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "127.0.0.1",
        "enabled": true,
        "id": "0",
        "port": 90,
        "retry_timeout": 10
      }
    },
    "consuls": {
      "description": "Consuls array",
      "type": "array",
      "title": "Consuls",
      "items": {
        "$ref": "#/definitions/consul"
      }
    },
    "cookie": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "domain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CookieDomainItems0"
          },
          "x-go-name": "Domains"
        },
        "dynamic": {
          "type": "boolean"
        },
        "httponly": {
          "type": "boolean"
        },
        "indirect": {
          "type": "boolean"
        },
        "maxidle": {
          "type": "integer"
        },
        "maxlife": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "nocache": {
          "type": "boolean"
        },
        "postonly": {
          "type": "boolean"
        },
        "preserve": {
          "type": "boolean"
        },
        "secure": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "rewrite",
            "insert",
            "prefix"
          ]
        }
      }
    },
    "default_server": {
      "type": "object",
      "title": "Default Server",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ca_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": true
            }
          }
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check_alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Protocols"
        },
        "check_proto": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Name"
        },
        "check_via_socks4": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "disabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "error_limit": {
          "type": "integer",
          "x-display-name": "Error count"
        },
        "fall": {
          "type": "integer",
          "x-display-name": "Nr. of consecutive failed checks",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "force_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "init-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "log_proto": {
          "type": "string",
          "enum": [
            "legacy",
            "octet-count"
          ]
        },
        "max_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Concurrent Connections",
          "x-nullable": true
        },
        "maxqueue": {
          "type": "integer",
          "x-display-name": "Max Number of Connections",
          "x-nullable": true
        },
        "minconn": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "no_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_verifyhost": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "npn": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "observe": {
          "type": "string",
          "enum": [
            "layer4",
            "layer7"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "pool_low_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_purge_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "proto": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proxy-v2-options": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ssl",
              "cert-cn",
              "ssl-cipher",
              "cert-sig",
              "cert-key",
              "authority",
              "crc32c",
              "unique-id"
            ]
          }
        },
        "redir": {
          "type": "string",
          "x-display-name": "Prefix"
        },
        "resolve-net": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve-prefer": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve_opts": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$"
        },
        "resolvers": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getResolvers",
            "property": "name"
          }
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl_cn": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "slowstart": {
          "type": "integer",
          "x-nullable": true
        },
        "sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "socks4": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "check-via-socks4": {
              "required": true
            }
          }
        },
        "source": {
          "type": "string"
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_reuse": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "stick": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tcp_ut": {
          "type": "integer"
        },
        "tfo": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "track": {
          "type": "string"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verifyhost": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            },
            "verify": {
              "value": "required"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "defaults": {
      "description": "HAProxy defaults configuration",
      "type": "object",
      "title": "Defaults",
      "properties": {
        "abortonclose": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "accept_invalid_http_request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Request"
        },
        "accept_invalid_http_response": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Response"
        },
        "adv_check": {
          "type": "string",
          "enum": [
            "ssl-hello-chk",
            "smtpchk",
            "ldap-check",
            "mysql-check",
            "pgsql-check",
            "tcp-check",
            "redis-check",
            "httpchk"
          ],
          "x-display-name": "Advanced Check"
        },
        "allbackups": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "All Backups"
        },
        "backlog": {
          "type": "integer",
          "x-display-name": "Backlog",
          "x-nullable": true
        },
        "balance": {
          "$ref": "#/definitions/balance"
        },
        "bind_process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clflog": {
          "type": "boolean",
          "x-display-name": "CLF Log"
        },
        "client_fin_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Client TCP Keep Alive"
        },
        "compression": {
          "$ref": "#/definitions/compression"
        },
        "connect_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continuous Statistics"
        },
        "cookie": {
          "$ref": "#/definitions/cookie"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "default_server": {
          "$ref": "#/definitions/default_server"
        },
        "disable_h2_upgrade": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Disable HTTP/2 Upgrade"
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "dynamic_cookie_key": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "error_files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorfile"
          },
          "x-go-name": "ErrorFiles"
        },
        "external_check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "External Check"
        },
        "external_check_command": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Command"
        },
        "external_check_path": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "External Check Path"
        },
        "forwardfor": {
          "$ref": "#/definitions/forwardfor"
        },
        "h1_case_adjust_bogus_client": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "H1 Adjust Bogus Client"
        },
        "h1_case_adjust_bogus_server": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "H1 Adjust Bogus Server"
        },
        "http-buffer-request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP bufferrequest"
        },
        "http-check": {
          "$ref": "#/definitions/http_check"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ]
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "http_pretend_keepalive": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "http_request_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "http_reuse": {
          "type": "string",
          "enum": [
            "aggressive",
            "always",
            "never",
            "safe"
          ]
        },
        "httpchk_params": {
          "$ref": "#/definitions/httpchk_params"
        },
        "httplog": {
          "type": "boolean",
          "x-display-name": "HTTP Log"
        },
        "load_server_state_from_file": {
          "type": "string",
          "enum": [
            "global",
            "local",
            "none"
          ]
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_health_checks": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log Health Checks"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "logasap": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log ASAP"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "tcp",
            "http"
          ]
        },
        "monitor_uri": {
          "$ref": "#/definitions/monitor_uri"
        },
        "mysql_check_params": {
          "$ref": "#/definitions/mysql_check_params"
        },
        "pgsql_check_params": {
          "$ref": "#/definitions/pgsql_check_params"
        },
        "queue_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "redispatch": {
          "$ref": "#/definitions/redispatch"
        },
        "retries": {
          "type": "integer",
          "x-nullable": true
        },
        "server_fin_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "server_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "smtpchk_params": {
          "$ref": "#/definitions/smtpchk_params"
        },
        "srvtcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Server TCP Keep Alive"
        },
        "stats_options": {
          "$ref": "#/definitions/stats_options"
        },
        "tcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "TCP Keep Alive"
        },
        "tcplog": {
          "type": "boolean",
          "x-display-name": "TCP Log"
        },
        "tunnel_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "unique_id_format": {
          "type": "string",
          "x-display-name": "Unique ID format"
        },
        "unique_id_header": {
          "type": "string",
          "x-dependency": {
            "unique_id_format": {
              "required": true
            }
          },
          "x-display-name": "Unique ID header"
        }
      },
      "additionalProperties": false
    },
    "endpoint": {
      "description": "Endpoint definition",
      "type": "object",
      "title": "Endpoint",
      "properties": {
        "description": {
          "description": "Endpoint description",
          "type": "string"
        },
        "title": {
          "description": "Endpoint title",
          "type": "string"
        },
        "url": {
          "description": "Path to the endpoint",
          "type": "string"
        }
      }
    },
    "endpoints": {
      "description": "Collection of endpoints",
      "type": "array",
      "title": "Endpoints Array",
      "items": {
        "$ref": "#/definitions/endpoint"
      }
    },
    "error": {
      "description": "API Error",
      "type": "object",
      "title": "Error",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "errorfile": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            200,
            400,
            403,
            405,
            408,
            425,
            429,
            500,
            502,
            503,
            504
          ]
        },
        "file": {
          "type": "string"
        }
      },
      "x-display-name": "Error File"
    },
    "filter": {
      "description": "HAProxy filters",
      "type": "object",
      "title": "Filter",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache"
            }
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "spoe_config": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "spoe"
            }
          }
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "spoe"
            }
          }
        },
        "trace_hexdump": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          }
        },
        "trace_rnd_forwarding": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Forwarding"
        },
        "trace_rnd_parsing": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "trace"
            }
          },
          "x-display-name": "Trace Random Parsing"
        },
        "type": {
          "type": "string",
          "enum": [
            "trace",
            "compression",
            "spoe",
            "cache"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "index": 0,
        "trace_name": "name",
        "trace_rnd_parsing": true,
        "type": "trace"
      }
    },
    "filters": {
      "description": "HAProxy filters array (corresponds to filter directive)",
      "type": "array",
      "title": "Filters Array",
      "items": {
        "$ref": "#/definitions/filter"
      }
    },
    "forwardfor": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "except": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "header": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "ifnone": {
          "type": "boolean"
        }
      },
      "x-display-name": "ForwardFor"
    },
    "frontend": {
      "description": "HAProxy frontend configuration",
      "type": "object",
      "title": "Frontend",
      "required": [
        "name"
      ],
      "properties": {
        "accept_invalid_http_request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Accept Invalid HTTP Request"
        },
        "backlog": {
          "type": "integer",
          "x-display-name": "Backlog",
          "x-nullable": true
        },
        "bind_process": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "clflog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "CLF Log"
        },
        "client_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "clitcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "Client TCP Keep Alive"
        },
        "compression": {
          "$ref": "#/definitions/compression"
        },
        "contstats": {
          "type": "string",
          "enum": [
            "enabled"
          ],
          "x-display-name": "Continuous Statistics"
        },
        "default_backend": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-dynamic-enum": {
            "operation": "getBackends",
            "property": "name"
          }
        },
        "disable_h2_upgrade": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Disable HTTP/2 Upgrade"
        },
        "dontlognull": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Don't Log Null"
        },
        "forwardfor": {
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "$ref": "#/definitions/forwardfor"
        },
        "h1_case_adjust_bogus_client": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "H1 Adjust Bogus Client"
        },
        "http-buffer-request": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "HTTP bufferrequest"
        },
        "http-use-htx": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Use HTX"
        },
        "http_connection_mode": {
          "type": "string",
          "enum": [
            "httpclose",
            "http-server-close",
            "http-keep-alive"
          ],
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          }
        },
        "http_keep_alive_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "http_request_timeout": {
          "type": "integer",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-nullable": true
        },
        "httplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "http"
            }
          },
          "x-display-name": "HTTP Log"
        },
        "log_format": {
          "type": "string"
        },
        "log_format_sd": {
          "type": "string",
          "x-display-name": "Log Format SD"
        },
        "log_separate_errors": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "log_tag": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$"
        },
        "logasap": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Log ASAP"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections",
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "http",
            "tcp"
          ]
        },
        "monitor_fail": {
          "$ref": "#/definitions/monitor_fail"
        },
        "monitor_uri": {
          "$ref": "#/definitions/monitor_uri"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "stats_options": {
          "$ref": "#/definitions/stats_options"
        },
        "stick_table": {
          "$ref": "#/definitions/config_stick_table"
        },
        "tcpka": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Keep Alive"
        },
        "tcplog": {
          "type": "boolean",
          "x-dependency": {
            "mode": {
              "value": "tcp"
            }
          },
          "x-display-name": "TCP Log"
        },
        "unique_id_format": {
          "type": "string",
          "x-display-name": "Unique ID format"
        },
        "unique_id_header": {
          "type": "string",
          "x-dependency": {
            "unique_id_format": {
              "required": true
            }
          },
          "x-display-name": "Unique ID header"
        }
      },
      "additionalProperties": false,
      "example": {
        "default_backend": "test_backend",
        "http_connection_mode": "http-keep-alive",
        "maxconn": 2000,
        "mode": "http",
        "name": "test_frontend"
      }
    },
    "frontends": {
      "description": "HAProxy frontends array",
      "type": "array",
      "title": "Frontends",
      "items": {
        "$ref": "#/definitions/frontend"
      }
    },
    "general_file": {
      "description": "General use file",
      "type": "object",
      "title": "General use file",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "general_files": {
      "description": "Array of general use files",
      "type": "array",
      "title": "General Files Array",
      "items": {
        "$ref": "#/definitions/general_file"
      }
    },
    "global": {
      "description": "HAProxy global configuration",
      "type": "object",
      "title": "Global",
      "properties": {
        "busy_polling": {
          "type": "boolean"
        },
        "ca_base": {
          "type": "string",
          "x-display-name": "SSL CA Certificates Base Directory"
        },
        "chroot": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Chroot"
        },
        "cpu_maps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalCPUMapsItems0"
          },
          "x-display-name": "CPU Maps",
          "x-go-name": "CPUMaps"
        },
        "crt_base": {
          "type": "string",
          "x-display-name": "SSL Certificates Base Directory"
        },
        "daemon": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "external_check": {
          "type": "boolean",
          "x-display-name": "External Check"
        },
        "gid": {
          "type": "integer",
          "x-display-name": "GID"
        },
        "group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Group"
        },
        "h1_case_adjust": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalH1CaseAdjustItems0"
          },
          "x-go-name": "H1CaseAdjusts"
        },
        "h1_case_adjust_file": {
          "type": "string"
        },
        "hard_stop_after": {
          "type": "integer",
          "x-display-name": "Hard Stop After",
          "x-nullable": true
        },
        "localpeer": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Local instance's peer name."
        },
        "log_send_hostname": {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "param": {
              "type": "string",
              "pattern": "^[^\\s]+$"
            }
          },
          "x-display-name": "Log Send Hostname"
        },
        "lua_loads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalLuaLoadsItems0"
          }
        },
        "lua_prepend_path": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalLuaPrependPathItems0"
          }
        },
        "master-worker": {
          "type": "boolean",
          "x-display-name": "Master Worker Mode"
        },
        "max_spread_checks": {
          "type": "integer"
        },
        "maxcompcpuusage": {
          "type": "integer",
          "x-display-name": "Maximum HAProxy CPU usage"
        },
        "maxcomprate": {
          "type": "integer",
          "x-display-name": "Maximum per-process input compression rate"
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Connections"
        },
        "maxconnrate": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of concurrent connections"
        },
        "maxpipes": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of pipes"
        },
        "maxsessrate": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of sessions per second"
        },
        "maxsslconn": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of concurrent SSL connections"
        },
        "maxsslrate": {
          "type": "integer",
          "x-display-name": "Maximum per-process number of SSL sessions per second"
        },
        "maxzlibmem": {
          "type": "integer",
          "x-display-name": "Maximum amount of RAM in megabytes per process usable by the zlib"
        },
        "nbproc": {
          "type": "integer",
          "x-display-name": "Number of Processes"
        },
        "nbthread": {
          "type": "integer",
          "x-display-name": "Number of Threads"
        },
        "noepoll": {
          "type": "boolean",
          "x-display-name": "Disable the use of the \"epoll\" event polling system on Linux"
        },
        "noevports": {
          "type": "boolean",
          "x-display-name": "Disable the use of the event ports event polling system on SunOS system derived from Solaris 10 and later"
        },
        "nogetaddrinfo": {
          "type": "boolean",
          "x-display-name": "Disable the use of getaddrinfo for name resolving"
        },
        "nokqueue": {
          "type": "boolean",
          "x-display-name": "Disable the use of the \"kqueue\" event polling system on BSD"
        },
        "nopoll": {
          "type": "boolean",
          "x-display-name": "Disable the use of the \"poll\" event polling system"
        },
        "noreuseport": {
          "type": "boolean",
          "x-display-name": "Disable the use of SO_REUSEPORT"
        },
        "nosplice": {
          "type": "boolean",
          "x-display-name": "Disable the use of kernel tcp splicing between sockets on Linux"
        },
        "pidfile": {
          "type": "string",
          "x-display-name": "PID File"
        },
        "profiling_tasks": {
          "type": "string",
          "enum": [
            "auto",
            "on",
            "off"
          ],
          "x-display-name": "Enable or disables per-task CPU profiling"
        },
        "runtime_apis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalRuntimeApisItems0"
          },
          "x-display-name": "Runtime APIs",
          "x-go-name": "RuntimeAPIs"
        },
        "server_state_base": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Server State Base"
        },
        "server_state_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Server State File"
        },
        "spread_checks": {
          "type": "integer",
          "x-display-name": "Add some randomness in the check interval"
        },
        "ssl_default_bind_ciphers": {
          "type": "string",
          "x-display-name": "SSL Default Bind Ciphers"
        },
        "ssl_default_bind_ciphersuites": {
          "type": "string",
          "x-display-name": "SSL Default Bind Ciphersuites"
        },
        "ssl_default_bind_options": {
          "type": "string",
          "x-display-name": "SSL Default Bind Options"
        },
        "ssl_default_server_ciphers": {
          "type": "string",
          "x-display-name": "SSL Default Server Ciphers"
        },
        "ssl_default_server_ciphersuites": {
          "type": "string",
          "x-display-name": "SSL Default Server Ciphersuites"
        },
        "ssl_default_server_options": {
          "type": "string",
          "x-display-name": "SSL Default Server Options"
        },
        "ssl_mode_async": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-display-name": "Asynchronous TLS I/O operations"
        },
        "stats_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "tune_options": {
          "type": "object",
          "properties": {
            "buffers_limit": {
              "type": "integer",
              "x-display-name": "Buffers Limit",
              "x-nullable": true
            },
            "buffers_reserve": {
              "type": "integer",
              "minimum": 2,
              "x-display-name": "Buffers Reserve"
            },
            "bufsize": {
              "type": "integer",
              "x-display-name": "Buffer Size"
            },
            "comp_maxlevel": {
              "type": "integer",
              "x-display-name": "Maximum Compression Level"
            },
            "fail_alloc": {
              "type": "boolean",
              "x-display-name": "Failed Allocation Chance"
            },
            "h2_header_table_size": {
              "type": "integer",
              "maximum": 65535,
              "x-display-name": "HTTP/2 Dynamic Header Table Size"
            },
            "h2_initial_window_size": {
              "type": "integer",
              "x-display-name": "HTTP/2 Initial Window Size",
              "x-nullable": true
            },
            "h2_max_concurrent_streams": {
              "type": "integer",
              "x-display-name": "HTTP/2 Maximum Number of Concurrent Streams"
            },
            "h2_max_frame_size": {
              "type": "integer",
              "x-display-name": "HTTP/2 Maximum Frame Size"
            },
            "http_cookielen": {
              "type": "integer",
              "x-display-name": "Maximum Cookie Length"
            },
            "http_logurilen": {
              "type": "integer",
              "x-display-name": "Maximum URI Length"
            },
            "http_maxhdr": {
              "type": "integer",
              "maximum": 32767,
              "minimum": 1,
              "x-display-name": "Maximum Number of Headers"
            },
            "idle_pool_shared": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "Share Idle Connections"
            },
            "idletimer": {
              "type": "integer",
              "maximum": 65535,
              "minimum": 0,
              "x-display-name": "Idle Stream Duration",
              "x-nullable": true
            },
            "listener_multi_queue": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "Listener Multi Queue Accept"
            },
            "lua_forced_yield": {
              "type": "integer",
              "x-display-name": "Lua Forced Yield"
            },
            "lua_maxmem": {
              "type": "boolean",
              "x-display-name": "Lua Maximum Memory Usage"
            },
            "lua_service_timeout": {
              "type": "integer",
              "x-display-name": "Lua Service timeout",
              "x-nullable": true
            },
            "lua_session_timeout": {
              "type": "integer",
              "x-display-name": "Lua Session Timeout",
              "x-nullable": true
            },
            "lua_task_timeout": {
              "type": "integer",
              "x-display-name": "Lua Task Timeout",
              "x-nullable": true
            },
            "maxaccept": {
              "type": "integer",
              "x-display-name": "Maximum Accept Events"
            },
            "maxpollevents": {
              "type": "integer",
              "x-display-name": "Maximum Polled Events"
            },
            "maxrewrite": {
              "type": "integer",
              "x-display-name": "Maximum Rewrite Space"
            },
            "pattern_cache_size": {
              "type": "integer",
              "x-display-name": "Pattern Lookup Cache Size",
              "x-nullable": true
            },
            "pipesize": {
              "type": "integer",
              "x-display-name": "Pipe Buffer Size"
            },
            "pool_high_fd_ratio": {
              "type": "integer",
              "x-display-name": "Max Used High FD Ratio"
            },
            "pool_low_fd_ratio": {
              "type": "integer",
              "x-display-name": "Max Used Low FD Ratio"
            },
            "rcvbuf_client": {
              "type": "integer",
              "x-display-name": "Receive Buffer Client Size",
              "x-nullable": true
            },
            "rcvbuf_server": {
              "type": "integer",
              "x-display-name": "Receive Buffer Server Size",
              "x-nullable": true
            },
            "recv_enough": {
              "type": "integer",
              "x-display-name": "Recieve Enough Socket Buffer Size"
            },
            "runqueue_depth": {
              "type": "integer",
              "x-display-name": "Max Tasks in Run Queue"
            },
            "sched_low_latency": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "Low Latency Task Scheduler"
            },
            "sndbuf_client": {
              "type": "integer",
              "x-display-name": "Send Buffer Client Size",
              "x-nullable": true
            },
            "sndbuf_server": {
              "type": "integer",
              "x-display-name": "Send Buffer Server Size",
              "x-nullable": true
            },
            "ssl_cachesize": {
              "type": "integer",
              "x-display-name": "SSL Cache Size",
              "x-nullable": true
            },
            "ssl_capture_buffer_size": {
              "type": "integer",
              "x-display-name": "SSL Maximum Size of Cipherlist Buffer",
              "x-nullable": true
            },
            "ssl_ctx_cache_size": {
              "type": "integer",
              "x-display-name": "SSL Number of Certificates in Cache"
            },
            "ssl_default_dh_param": {
              "type": "integer",
              "x-display-name": "SSL Default DH Parameter Size"
            },
            "ssl_force_private_cache": {
              "type": "boolean",
              "x-display-name": "SSL Force Private Cache"
            },
            "ssl_keylog": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-display-name": "SSL Log TLS Keys"
            },
            "ssl_lifetime": {
              "type": "integer",
              "x-display-name": "SSL Session Lifetime",
              "x-nullable": true
            },
            "ssl_maxrecord": {
              "type": "integer",
              "x-display-name": "SSL Maximum Size",
              "x-nullable": true
            },
            "vars_global_max_size": {
              "type": "integer",
              "x-display-name": "Variables Global Max Size",
              "x-nullable": true
            },
            "vars_proc_max_size": {
              "type": "integer",
              "x-display-name": "Variables Process Max Size",
              "x-nullable": true
            },
            "vars_reqres_max_size": {
              "type": "integer",
              "x-display-name": "Variables Request/Response Max Size",
              "x-nullable": true
            },
            "vars_sess_max_size": {
              "type": "integer",
              "x-display-name": "Variables Session Max Size",
              "x-nullable": true
            },
            "vars_txn_max_size": {
              "type": "integer",
              "x-display-name": "Variables Transaction Max Size",
              "x-nullable": true
            },
            "zlib_memlevel": {
              "type": "integer",
              "maximum": 9,
              "minimum": 1,
              "x-display-name": "Zlib Memory Level"
            },
            "zlib_windowsize": {
              "type": "integer",
              "maximum": 15,
              "minimum": 8,
              "x-display-name": "Zlib Window Size"
            }
          }
        },
        "tune_ssl_default_dh_param": {
          "type": "integer",
          "x-deprecated": true,
          "x-display-name": "SSL Default DH Parameter Size"
        },
        "uid": {
          "type": "integer",
          "x-display-name": "UID"
        },
        "user": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "User"
        }
      },
      "additionalProperties": false
    },
    "group": {
      "description": "HAProxy userlist group",
      "type": "object",
      "title": "Group",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "users": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "groups": {
      "description": "HAProxy userlist groups array",
      "type": "array",
      "title": "Groups",
      "items": {
        "$ref": "#/definitions/group"
      }
    },
    "http_check": {
      "type": "object",
      "title": "HTTP Check",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-display-name": "ALPN Protocols"
        },
        "body": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "body_log_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "check_comment": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "comment",
                "connect",
                "expect",
                "send"
              ]
            }
          },
          "x-nullable": false
        },
        "default": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "error_status": {
          "type": "string",
          "enum": [
            "L7OKC",
            "L7RSP",
            "L7STS",
            "L6RSP",
            "L4CON"
          ],
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "exclamation_mark": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          },
          "x-display-name": "Expect Exclamation Mark"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/return_header"
          },
          "x-dependency": {
            "type": {
              "value": "send"
            }
          },
          "x-go-name": "CheckHeaders"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "linger": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "status",
            "rstatus",
            "hdr",
            "fhdr",
            "string",
            "rstring"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "expect"
            }
          },
          "x-display-name": "Expect Match"
        },
        "method": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "min_recv": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          },
          "x-nullable": true
        },
        "ok_status": {
          "type": "string",
          "enum": [
            "L7OK",
            "L7OKC",
            "L6OK",
            "L4OK"
          ],
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "on_error": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "on_success": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "pattern": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "expect"
            }
          }
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-nullable": true
        },
        "port_string": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "proto": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "send_proxy": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "sni": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "ssl": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        },
        "status-code": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "tout_status": {
          "type": "string",
          "enum": [
            "L7TOUT",
            "L6TOUT",
            "L4TOUT"
          ],
          "x-dependency": {
            "type": {
              "value": "expect"
            }
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "comment",
            "connect",
            "disable-on-404",
            "expect",
            "send",
            "send-state",
            "set-var",
            "set-var-fmt",
            "unset-var"
          ],
          "x-nullable": false
        },
        "uri": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "uri_log_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var"
              ]
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var-fmt"
              ]
            }
          },
          "x-display-name": "Var Format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "version": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "send"
            }
          }
        },
        "via_socks4": {
          "type": "boolean",
          "x-dependency": {
            "type": {
              "value": "connect"
            }
          }
        }
      }
    },
    "http_checks": {
      "type": "array",
      "title": "HTTP Checks Array",
      "items": {
        "$ref": "#/definitions/http_check"
      }
    },
    "http_request_rule": {
      "description": "HAProxy HTTP request rule configuration (corresponds to http-request directives)",
      "type": "object",
      "title": "HTTP Request Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL File"
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACL Key Format"
        },
        "auth_realm": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "auth"
            }
          },
          "x-display-name": "Authentication Realm"
        },
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache-use"
            }
          },
          "x-display-name": "Cache Name"
        },
        "capture_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "capture"
            }
          },
          "x-display-name": "Capture SlotID",
          "x-nullable": true
        },
        "capture_len": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "capture"
            }
          },
          "x-display-name": "Capture Len"
        },
        "capture_sample": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "capture"
            }
          },
          "x-display-name": "Capture Sample"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "deny_status": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit"
              ]
            }
          },
          "x-nullable": true
        },
        "expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "do-resolve",
                "set-dst",
                "set-dst-port",
                "set-priority-class",
                "set-priority-offset",
                "set-src",
                "set-src-port"
              ]
            }
          },
          "x-display-name": "Standard HAProxy expression"
        },
        "hdr_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_method": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "del-header"
              ]
            }
          },
          "x-display-name": "Header Match Method"
        },
        "hdr_name": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "hint_format": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "early-hint"
            }
          },
          "x-display-name": "Hint Format"
        },
        "hint_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "early-hint"
            }
          },
          "x-display-name": "Hint Name"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "lua"
            }
          }
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "lua"
            }
          }
        },
        "map_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          }
        },
        "map_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          },
          "x-display-name": "Map Key Format"
        },
        "map_valuefmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-map"
            }
          },
          "x-display-name": "Map Value Format"
        },
        "mark_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-mark"
            }
          },
          "x-display-name": "Mark Value"
        },
        "method_fmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-method"
            }
          }
        },
        "nice_value": {
          "type": "integer",
          "maximum": 1024,
          "minimum": -1024,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-nice"
            }
          },
          "x-display-name": "Nice Value",
          "x-nullable": false
        },
        "normalizer": {
          "type": "string",
          "enum": [
            "fragment-encode",
            "fragment-strip",
            "path-merge-slashes",
            "path-strip-dot",
            "path-strip-dotdot",
            "percent-decode-unreserved",
            "percent-to-upercase",
            "query-sort-by-name"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "normalize-uri"
            }
          }
        },
        "normalizer_full": {
          "type": "boolean",
          "x-dependency": {
            "normalizer": {
              "value": "path-strip-dotdot"
            },
            "type": {
              "value": "normalize-uri"
            }
          }
        },
        "normalizer_strict": {
          "type": "boolean",
          "x-dependency": {
            "normalizer": {
              "value": [
                "percent-decode-unreserved",
                "percent-to-upercase"
              ]
            },
            "type": {
              "value": "normalize-uri"
            }
          }
        },
        "path_fmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-path",
                "set-pathq",
                "replace-path",
                "replace-pathq"
              ]
            }
          }
        },
        "path_match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-path",
                "set-pathq",
                "replace-path",
                "replace-pathq"
              ]
            }
          }
        },
        "protocol": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "type": {
              "required": false,
              "value": "do-resolve"
            }
          },
          "x-display-name": "Protocol"
        },
        "query-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-query"
            }
          }
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303,
            307,
            308
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code",
          "x-nullable": true
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "resolvers": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "do-resolve"
            }
          },
          "x-display-name": "Resolvers"
        },
        "return_content": {
          "type": "string",
          "x-dependency": {
            "return_content_format": {
              "required": true,
              "value": [
                "errofile",
                "errorfiles",
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          }
        },
        "return_content_format": {
          "type": "string",
          "enum": [
            "default-errorfile",
            "errorfile",
            "errorfiles",
            "file",
            "lf-file",
            "string",
            "lf-string"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit",
                "return"
              ]
            }
          }
        },
        "return_content_type": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "tarpit",
                "return"
              ]
            }
          },
          "x-display-name": "Return content type",
          "x-nullable": true
        },
        "return_hdrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/return_header"
          },
          "x-dependency": {
            "return_content_format": {
              "value": [
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          },
          "x-go-name": "ReturnHeaders"
        },
        "return_status_code": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": "return"
            }
          },
          "x-display-name": "Return Error Code",
          "x-nullable": true
        },
        "sc_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Expression Value"
        },
        "sc_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "sc-inc-gpc0",
                "sc-inc-gpc1",
                "sc-set-gpt0"
              ]
            }
          }
        },
        "sc_int": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Integer Value",
          "x-nullable": true
        },
        "service_name": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "use-service"
            }
          }
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Engine"
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          },
          "x-display-name": "SPOE Group"
        },
        "strict_mode": {
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "strict-mode"
            }
          }
        },
        "timeout": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-timeout"
            }
          }
        },
        "timeout_type": {
          "type": "string",
          "enum": [
            "server",
            "tunnel"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-timeout"
            }
          }
        },
        "tos_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-tos"
            }
          },
          "x-display-name": "Tos Value"
        },
        "track-sc0-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Key"
        },
        "track-sc0-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Table"
        },
        "track-sc1-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Key"
        },
        "track-sc1-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Table"
        },
        "track-sc2-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Key"
        },
        "track-sc2-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Table"
        },
        "type": {
          "type": "string",
          "enum": [
            "add-acl",
            "add-header",
            "allow",
            "auth",
            "cache-use",
            "capture",
            "del-acl",
            "del-header",
            "del-map",
            "deny",
            "disable-l7-retry",
            "do-resolve",
            "early-hint",
            "normalize-uri",
            "redirect",
            "reject",
            "replace-header",
            "replace-path",
            "replace-pathq",
            "replace-uri",
            "replace-value",
            "return",
            "sc-inc-gpc0",
            "sc-inc-gpc1",
            "sc-set-gpt0",
            "send-spoe-group",
            "set-dst",
            "set-dst-port",
            "set-header",
            "set-log-level",
            "set-map",
            "set-mark",
            "set-method",
            "set-nice",
            "set-path",
            "set-pathq",
            "set-priority-class",
            "set-priority-offset",
            "set-query",
            "set-src",
            "set-src-port",
            "set-timeout",
            "set-tos",
            "set-uri",
            "set-var",
            "silent-drop",
            "strict-mode",
            "tarpit",
            "track-sc0",
            "track-sc1",
            "track-sc2",
            "unset-var",
            "use-service",
            "wait-for-body",
            "wait-for-handshake"
          ],
          "x-nullable": false
        },
        "uri-fmt": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-uri",
                "replace-uri"
              ]
            }
          }
        },
        "uri-match": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "replace-uri"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var-fmt"
            }
          },
          "x-display-name": "Var Format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "do-resolve",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "wait_at_least": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        },
        "wait_time": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "index": 0,
        "type": "add-header"
      }
    },
    "http_request_rules": {
      "description": "HAProxy HTTP request rules array (corresponds to http-request directives)",
      "type": "array",
      "title": "HTTP Request Rules Array",
      "items": {
        "$ref": "#/definitions/http_request_rule"
      }
    },
    "http_response_rule": {
      "description": "HAProxy HTTP response rule configuration (corresponds to http-response directives)",
      "type": "object",
      "title": "HTTP Response Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "acl_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          }
        },
        "acl_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-acl",
                "del-acl"
              ]
            }
          },
          "x-display-name": "ACK Key Format"
        },
        "cache_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "cache-store"
            }
          },
          "x-display-name": "Cache Name"
        },
        "capture_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "capture"
            }
          },
          "x-display-name": "Capture SlotID",
          "x-nullable": true
        },
        "capture_sample": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "capture"
            }
          },
          "x-display-name": "Capture Sample"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "deny_status": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": "deny"
            }
          },
          "x-nullable": true
        },
        "hdr_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value",
                "set-header",
                "add-header"
              ]
            }
          },
          "x-display-name": "Header Format"
        },
        "hdr_match": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "replace-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Match"
        },
        "hdr_method": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "del-header"
              ]
            }
          },
          "x-display-name": "Header Match Method"
        },
        "hdr_name": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "add-header",
                "replace-header",
                "del-header",
                "set-header",
                "replace-value"
              ]
            }
          },
          "x-display-name": "Header Name"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "log_level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug",
            "silent"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-log-level"
            }
          }
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "lua"
            }
          }
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "lua"
            }
          }
        },
        "map_file": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          }
        },
        "map_keyfmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-map",
                "del-map"
              ]
            }
          },
          "x-display-name": "Map Key Format"
        },
        "map_valuefmt": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-map"
            }
          },
          "x-display-name": "Map Value Format"
        },
        "mark_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-mark"
            }
          },
          "x-display-name": "Mark Value"
        },
        "nice_value": {
          "type": "integer",
          "maximum": 1024,
          "minimum": -1024,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-nice"
            }
          },
          "x-display-name": "Nice Value",
          "x-nullable": false
        },
        "redir_code": {
          "type": "integer",
          "enum": [
            301,
            302,
            303,
            307,
            308
          ],
          "x-dependency": {
            "type": {
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Code",
          "x-nullable": true
        },
        "redir_option": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Option"
        },
        "redir_type": {
          "type": "string",
          "enum": [
            "location",
            "prefix",
            "scheme"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Type"
        },
        "redir_value": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "redirect"
            }
          },
          "x-display-name": "Redirect Value"
        },
        "return_content": {
          "type": "string",
          "x-dependency": {
            "return_content_format": {
              "required": true,
              "value": [
                "errofile",
                "errorfiles",
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          }
        },
        "return_content_format": {
          "type": "string",
          "enum": [
            "default-errorfile",
            "errorfile",
            "errorfiles",
            "file",
            "lf-file",
            "string",
            "lf-string"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "return"
              ]
            }
          }
        },
        "return_content_type": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": [
                "deny",
                "return"
              ]
            }
          },
          "x-display-name": "Return content type",
          "x-nullable": true
        },
        "return_hdrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/return_header"
          },
          "x-dependency": {
            "return_content_format": {
              "value": [
                "file",
                "lf-file",
                "string",
                "lf-string"
              ]
            }
          },
          "x-go-name": "ReturnHeaders"
        },
        "return_status_code": {
          "type": "integer",
          "maximum": 599,
          "minimum": 200,
          "x-dependency": {
            "type": {
              "value": "return"
            }
          },
          "x-display-name": "Return Error Code",
          "x-nullable": true
        },
        "sc_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Expression Value"
        },
        "sc_id": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "sc-inc-gpc0",
                "sc-inc-gpc1",
                "sc-set-gpt0"
              ]
            }
          }
        },
        "sc_int": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "sc-set-gpt0"
            }
          },
          "x-display-name": "ScSet Integer Value",
          "x-nullable": true
        },
        "spoe_engine": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "spoe_group": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "send-spoe-group"
            }
          }
        },
        "status": {
          "type": "integer",
          "maximum": 999,
          "minimum": 100,
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-status"
            }
          },
          "x-nullable": false
        },
        "status_reason": {
          "type": "string",
          "x-dependency": {
            "type": {
              "value": "set-status"
            }
          }
        },
        "strict_mode": {
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "strict-mode"
            }
          }
        },
        "tos_value": {
          "type": "string",
          "pattern": "^(0x[0-9A-Fa-f]+|[0-9]+)$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-tos"
            }
          },
          "x-display-name": "Tos Value"
        },
        "track-sc0-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Key"
        },
        "track-sc0-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc0"
            }
          },
          "x-display-name": "track-sc0 Table"
        },
        "track-sc1-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Key"
        },
        "track-sc1-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc1"
            }
          },
          "x-display-name": "track-sc1 Table"
        },
        "track-sc2-key": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Key"
        },
        "track-sc2-table": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "value": "track-sc2"
            }
          },
          "x-display-name": "track-sc2 Table"
        },
        "type": {
          "type": "string",
          "enum": [
            "add-acl",
            "add-header",
            "allow",
            "cache-store",
            "capture",
            "del-acl",
            "del-header",
            "del-map",
            "deny",
            "redirect",
            "replace-header",
            "replace-value",
            "return",
            "sc-inc-gpc0",
            "sc-inc-gpc1",
            "sc-set-gpt0",
            "send-spoe-group",
            "set-header",
            "set-log-level",
            "set-map",
            "set-mark",
            "set-nice",
            "set-status",
            "set-tos",
            "set-var",
            "set-var-fmt",
            "silent-drop",
            "strict-mode",
            "track-sc0",
            "track-sc1",
            "track-sc2",
            "unset-var",
            "wait-for-body"
          ],
          "x-nullable": false
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var"
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_format": {
          "type": "string",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "set-var-fmt"
            }
          },
          "x-display-name": "Var Format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "wait_at_least": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        },
        "wait_time": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "wait-for-body"
            }
          },
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "unless",
        "cond_test": "{ src 192.168.0.0/16 }",
        "hdr_format": "%T",
        "hdr_name": "X-Haproxy-Current-Date",
        "index": 0,
        "type": "add-header"
      }
    },
    "http_response_rules": {
      "description": "HAProxy HTTP response rules array (corresponds to http-response directives)",
      "type": "array",
      "title": "HTTP Response Rules Array",
      "items": {
        "$ref": "#/definitions/http_response_rule"
      }
    },
    "httpchk_params": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "HEAD",
            "PUT",
            "POST",
            "GET",
            "TRACE",
            "PATCH"
          ]
        },
        "uri": {
          "type": "string",
          "pattern": "^[^ ]*$"
        },
        "version": {
          "type": "string"
        }
      },
      "x-display-name": "HTTP Check"
    },
    "info": {
      "description": "General API, OS and hardware information",
      "type": "object",
      "title": "Information",
      "properties": {
        "api": {
          "type": "object",
          "properties": {
            "build_date": {
              "description": "HAProxy Dataplane API build date",
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "description": "HAProxy Dataplane API version string",
              "type": "string"
            }
          }
        },
        "system": {
          "type": "object",
          "properties": {
            "cpu_info": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "string"
                },
                "num_cpus": {
                  "description": "Number of logical CPUs",
                  "type": "integer"
                }
              }
            },
            "hostname": {
              "description": "Hostname where the HAProxy is running",
              "type": "string"
            },
            "mem_info": {
              "type": "object",
              "properties": {
                "dataplaneapi_memory": {
                  "type": "integer"
                },
                "free_memory": {
                  "type": "integer"
                },
                "total_memory": {
                  "type": "integer"
                }
              }
            },
            "os_string": {
              "description": "OS string",
              "type": "string"
            },
            "time": {
              "description": "Current time in milliseconds since Epoch.",
              "type": "integer"
            },
            "uptime": {
              "description": "System uptime",
              "type": "integer",
              "x-nullable": true
            }
          }
        }
      },
      "example": {
        "api": {
          "build_date": "2019-08-21T17:31:56.000Z",
          "version": "v1.2.1 45a3288.dev"
        },
        "system": {
          "cpu_info": {
            "model": "Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz",
            "num_cpus": 4
          },
          "hostname": "test",
          "mem_info": {
            "dataplaneapi_memory": 44755536,
            "free_memory": 5790642176,
            "total_memory": 16681517056
          },
          "os_string": "Linux 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019",
          "time": 1566401525,
          "uptime": 87340
        }
      }
    },
    "log_target": {
      "description": "Per-instance logging of events and traffic.",
      "type": "object",
      "title": "Log Target",
      "required": [
        "index"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "facility": {
          "type": "string",
          "enum": [
            "kern",
            "user",
            "mail",
            "daemon",
            "auth",
            "syslog",
            "lpr",
            "news",
            "uucp",
            "cron",
            "auth2",
            "ftp",
            "ntp",
            "audit",
            "alert",
            "cron2",
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7"
          ],
          "x-dependency": {
            "global": {
              "required": true,
              "value": false
            },
            "nolog": {
              "required": true,
              "value": false
            }
          }
        },
        "format": {
          "type": "string",
          "enum": [
            "rfc3164",
            "rfc5424",
            "short",
            "raw"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "global": {
          "type": "boolean"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "length": {
          "type": "integer",
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "level": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "minlevel": {
          "type": "string",
          "enum": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "x-dependency": {
            "global": {
              "value": false
            },
            "level": {
              "required": false
            },
            "nolog": {
              "value": false
            }
          }
        },
        "nolog": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "log_targets": {
      "description": "HAProxy log target array (corresponds to log directives)",
      "type": "array",
      "title": "Log Target Array",
      "items": {
        "$ref": "#/definitions/log_target"
      }
    },
    "map": {
      "description": "Map File",
      "type": "object",
      "title": "Map File",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "map_entries": {
      "description": "Entries of one runtime map",
      "type": "array",
      "title": "Maps Entries",
      "items": {
        "$ref": "#/definitions/map_entry"
      }
    },
    "map_entry": {
      "description": "One Map Entry",
      "type": "object",
      "title": "One Map Entry",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "maps": {
      "description": "Array of runtime map files",
      "type": "array",
      "title": "Map Files Array",
      "items": {
        "$ref": "#/definitions/map"
      }
    },
    "monitor_fail": {
      "type": "object",
      "required": [
        "cond",
        "cond_test"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test"
        }
      }
    },
    "monitor_uri": {
      "type": "string"
    },
    "mysql_check_params": {
      "type": "object",
      "properties": {
        "client_version": {
          "type": "string",
          "enum": [
            "pre-41",
            "post-41"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "nameserver": {
      "description": "Nameserver used in Runtime DNS configuration",
      "type": "object",
      "title": "Nameserver",
      "required": [
        "name",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        }
      },
      "example": {
        "address": "10.0.0.1",
        "name": "ns1",
        "port": 53
      }
    },
    "nameservers": {
      "description": "Nameservers array",
      "type": "array",
      "title": "Nameservers",
      "items": {
        "$ref": "#/definitions/nameserver"
      }
    },
    "native_stat": {
      "description": "Current stats for one object.",
      "type": "object",
      "title": "Stats",
      "properties": {
        "backend_name": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "name": {
          "type": "string"
        },
        "stats": {
          "$ref": "#/definitions/native_stat_stats"
        },
        "type": {
          "type": "string",
          "enum": [
            "backend",
            "server",
            "frontend"
          ]
        }
      }
    },
    "native_stat_stats": {
      "type": "object",
      "properties": {
        "act": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "addr": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "agent_code": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_desc": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "agent_duration": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_fall": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_health": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_rise": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "agent_status": {
          "type": "string",
          "enum": [
            "UNK",
            "INI",
            "SOCKERR",
            "L40K",
            "L4TOUT",
            "L4CON",
            "L7OK",
            "L7STS"
          ],
          "x-dependency": {
            "type": "server"
          }
        },
        "algo": {
          "type": "string",
          "x-dependency": {
            "type": "backend"
          }
        },
        "bck": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "bin": {
          "type": "integer",
          "x-nullable": true
        },
        "bout": {
          "type": "integer",
          "x-nullable": true
        },
        "check_code": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_desc": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "check_duration": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_fall": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_health": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_rise": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "check_status": {
          "type": "string",
          "enum": [
            "UNK",
            "INI",
            "SOCKERR",
            "L40K",
            "L4TOUT",
            "L4CON",
            "L6OK",
            "L6TOUT",
            "L6RSP",
            "L7OK",
            "L7OKC",
            "L7TOUT",
            "L7RSP",
            "L7STS"
          ],
          "x-dependency": {
            "type": "server"
          }
        },
        "chkdown": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "chkfail": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "cli_abrt": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_byp": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_in": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_out": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "comp_rsp": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "conn_rate_max": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "conn_tot": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "cookie": {
          "type": "string",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          }
        },
        "ctime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "dcon": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "downtime": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "dreq": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "dresp": {
          "type": "integer",
          "x-nullable": true
        },
        "dses": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "econ": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "ereq": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "eresp": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "hanafail": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "hrsp_1xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_2xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_3xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_4xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_5xx": {
          "type": "integer",
          "x-nullable": true
        },
        "hrsp_other": {
          "type": "integer",
          "x-nullable": true
        },
        "iid": {
          "type": "integer",
          "x-nullable": true
        },
        "intercepted": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "lastchg": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "lastsess": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "lbtot": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "tcp",
            "http",
            "health",
            "unknown"
          ]
        },
        "pid": {
          "type": "integer",
          "x-nullable": true
        },
        "qcur": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "qlimit": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "qmax": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "qtime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "rate": {
          "type": "integer",
          "x-nullable": true
        },
        "rate_lim": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "rate_max": {
          "type": "integer",
          "x-nullable": true
        },
        "req_rate": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "req_rate_max": {
          "type": "integer",
          "x-dependency": {
            "type": "frontend"
          },
          "x-nullable": true
        },
        "req_tot": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "frontend",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "rtime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "scur": {
          "type": "integer",
          "x-nullable": true
        },
        "sid": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "slim": {
          "type": "integer",
          "x-nullable": true
        },
        "smax": {
          "type": "integer",
          "x-nullable": true
        },
        "srv_abrt": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": [
            "UP",
            "DOWN",
            "NOLB",
            "MAINT",
            "no check"
          ]
        },
        "stot": {
          "type": "integer",
          "x-nullable": true
        },
        "throttle": {
          "type": "integer",
          "x-dependency": {
            "type": "server"
          },
          "x-nullable": true
        },
        "tracked": {
          "type": "string",
          "x-dependency": {
            "type": "server"
          }
        },
        "ttime": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "weight": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "wredis": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        },
        "wretr": {
          "type": "integer",
          "x-dependency": {
            "type": [
              "server",
              "backend"
            ]
          },
          "x-nullable": true
        }
      },
      "example": {
        "bin": 4326578,
        "bout": 889901290,
        "comp_byp": 0,
        "comp_in": 0,
        "comp_out": 0,
        "comp_rsp": 0,
        "conn_rate": 12,
        "conn_rate_max": 456,
        "conn_tot": 45682,
        "dcon": 0,
        "dreq": 4,
        "dresp": 1,
        "dses": 0,
        "ereq": 54,
        "hrsp_1xx": 0,
        "hrsp_2xx": 165,
        "hrsp_3xx": 12,
        "hrsp_4xx": 50,
        "hrsp_5xx": 4,
        "hrsp_other": 0,
        "iid": 0,
        "intercepted": 346,
        "mode": "http",
        "pid": 3204,
        "rate": 64,
        "rate_lim": 20000,
        "rate_max": 4000,
        "req_rate": 49,
        "req_rate_max": 3965,
        "req_total": 1254786,
        "scur": 129,
        "slim": 2000,
        "smax": 2000,
        "status": "UP",
        "stot": 12902
      }
    },
    "native_stats": {
      "description": "HAProxy stats array",
      "type": "array",
      "title": "Stats Array",
      "items": {
        "$ref": "#/definitions/native_stats_collection"
      }
    },
    "native_stats_collection": {
      "description": "Stats from one runtime API",
      "type": "object",
      "title": "Stats collection",
      "properties": {
        "error": {
          "type": "string"
        },
        "runtimeAPI": {
          "type": "string"
        },
        "stats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/native_stat"
          }
        }
      }
    },
    "peer_entries": {
      "description": "HAProxy peer entries array",
      "type": "array",
      "title": "Peer entries",
      "items": {
        "$ref": "#/definitions/peer_entry"
      }
    },
    "peer_entry": {
      "description": "Peer Entry from peers table",
      "type": "object",
      "title": "Peer Entry",
      "required": [
        "name",
        "address",
        "port"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        }
      }
    },
    "peer_section": {
      "description": "HAProxy peer_section configuration",
      "type": "object",
      "title": "Peer Section",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        }
      },
      "additionalProperties": false
    },
    "peer_sections": {
      "description": "HAProxy peer_section array",
      "type": "array",
      "title": "Peer_Section",
      "items": {
        "$ref": "#/definitions/peer_section"
      }
    },
    "pgsql_check_params": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "process_info": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/process_info_item"
        },
        "runtimeAPI": {
          "type": "string"
        }
      }
    },
    "process_info_item": {
      "type": "object",
      "properties": {
        "active_peers": {
          "type": "integer",
          "x-nullable": true
        },
        "busy_polling": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "compress_bps_in": {
          "type": "integer",
          "x-nullable": true
        },
        "compress_bps_out": {
          "type": "integer",
          "x-nullable": true
        },
        "compress_bps_rate_lim": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "connected_peers": {
          "type": "integer",
          "x-nullable": true
        },
        "cum_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "cum_req": {
          "type": "integer",
          "x-nullable": true
        },
        "cum_ssl_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "curr_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "curr_ssl_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "dropped_logs": {
          "type": "integer",
          "x-nullable": true
        },
        "failed_resolutions": {
          "type": "integer",
          "x-nullable": true
        },
        "hard_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "idle_pct": {
          "type": "integer",
          "x-nullable": true
        },
        "jobs": {
          "type": "integer",
          "x-nullable": true
        },
        "listeners": {
          "type": "integer",
          "x-nullable": true
        },
        "max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "max_conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "max_pipes": {
          "type": "integer",
          "x-nullable": true
        },
        "max_sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "max_sock": {
          "type": "integer",
          "x-nullable": true
        },
        "max_ssl_conns": {
          "type": "integer",
          "x-nullable": true
        },
        "max_ssl_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "max_zlib_mem_usage": {
          "type": "integer",
          "x-nullable": true
        },
        "mem_max_mb": {
          "type": "integer",
          "x-nullable": true
        },
        "nbthread": {
          "description": "Number of threads",
          "type": "integer",
          "x-display-name": "Number of Threads",
          "x-nullable": true
        },
        "node": {
          "type": "string"
        },
        "pid": {
          "description": "Process id of the replying worker process",
          "type": "integer",
          "x-display-name": "PID",
          "x-nullable": true
        },
        "pipes_free": {
          "type": "integer",
          "x-nullable": true
        },
        "pipes_used": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_alloc_mb": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_failed": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_used_mb": {
          "type": "integer",
          "x-nullable": true
        },
        "process_num": {
          "description": "Process number",
          "type": "integer",
          "x-display-name": "Process Number",
          "x-nullable": true
        },
        "processes": {
          "description": "Number of spawned processes",
          "type": "integer",
          "x-display-name": "Number of processes",
          "x-nullable": true
        },
        "release_date": {
          "description": "HAProxy version release date",
          "type": "string",
          "format": "date"
        },
        "run_queue": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_backend_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_backend_max_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_cache_lookups": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_cache_misses": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_frontend_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_frontend_max_key_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_frontend_session_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "ssl_rate_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "stopping": {
          "type": "integer",
          "x-nullable": true
        },
        "tasks": {
          "type": "integer",
          "x-nullable": true
        },
        "total_bytes_out": {
          "type": "integer",
          "x-nullable": true
        },
        "ulimit_n": {
          "type": "integer",
          "x-nullable": true
        },
        "unstoppable": {
          "type": "integer",
          "x-nullable": true
        },
        "uptime": {
          "description": "HAProxy uptime in s",
          "type": "integer",
          "x-nullable": true
        },
        "version": {
          "description": "HAProxy version string",
          "type": "string"
        },
        "zlib_mem_usage": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "process_infos": {
      "description": "General HAProxy process information",
      "type": "array",
      "title": "HAProxy Information",
      "items": {
        "$ref": "#/definitions/process_info"
      }
    },
    "redispatch": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "interval": {
          "type": "integer",
          "x-nullable": false
        }
      }
    },
    "reload": {
      "description": "HAProxy reload",
      "type": "object",
      "title": "HAProxy reload",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
        },
        "reload_timestamp": {
          "type": "integer"
        },
        "response": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "succeeded"
          ]
        }
      },
      "example": {
        "id": "2019-01-03-44",
        "status": "in_progress"
      }
    },
    "reloads": {
      "description": "HAProxy reloads array",
      "type": "array",
      "title": "HAProxy Reloads Array",
      "items": {
        "$ref": "#/definitions/reload"
      }
    },
    "resolver": {
      "description": "Runtime DNS configuration",
      "type": "object",
      "title": "Resolver",
      "required": [
        "name"
      ],
      "properties": {
        "accepted_payload_size": {
          "type": "integer",
          "maximum": 8192,
          "minimum": 512
        },
        "hold_nx": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_obsolete": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_other": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_refused": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_timeout": {
          "type": "integer",
          "x-nullable": true
        },
        "hold_valid": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "parse-resolv-conf": {
          "type": "boolean"
        },
        "resolve_retries": {
          "type": "integer",
          "minimum": 1
        },
        "timeout_resolve": {
          "type": "integer",
          "x-nullable": false
        },
        "timeout_retry": {
          "type": "integer",
          "x-nullable": false
        }
      }
    },
    "resolvers": {
      "description": "HAProxy resolvers array",
      "type": "array",
      "title": "Resolvers",
      "items": {
        "$ref": "#/definitions/resolver"
      }
    },
    "return_header": {
      "type": "object",
      "required": [
        "name",
        "fmt"
      ],
      "properties": {
        "fmt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "x-go-name": "ReturnHeader"
    },
    "runtime_server": {
      "description": "Runtime transient server properties",
      "type": "object",
      "title": "Runtime Server",
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false,
          "readOnly": true
        },
        "admin_state": {
          "type": "string",
          "enum": [
            "ready",
            "maint",
            "drain"
          ]
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "operational_state": {
          "type": "string",
          "enum": [
            "up",
            "down",
            "stopping"
          ]
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true,
          "readOnly": true
        }
      },
      "example": {
        "address": "127.0.0.5",
        "admin_state": "ready",
        "operational_state": "up",
        "port": 80,
        "server_id": 1,
        "server_name": "web_server"
      }
    },
    "runtime_servers": {
      "description": "HAProxy runtime servers array",
      "type": "array",
      "title": "HAProxy Runtime Servers Array",
      "items": {
        "$ref": "#/definitions/runtime_server"
      }
    },
    "server": {
      "description": "HAProxy backend server configuration",
      "type": "object",
      "title": "Server",
      "required": [
        "name",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check_alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Protocols"
        },
        "check_proto": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Name"
        },
        "check_via_socks4": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "error_limit": {
          "type": "integer",
          "x-display-name": "Error count"
        },
        "fall": {
          "type": "integer",
          "x-display-name": "Nr. of consecutive failed checks",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "force_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "init-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "log_proto": {
          "type": "string",
          "enum": [
            "legacy",
            "octet-count"
          ]
        },
        "maintenance": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "max_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Concurrent Connections",
          "x-nullable": true
        },
        "maxqueue": {
          "type": "integer",
          "x-display-name": "Max Number of Connections",
          "x-nullable": true
        },
        "minconn": {
          "type": "integer",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "no_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_verifyhost": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "npn": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "observe": {
          "type": "string",
          "enum": [
            "layer4",
            "layer7"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "pool_low_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_purge_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "proto": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proxy-v2-options": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ssl",
              "cert-cn",
              "ssl-cipher",
              "cert-sig",
              "cert-key",
              "authority",
              "crc32c",
              "unique-id"
            ]
          }
        },
        "redir": {
          "type": "string",
          "x-display-name": "Prefix"
        },
        "resolve-net": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$",
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve-prefer": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve_opts": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$"
        },
        "resolvers": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getResolvers",
            "property": "name"
          }
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl_cn": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "slowstart": {
          "type": "integer",
          "x-nullable": true
        },
        "sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "socks4": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "check-via-socks4": {
              "required": true
            }
          }
        },
        "source": {
          "type": "string"
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_reuse": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "stick": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tcp_ut": {
          "type": "integer"
        },
        "tfo": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "track": {
          "type": "string"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verifyhost": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            },
            "verify": {
              "value": "required"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "address": "10.1.1.1",
        "check": "enabled",
        "name": "www",
        "port": 8080,
        "weight": 80
      }
    },
    "server_switching_rule": {
      "description": "HAProxy server switching rule configuration (corresponds to use-server directive)",
      "type": "object",
      "title": "Server Switching Rule",
      "required": [
        "index",
        "target_server"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "target_server": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getServers",
            "property": "name"
          },
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ req_ssl_sni -i www.example.com }",
        "index": 0,
        "target_server": "www"
      }
    },
    "server_switching_rules": {
      "description": "HAProxy backend server switching rules array (corresponds to use-server directives)",
      "type": "array",
      "title": "Server Switching Rules Array",
      "items": {
        "$ref": "#/definitions/server_switching_rule"
      }
    },
    "server_template": {
      "description": "Set a template to initialize servers with shared parameters.",
      "type": "object",
      "title": "Server template",
      "required": [
        "prefix",
        "num_or_range",
        "fqdn"
      ],
      "properties": {
        "agent-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "agent-check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "agent-port": {
              "required": true
            }
          }
        },
        "agent-inter": {
          "type": "integer",
          "x-nullable": true
        },
        "agent-port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "agent-send": {
          "type": "string"
        },
        "allow_0rtt": {
          "type": "boolean"
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "ALPN Protocols"
        },
        "backup": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check-sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "check-ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "check_alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Protocols"
        },
        "check_proto": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-display-name": "Name"
        },
        "check_via_socks4": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ciphers": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ciphersuites": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "cookie": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "crl_file": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "downinter": {
          "type": "integer",
          "x-nullable": true
        },
        "error_limit": {
          "type": "integer",
          "x-display-name": "Error count"
        },
        "fall": {
          "type": "integer",
          "x-display-name": "Nr. of consecutive failed checks",
          "x-nullable": true
        },
        "fastinter": {
          "type": "integer",
          "x-nullable": true
        },
        "force_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "force_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "fqdn": {
          "type": "string",
          "x-nullable": false
        },
        "health_check_port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "id": {
          "type": "integer",
          "x-nullable": true
        },
        "init-addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "inter": {
          "type": "integer",
          "x-nullable": true
        },
        "log_proto": {
          "type": "string",
          "enum": [
            "legacy",
            "octet-count"
          ]
        },
        "maintenance": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "max_reuse": {
          "type": "integer",
          "x-nullable": true
        },
        "maxconn": {
          "type": "integer",
          "x-display-name": "Max Concurrent Connections",
          "x-nullable": true
        },
        "maxqueue": {
          "type": "integer",
          "x-display-name": "Max Number of Connections",
          "x-nullable": true
        },
        "minconn": {
          "type": "integer",
          "x-nullable": true
        },
        "namespace": {
          "type": "string"
        },
        "no_sslv3": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv10": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv11": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv12": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_tlsv13": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "no_verifyhost": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "npn": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "num_or_range": {
          "type": "string",
          "x-nullable": false
        },
        "observe": {
          "type": "string",
          "enum": [
            "layer4",
            "layer7"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "on-error": {
          "type": "string",
          "enum": [
            "fastinter",
            "fail-check",
            "sudden-death",
            "mark-down"
          ]
        },
        "on-marked-down": {
          "type": "string",
          "enum": [
            "shutdown-sessions"
          ]
        },
        "on-marked-up": {
          "type": "string",
          "enum": [
            "shutdown-backup-sessions"
          ]
        },
        "pool_low_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_max_conn": {
          "type": "integer",
          "x-nullable": true
        },
        "pool_purge_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": true
        },
        "prefix": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "proto": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "proxy-v2-options": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ssl",
              "cert-cn",
              "ssl-cipher",
              "cert-sig",
              "cert-key",
              "authority",
              "crc32c",
              "unique-id"
            ]
          }
        },
        "redir": {
          "type": "string",
          "x-display-name": "Prefix"
        },
        "resolve-net": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$",
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve-prefer": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "resolvers": {
              "required": true
            }
          }
        },
        "resolve_opts": {
          "type": "string",
          "pattern": "^[^,\\s][^\\,]*[^,\\s]*$"
        },
        "resolvers": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dynamic-enum": {
            "operation": "getResolvers",
            "property": "name"
          }
        },
        "rise": {
          "type": "integer",
          "x-nullable": true
        },
        "send-proxy": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send-proxy-v2": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "send_proxy_v2_ssl_cn": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "slowstart": {
          "type": "integer",
          "x-nullable": true
        },
        "sni": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "socks4": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "check-via-socks4": {
              "required": true
            }
          }
        },
        "source": {
          "type": "string"
        },
        "ssl": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "ssl_cafile": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          },
          "x-display-name": "SSL CA File"
        },
        "ssl_certificate": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "ssl_max_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_min_ver": {
          "type": "string",
          "enum": [
            "SSLv3",
            "TLSv1.0",
            "TLSv1.1",
            "TLSv1.2",
            "TLSv1.3"
          ]
        },
        "ssl_reuse": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "stick": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tcp_ut": {
          "type": "integer"
        },
        "tfo": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "tls_tickets": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "track": {
          "type": "string"
        },
        "verify": {
          "type": "string",
          "enum": [
            "none",
            "required"
          ],
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            }
          }
        },
        "verifyhost": {
          "type": "string",
          "x-dependency": {
            "ssl": {
              "value": "enabled"
            },
            "verify": {
              "value": "required"
            }
          }
        },
        "weight": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "additionalProperties": false,
      "example": {
        "fqdn": "google.com",
        "num_or_range": "1-3",
        "port": 80,
        "prefix": "srv"
      }
    },
    "server_templates": {
      "description": "HAProxy backend server templates array",
      "type": "array",
      "title": "Server templates",
      "items": {
        "$ref": "#/definitions/server_template"
      }
    },
    "servers": {
      "description": "HAProxy backend servers array",
      "type": "array",
      "title": "Servers",
      "items": {
        "$ref": "#/definitions/server"
      }
    },
    "site": {
      "description": "Site configuration. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration\nendpoints.\n",
      "type": "object",
      "title": "Site",
      "required": [
        "name"
      ],
      "properties": {
        "farms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteFarmsItems0"
          }
        },
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        },
        "service": {
          "type": "object",
          "properties": {
            "http_connection_mode": {
              "type": "string",
              "enum": [
                "http-tunnel",
                "httpclose",
                "forced-close",
                "http-server-close",
                "http-keep-alive"
              ],
              "x-dependency": {
                "mode": {
                  "value": "http"
                }
              },
              "x-display-name": "HTTP Connection Mode"
            },
            "listeners": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bind"
              }
            },
            "maxconn": {
              "type": "integer",
              "x-display-name": "Max Connections",
              "x-nullable": true
            },
            "mode": {
              "type": "string",
              "enum": [
                "http",
                "tcp"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "farms": [
          {
            "balance": {
              "algorithm": "roundrobin"
            },
            "mode": "http",
            "name": "www_backend",
            "servers": [
              {
                "address": "127.0.1.1",
                "name": "www_server",
                "port": 4567,
                "weight": 30
              },
              {
                "address": "127.0.1.2",
                "name": "www_server_new",
                "port": 4567,
                "weight": 70
              }
            ],
            "use_as": "default"
          }
        ],
        "name": "test_site",
        "service": {
          "http_connection_mode": "httpclose",
          "listeners": [
            {
              "address": "127.0.0.1",
              "name": "test_listener",
              "port": 80
            },
            {
              "address": "127.0.0.1",
              "name": "test_listener_2",
              "port": 8080
            }
          ],
          "maxconn": 2000,
          "mode": "http"
        }
      }
    },
    "sites": {
      "description": "Sites array. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration\nendpoints.\n",
      "type": "array",
      "title": "Sites",
      "items": {
        "$ref": "#/definitions/site"
      }
    },
    "smtpchk_params": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "hello": {
          "type": "string"
        }
      }
    },
    "spoe_agent": {
      "description": "SPOE agent configuration",
      "type": "object",
      "title": "SPOE agent",
      "required": [
        "name"
      ],
      "properties": {
        "async": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "continue-on-error": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "dontlog-normal": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "engine-name": {
          "type": "string"
        },
        "force-set-var": {
          "type": "string",
          "enum": [
            "enabled"
          ]
        },
        "groups": {
          "type": "string"
        },
        "hello_timeout": {
          "type": "integer"
        },
        "idle_timeout": {
          "type": "integer"
        },
        "log": {
          "$ref": "#/definitions/log_targets"
        },
        "max-frame-size": {
          "type": "integer"
        },
        "max-waiting-frames": {
          "type": "integer"
        },
        "maxconnrate": {
          "type": "integer"
        },
        "maxerrrate": {
          "type": "integer"
        },
        "messages": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "option_set-on-error": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "option_set-process-time": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "option_set-total-time": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "option_var-prefix": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.]+$"
        },
        "pipelining": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "processing_timeout": {
          "type": "integer"
        },
        "register-var-names": {
          "type": "string"
        },
        "send-frag-payload": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "use-backend": {
          "type": "string"
        }
      }
    },
    "spoe_agents": {
      "description": "SPOE Agents of one scope in SPOE file",
      "type": "array",
      "title": "SPOE Agents",
      "items": {
        "$ref": "#/definitions/spoe_agent"
      }
    },
    "spoe_files": {
      "description": "SPOE files",
      "type": "array",
      "title": "SPOE files",
      "items": {
        "type": "string"
      }
    },
    "spoe_group": {
      "description": "SPOE group section configuration",
      "type": "object",
      "title": "SPOE group",
      "required": [
        "name"
      ],
      "properties": {
        "messages": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "spoe_groups": {
      "description": "SPOE Groups of one scope in SPOE file",
      "type": "array",
      "title": "SPOE Groups",
      "items": {
        "$ref": "#/definitions/spoe_group"
      }
    },
    "spoe_message": {
      "description": "SPOE message section configuration",
      "type": "object",
      "title": "SPOE message",
      "required": [
        "name"
      ],
      "properties": {
        "acl": {
          "$ref": "#/definitions/acls"
        },
        "args": {
          "type": "string"
        },
        "event": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "cond": {
              "type": "string",
              "enum": [
                "if",
                "unless"
              ],
              "x-display-name": "Condition"
            },
            "cond_test": {
              "type": "string",
              "x-dependency": {
                "cond": {
                  "required": true
                }
              },
              "x-display-name": "Condition Test"
            },
            "name": {
              "type": "string",
              "enum": [
                "on-client-session",
                "on-server-session",
                "on-frontend-tcp-request",
                "on-backend-tcp-request",
                "on-tcp-response",
                "on-frontend-http-request",
                "on-backend-http-request",
                "on-http-response"
              ]
            }
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "spoe_messages": {
      "description": "SPOE Messages of one scope in SPOE file",
      "type": "array",
      "title": "SPOE Messages",
      "items": {
        "$ref": "#/definitions/spoe_message"
      }
    },
    "spoe_scope": {
      "description": "SPOE scope name",
      "type": "string",
      "title": "SPOE scope"
    },
    "spoe_scopes": {
      "description": "All SPOE Scopes",
      "type": "array",
      "title": "SPOE Scopes",
      "items": {
        "$ref": "#/definitions/spoe_scope"
      }
    },
    "spoe_transaction": {
      "description": "SPOE configuration transaction",
      "type": "object",
      "title": "SPOE configuration transaction",
      "properties": {
        "_version": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "in_progress",
            "success"
          ]
        }
      },
      "example": {
        "_version": 2,
        "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
        "status": "in_progress"
      }
    },
    "spoe_transactions": {
      "description": "SPOE Configuration transactions array",
      "type": "array",
      "title": "SPOE Transactions array",
      "items": {
        "$ref": "#/definitions/spoe_transaction"
      }
    },
    "ssl_cert_entry": {
      "description": "One SSL/TLS certificate",
      "type": "object",
      "title": "One SSL Certificate Entry",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "chain_issuer": {
          "type": "string"
        },
        "chain_subject": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "not_after": {
          "type": "string",
          "format": "date"
        },
        "not_before": {
          "type": "string",
          "format": "date"
        },
        "serial": {
          "type": "string"
        },
        "sha1_finger_print": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "subject_alternative_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ssl_certificate": {
      "description": "A file containing one or more SSL/TLS certificates and keys",
      "type": "object",
      "title": "SSL File",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "ssl_certificates": {
      "description": "Array of ssl certificate files",
      "type": "array",
      "title": "SSL Files Array",
      "items": {
        "$ref": "#/definitions/ssl_certificate"
      }
    },
    "stats_options": {
      "type": "object",
      "properties": {
        "stats_admin": {
          "type": "boolean",
          "x-display-name": "Stats Admin"
        },
        "stats_admin_cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "stats_admin": {
              "required": true,
              "value": true
            }
          },
          "x-display-name": "Stats Admin Condition"
        },
        "stats_admin_cond_test": {
          "type": "string",
          "x-dependency": {
            "stats_admin_cond": {
              "required": true
            }
          },
          "x-display-name": "Stats Admin Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "stats_enable": {
          "type": "boolean",
          "x-display-name": "Stats Enable"
        },
        "stats_hide_version": {
          "type": "boolean",
          "x-display-name": "Stats Hide Version"
        },
        "stats_maxconn": {
          "type": "integer",
          "minimum": 1
        },
        "stats_refresh_delay": {
          "type": "integer",
          "x-nullable": true
        },
        "stats_show_desc": {
          "type": "string",
          "x-nullable": true
        },
        "stats_show_legends": {
          "type": "boolean",
          "x-display-name": "Stats Show Legends"
        },
        "stats_show_node_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": true
        },
        "stats_uri_prefix": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        }
      }
    },
    "stick_rule": {
      "description": "Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.",
      "type": "object",
      "title": "Stick Rule",
      "required": [
        "index",
        "type",
        "pattern"
      ],
      "properties": {
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "pattern": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-nullable": false
        },
        "table": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "type": {
          "type": "string",
          "enum": [
            "match",
            "on",
            "store-request",
            "store-response"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "index": 0,
        "pattern": "src",
        "type": "match"
      }
    },
    "stick_rules": {
      "description": "HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)",
      "type": "array",
      "title": "Stick Rules Array",
      "items": {
        "$ref": "#/definitions/stick_rule"
      }
    },
    "stick_table": {
      "description": "Stick Table Information",
      "type": "object",
      "title": "Stick Table",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StickTableFieldsItems0"
          }
        },
        "name": {
          "type": "string"
        },
        "process": {
          "description": "Process number if master-worker mode",
          "type": "integer",
          "x-nullable": true
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "ip",
            "ipv6",
            "integer",
            "string",
            "binary"
          ]
        },
        "used": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "stick_table_entries": {
      "description": "Entries of one runtime stick table",
      "type": "array",
      "title": "Stick Tables Entries",
      "items": {
        "$ref": "#/definitions/stick_table_entry"
      }
    },
    "stick_table_entry": {
      "description": "One entry in stick table",
      "type": "object",
      "title": "Stick Table Entry",
      "properties": {
        "bytes_in_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_in_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "bytes_out_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_cur": {
          "type": "integer",
          "x-nullable": true
        },
        "conn_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "exp": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc0_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1": {
          "type": "integer",
          "x-nullable": true
        },
        "gpc1_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "gpt0": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_err_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "http_req_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "server_id": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_cnt": {
          "type": "integer",
          "x-nullable": true
        },
        "sess_rate": {
          "type": "integer",
          "x-nullable": true
        },
        "use": {
          "type": "boolean"
        }
      }
    },
    "stick_tables": {
      "description": "Array of runtime stick tables",
      "type": "array",
      "title": "Stick Tables Array",
      "items": {
        "$ref": "#/definitions/stick_table"
      }
    },
    "tcp_check": {
      "type": "object",
      "title": "TCP Check",
      "required": [
        "index",
        "action"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "comment",
            "connect",
            "expect",
            "send",
            "send-lf",
            "send-binary",
            "send-binary-lf",
            "set-var",
            "set-var-fmt",
            "unset-var"
          ],
          "x-nullable": false
        },
        "addr": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "alpn": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-display-name": "ALPN Protocols",
          "x-nullable": false
        },
        "check_comment": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": [
                "connect",
                "expect",
                "send",
                "send-lf",
                "send-binary",
                "send-binary-lf"
              ]
            }
          },
          "x-nullable": false
        },
        "data": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send"
            }
          }
        },
        "default": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "error_status": {
          "type": "string",
          "enum": [
            "L7OKC",
            "L7RSP",
            "L7STS",
            "L6RSP",
            "L4CON"
          ],
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "exclamation_mark": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          },
          "x-display-name": "Expect Exclamation Mark"
        },
        "fmt": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-lf"
            }
          }
        },
        "hex_fmt": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-binary-lf"
            }
          }
        },
        "hex_string": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-binary"
            }
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "linger": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "log_message": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "comment"
            }
          }
        },
        "match": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "enum": [
            "string",
            "rstring",
            "string-lf",
            "binary",
            "rbinary",
            "binary-lf"
          ],
          "x-dependency": {
            "action": {
              "required": true,
              "value": "expect"
            }
          },
          "x-display-name": "Expect Match"
        },
        "min_recv": {
          "type": "integer",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "ok_status": {
          "type": "string",
          "enum": [
            "L7OK",
            "L7OKC",
            "L6OK",
            "L4OK"
          ],
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "on_error": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "on_success": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "pattern": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "expect"
            }
          }
        },
        "port": {
          "type": "integer",
          "maximum": 65535,
          "minimum": 1,
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": true
        },
        "port_string": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "proto": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "send_proxy": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "sni": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          },
          "x-nullable": false
        },
        "ssl": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        },
        "status-code": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "tout_status": {
          "type": "string",
          "enum": [
            "L7TOUT",
            "L6TOUT",
            "L4TOUT"
          ],
          "x-dependency": {
            "action": {
              "value": "expect"
            }
          }
        },
        "var_expr": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var"
              ]
            }
          },
          "x-display-name": "Var Expression"
        },
        "var_fmt": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var-fmt"
              ]
            }
          },
          "x-display-name": "Var Log format"
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "set-var-fmt",
                "unset-var"
              ]
            }
          }
        },
        "via_socks4": {
          "type": "boolean",
          "x-dependency": {
            "action": {
              "value": "connect"
            }
          }
        }
      }
    },
    "tcp_checks": {
      "type": "array",
      "title": "TCP Checks Array",
      "items": {
        "$ref": "#/definitions/tcp_check"
      }
    },
    "tcp_request_rule": {
      "description": "HAProxy TCP Request Rule configuration (corresponds to tcp-request)",
      "type": "object",
      "title": "TCP Request Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "capture",
            "do-resolve",
            "expect-netscaler-cip",
            "expect-proxy",
            "reject",
            "sc-inc-gpc0",
            "sc-inc-gpc1",
            "sc-set-gpt0",
            "send-spoe-group",
            "set-dst-port",
            "set-dst",
            "set-priority",
            "set-src",
            "set-var",
            "silent-drop",
            "track-sc0",
            "track-sc1",
            "track-sc2",
            "unset-var",
            "use-service",
            "lua"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-nullable": false
        },
        "capture_len": {
          "type": "integer",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "capture"
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Capture Length"
        },
        "capture_sample": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "capture"
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Capture Sample"
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "expr": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "do-resolve",
                "set-var",
                "set-src",
                "set-priority",
                "set-dst",
                "set-dst-port"
              ]
            },
            "type": {
              "value": [
                "session",
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Standard HAProxy expression"
        },
        "gpt_value": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "sc-set-gpt0"
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Sticky counter value"
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "lua"
            },
            "type": {
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Lua action name"
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "lua"
            },
            "type": {
              "value": [
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Lua action params"
        },
        "priority_type": {
          "type": "string",
          "enum": [
            "class",
            "offset"
          ],
          "x-dependency": {
            "action": {
              "required": true,
              "value": "set-priority"
            },
            "type": {
              "value": [
                "content"
              ]
            }
          }
        },
        "resolve_protocol": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "x-dependency": {
            "action": {
              "required": false,
              "value": "do-resolve"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Protocol"
        },
        "resolve_resolvers": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "do-resolve"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Resolvers"
        },
        "resolve_var": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "do-resolve"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Variable name"
        },
        "sc_inc_id": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "sc-inc-gpc0",
                "sc-inc-gpc1",
                "sc-set-gpt0"
              ]
            },
            "type": {
              "required": true,
              "value": [
                "connection",
                "content",
                "session"
              ]
            }
          },
          "x-display-name": "Sticky counter ID"
        },
        "service_name": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "use-service"
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Service name"
        },
        "spoe_engine_name": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-spoe-group"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Engine name"
        },
        "spoe_group_name": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "send-spoe-group"
            },
            "type": {
              "required": true,
              "value": [
                "content"
              ]
            }
          },
          "x-display-name": "Group name"
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "track_key": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "track-sc0",
                "track-sc1",
                "track-sc2"
              ]
            },
            "type": {
              "value": [
                "session",
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Sample expression rule"
        },
        "track_table": {
          "type": "string",
          "x-dependency": {
            "action": {
              "required": false,
              "value": [
                "track-sc0",
                "track-sc1",
                "track-sc2"
              ]
            },
            "type": {
              "value": [
                "session",
                "connection",
                "content"
              ]
            }
          },
          "x-display-name": "Optional table name"
        },
        "type": {
          "type": "string",
          "enum": [
            "connection",
            "content",
            "inspect-delay",
            "session"
          ],
          "x-nullable": false
        },
        "var_name": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "unset-var"
              ]
            },
            "type": {
              "value": [
                "session",
                "content"
              ]
            }
          },
          "x-display-name": "Variable name"
        },
        "var_scope": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": [
                "set-var",
                "unset-var"
              ]
            },
            "type": {
              "value": [
                "session",
                "content"
              ]
            }
          },
          "x-display-name": "Variable scope"
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "index": 0,
        "type": "connection"
      }
    },
    "tcp_request_rules": {
      "description": "HAProxy TCP request rules array (corresponds to tcp-request directive)",
      "type": "array",
      "title": "TCP Request Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_request_rule"
      }
    },
    "tcp_response_rule": {
      "description": "HAProxy TCP Response Rule configuration (corresponds to tcp-response)",
      "type": "object",
      "title": "TCP Response Rule",
      "required": [
        "index",
        "type"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject",
            "lua"
          ],
          "x-dependency": {
            "type": {
              "required": true,
              "value": "content"
            }
          },
          "x-nullable": false
        },
        "cond": {
          "type": "string",
          "enum": [
            "if",
            "unless"
          ],
          "x-dependency": {
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition"
        },
        "cond_test": {
          "type": "string",
          "x-dependency": {
            "cond": {
              "required": true
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Condition Test",
          "x-dynamic-enum": {
            "freeFormat": true,
            "operation": "getACLs",
            "property": "acl_name"
          }
        },
        "index": {
          "type": "integer",
          "x-nullable": true
        },
        "lua_action": {
          "type": "string",
          "pattern": "^[^\\s]+$",
          "x-dependency": {
            "action": {
              "required": true,
              "value": "lua"
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Lua action name"
        },
        "lua_params": {
          "type": "string",
          "x-dependency": {
            "action": {
              "value": "lua"
            },
            "type": {
              "value": "content"
            }
          },
          "x-display-name": "Lua action params"
        },
        "timeout": {
          "type": "integer",
          "x-dependency": {
            "type": {
              "required": true,
              "value": "inspect-delay"
            }
          },
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "content",
            "inspect-delay"
          ],
          "x-nullable": false
        }
      },
      "additionalProperties": false,
      "example": {
        "cond": "if",
        "cond_test": "{ src 192.168.0.0/16 }",
        "index": 0,
        "type": "content"
      }
    },
    "tcp_response_rules": {
      "description": "HAProxy TCP response rules array (corresponds to tcp-response directive)",
      "type": "array",
      "title": "TCP Response Rules Array",
      "items": {
        "$ref": "#/definitions/tcp_response_rule"
      }
    },
    "transaction": {
      "description": "HAProxy configuration transaction",
      "type": "object",
      "title": "Configuration transaction",
      "properties": {
        "_version": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "pattern": "^[^\\s]+$"
        },
        "status": {
          "type": "string",
          "enum": [
            "failed",
            "outdated",
            "in_progress",
            "success"
          ]
        }
      },
      "example": {
        "_version": 2,
        "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
        "status": "in_progress"
      }
    },
    "transactions": {
      "description": "Configuration transactions array",
      "type": "array",
      "title": "Transactions array",
      "items": {
        "$ref": "#/definitions/transaction"
      }
    },
    "user": {
      "description": "HAProxy userlist user",
      "title": "User",
      "required": [
        "username",
        "secure_password",
        "password"
      ],
      "properties": {
        "groups": {
          "type": "string",
          "x-nullable": false
        },
        "password": {
          "type": "string",
          "x-nullable": false
        },
        "secure_password": {
          "type": "boolean"
        },
        "username": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        }
      }
    },
    "userlist": {
      "description": "HAProxy configuration of access control",
      "type": "object",
      "title": "Userlist",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[A-Za-z0-9-_.:]+$",
          "x-nullable": false
        }
      }
    },
    "userlists": {
      "description": "HAProxy userlists array",
      "type": "array",
      "title": "Userlists",
      "items": {
        "$ref": "#/definitions/userlist"
      }
    },
    "users": {
      "description": "HAProxy userlist users array",
      "type": "array",
      "title": "Users",
      "items": {
        "$ref": "#/definitions/user"
      }
    }
  },
  "parameters": {
    "force_reload": {
      "type": "boolean",
      "default": false,
      "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
      "name": "force_reload",
      "in": "query"
    },
    "skip_reload": {
      "type": "boolean",
      "default": false,
      "description": "If set, no reload will be initiated after update",
      "name": "skip_reload",
      "in": "query"
    },
    "transaction_id": {
      "type": "string",
      "x-nullable": false,
      "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
      "name": "transaction_id",
      "in": "query"
    },
    "version": {
      "type": "integer",
      "x-nullable": false,
      "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
      "name": "version",
      "in": "query"
    }
  },
  "responses": {
    "AlreadyExists": {
      "description": "The specified resource already exists",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "DefaultError": {
      "description": "General Error",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "NotAcceptable": {
      "description": "The specified resource cannot be handled",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Configuration-Version": {
          "type": "string",
          "description": "Configuration file version"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic_auth": []
    }
  ],
  "tags": [
    {
      "name": "ACL"
    },
    {
      "description": "Managing backend configurations (advanced mode)",
      "name": "Backend"
    },
    {
      "name": "BackendSwitchingRule"
    },
    {
      "description": "Managing frontend bind configurations (advanced mode)",
      "name": "Bind"
    },
    {
      "name": "Cache"
    },
    {
      "name": "Cluster"
    },
    {
      "description": "Raw HAProxy configuration management (advanced mode)",
      "name": "Configuration"
    },
    {
      "name": "DeclareCapture"
    },
    {
      "description": "Managing defaults configuration (advanced mode)",
      "name": "Defaults"
    },
    {
      "description": "API autodiscover endpoints",
      "name": "Discovery"
    },
    {
      "name": "Filter"
    },
    {
      "description": "Managing frontend configuration (advanced mode)",
      "name": "Frontend"
    },
    {
      "description": "Managing global configuration (advanced mode)",
      "name": "Global"
    },
    {
      "name": "HTTPCheck"
    },
    {
      "name": "HTTPRequestRule"
    },
    {
      "name": "HTTPResponseRule"
    },
    {
      "name": "Information"
    },
    {
      "name": "LogTarget"
    },
    {
      "name": "Maps"
    },
    {
      "name": "Nameserver"
    },
    {
      "name": "Peer"
    },
    {
      "name": "PeerEntry"
    },
    {
      "description": "Checking reload success. To avoid constant reloading we reload in intervals that are configurable when\nwith reload-delay option. When a change to configuration is made and force_reload url query string\nparameter is false we issue a request for reload, and return the reload ID in response header. You can\nthen use reloads endpoints to check the status of that reload ID. If force_reload is true, we override all\nof this and reload immediately.\n",
      "name": "Reloads"
    },
    {
      "name": "Resolver"
    },
    {
      "description": "Managing backend server configurations (advanced mode)",
      "name": "Server"
    },
    {
      "name": "ServerSwitchingRule"
    },
    {
      "name": "ServerTemplate"
    },
    {
      "name": "ServiceDiscovery"
    },
    {
      "description": "Managing sites (simple configuration mode). Sites are considered as one frontend with multiple backends\nconnected to it via default_backend or use-backend directives.\n",
      "name": "Sites"
    },
    {
      "name": "Specification"
    },
    {
      "name": "SpecificationOpenapiv3"
    },
    {
      "name": "Spoe"
    },
    {
      "name": "SpoeTransactions"
    },
    {
      "description": "Stats container",
      "name": "Stats"
    },
    {
      "name": "StickRule"
    },
    {
      "name": "StickTable"
    },
    {
      "name": "Storage"
    },
    {
      "name": "TCPCheck"
    },
    {
      "name": "TCPRequestRule"
    },
    {
      "name": "TCPResponseRule"
    },
    {
      "description": "Managing transactions. Configuration changes can be grouped in the transaction. You start the\ntransaction with trasactions POST, and call the configuration changes you need with parameter\ntransaction_id. When you want to commit the transaction, you call the transactions PUT and all changes\nin that transaction is commited. If you call a configuration change without the transaction_id,\ntransaction mechanism is implicitly called with one operation in transaction.\n",
      "name": "Transactions"
    },
    {
      "name": "Userlist"
    }
  ],
  "externalDocs": {
    "description": "HAProxy Documentation",
    "url": "https://cbonte.github.io/haproxy-dconv/"
  }
}`))
}
